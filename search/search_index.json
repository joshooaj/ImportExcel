{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"PowerShell and Excel","text":"<p>Has the ImportExcel module helped you? - Made you look good to the boss? - Saved you time? - Made you more productive?</p> <p>Consider donating. Thank you!  </p> <p> </p>"},{"location":"#overview","title":"Overview","text":"<p>Automate Excel with PowerShell without having Excel installed. Works on Windows, Linux and Mac. Creating Tables, Pivot Tables, Charts and much more just got a lot easier.</p>"},{"location":"#examples","title":"Examples \u2728","text":"<p>Check out the more than 100 examples on ways to create amazing reports as well as make you more productive with PowerShell and Excel.</p>"},{"location":"#basic-usage","title":"Basic Usage","text":""},{"location":"#installation","title":"Installation","text":"<pre><code>Install-Module -Name ImportExcel\n</code></pre>"},{"location":"#create-a-spreadsheet","title":"Create a spreadsheet","text":"<p>Here is a quick example that will create spreadsheet file from CSV data. Works with JSON, Databases, and more.</p> <pre><code>$data = ConvertFrom-Csv @\"\nRegion,State,Units,Price\nWest,Texas,927,923.71\nNorth,Tennessee,466,770.67\nEast,Florida,520,458.68\nEast,Maine,828,661.24\nWest,Virginia,465,053.58\nNorth,Missouri,436,235.67\nSouth,Kansas,214,992.47\nNorth,North Dakota,789,640.72\nSouth,Delaware,712,508.55\n\"@\n\n$data | Export-Excel .\\salesData.xlsx\n</code></pre> <p></p>"},{"location":"#read-a-spreadsheet","title":"Read a spreadsheet","text":"<p>Quickly read a spreadsheet document into a PowerShell array.</p> <pre><code>$data = Import-Excel .\\salesData.xlsx\n\n$data\n</code></pre> <pre><code>Region State        Units Price\n------ -----        ----- -----\nWest   Texas        927   923.71\nNorth  Tennessee    466   770.67\nEast   Florida      520   458.68\nEast   Maine        828   661.24\nWest   Virginia     465   053.58\nNorth  Missouri     436   235.67\nSouth  Kansas       214   992.47\nNorth  North Dakota 789   640.72\nSouth  Delaware     712   508.55\n</code></pre>"},{"location":"#add-a-chart-to-spreadsheet","title":"Add a chart to spreadsheet","text":"<p>Chart generation is as easy as 123. Building charts based on data in your worksheet doesn't get any easier.</p> <p>Plus, it is automated and repeatable.</p> <pre><code>$data = ConvertFrom-Csv @\"\nRegion,State,Units,Price\nWest,Texas,927,923.71\nNorth,Tennessee,466,770.67\nEast,Florida,520,458.68\nEast,Maine,828,661.24\nWest,Virginia,465,053.58\nNorth,Missouri,436,235.67\nSouth,Kansas,214,992.47\nNorth,North Dakota,789,640.72\nSouth,Delaware,712,508.55\n\"@\n\n$chart = New-ExcelChartDefinition -XRange State -YRange Units -Title \"Units by State\" -NoLegend\n\n$data | Export-Excel .\\salesData.xlsx -AutoNameRange -ExcelChartDefinition $chart -Show\n</code></pre> <p></p>"},{"location":"#add-a-pivot-table-to-spreadsheet","title":"Add a pivot table to spreadsheet","text":"<p>Categorize, sort, filter, and summarize any amount data with pivot tables. Then add charts.</p> <pre><code>$data = ConvertFrom-Csv @\"\nRegion,State,Units,Price\nWest,Texas,927,923.71\nNorth,Tennessee,466,770.67\nEast,Florida,520,458.68\nEast,Maine,828,661.24\nWest,Virginia,465,053.58\nNorth,Missouri,436,235.67\nSouth,Kansas,214,992.47\nNorth,North Dakota,789,640.72\nSouth,Delaware,712,508.55\n\"@\n\n$data | Export-Excel .\\salesData.xlsx -AutoNameRange -Show -PivotRows Region -PivotData @{'Units'='sum'} -PivotChartType PieExploded3D\n</code></pre> <p></p>"},{"location":"#convert-excel-data-to-other-formats","title":"Convert Excel data to other formats","text":""},{"location":"#create-a-separate-csv-file-for-each-excel-sheet","title":"Create a separate CSV file for each Excel sheet","text":"<p>Do you have an Excel file with multiple sheets and you need to convert each sheet to CSV file?</p>"},{"location":"#problem-solved","title":"Problem Solved","text":"<p>The yearlyRetailSales.xlsx has 12 sheets of retail data for the year.</p> <p>This single line of PowerShell converts any number of sheets in an Excel workbook to separate CSV files.</p> <pre><code>(Import-Excel .\\yearlyRetailSales.xlsx *).GetEnumerator() |\nForEach-Object { $_.Value | Export-Csv ($_.key + '.csv') }\n</code></pre>"},{"location":"#additional-resources","title":"Additional Resources","text":""},{"location":"#videos","title":"Videos","text":"<ul> <li>Export-Excel Hello World</li> <li>Make Excel Data Pop</li> <li>Slice And Dice Data</li> <li>Lightning talk - PowerShell Excel Module</li> </ul>"},{"location":"#more-videos","title":"More Videos","text":"<ul> <li>Look smarter: deliver your work in Excel - James O'Neill @jamesoneill</li> <li>Module Monday: ImportExcel - Adam Driscoll @adamdriscoll</li> <li>Tutorials Excel Module Part 1</li> <li>Tutorials Excel Module Part 2</li> <li>Tutorials Excel Module Part 3</li> <li>PowerShell Excel - Invoke-ExcelQuery</li> <li>Powershell Excel - Data Validation</li> <li>Creating Dashboards xPlatform</li> </ul>"},{"location":"#articles","title":"Articles","text":"Title Author Twitter More tricks with PowerShell and Excel James O'Neill @jamesoneill Using the Import-Excel module: Part 1 Importing James O'Neill @jamesoneill Using the Import Excel module part 2: putting data into .XLSx files James O'Neill @jamesoneill Using the import Excel Module: Part 3, Pivots and charts, data and calculations James O'Neill @jamesoneill Export AdventureWorksDW2017 to Excel for a Power BI Demo with Export-Excel Aaron Nelson @sqlvariant Creating beautiful Powershell Reports in Excel Doug Finke @dfinke PowerShell Excel and Conditional Formatting Doug Finke @dfinke Learn to Automate Excel like a Pro with PowerShell Doug Finke @dfinke"},{"location":"#contributing","title":"Contributing","text":"<p>Contributions are welcome! Open a pull request to fix a bug, or open an issue to discuss a new feature or change.</p>"},{"location":"ImportExcel/","title":"ImportExcel Module","text":""},{"location":"ImportExcel/#description","title":"Description","text":"<p>Automate Excel with PowerShell without having Excel installed. Works on Windows, Linux and Mac. Creating Tables, Pivot Tables, Charts and much more just got a lot easier.</p>"},{"location":"ImportExcel/#importexcel-cmdlets","title":"ImportExcel Cmdlets","text":""},{"location":"ImportExcel/#add-conditionalformatting","title":"Add-ConditionalFormatting","text":"<p>Adds conditional formatting to all or part of a worksheet.</p>"},{"location":"ImportExcel/#add-excelchart","title":"Add-ExcelChart","text":"<p>Creates a chart in an existing Excel worksheet.</p>"},{"location":"ImportExcel/#add-exceldatavalidationrule","title":"Add-ExcelDataValidationRule","text":"<p>Adds data validation to a range of cells</p>"},{"location":"ImportExcel/#add-excelname","title":"Add-ExcelName","text":"<p>Adds a named-range to an existing Excel worksheet.</p>"},{"location":"ImportExcel/#add-exceltable","title":"Add-ExcelTable","text":"<p>Adds Tables to Excel workbooks.</p>"},{"location":"ImportExcel/#add-pivottable","title":"Add-PivotTable","text":"<p>Adds a PivotTable (and optional PivotChart) to a workbook.</p>"},{"location":"ImportExcel/#add-worksheet","title":"Add-Worksheet","text":"<p>Adds a worksheet to an existing workbook.</p>"},{"location":"ImportExcel/#barchart","title":"BarChart","text":"<pre><code>BarChart [[-targetData] &lt;Object&gt;] [[-title] &lt;Object&gt;] [[-ChartType] &lt;eChartType&gt;] [-NoLegend] [-ShowCategory] [-ShowPercent] [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"ImportExcel/#close-excelpackage","title":"Close-ExcelPackage","text":"<p>Closes an Excel Package, saving, saving under a new name or abandoning changes and opening the file in Excel as required.</p>"},{"location":"ImportExcel/#columnchart","title":"ColumnChart","text":"<pre><code>ColumnChart [[-targetData] &lt;Object&gt;] [[-title] &lt;Object&gt;] [[-ChartType] &lt;eChartType&gt;] [-NoLegend] [-ShowCategory] [-ShowPercent] [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"ImportExcel/#compare-worksheet","title":"Compare-Worksheet","text":"<p>Compares two worksheets and shows the differences.</p>"},{"location":"ImportExcel/#convert-excelrangetoimage","title":"Convert-ExcelRangeToImage","text":"<p>Gets the specified part of an Excel file and exports it as an image</p>"},{"location":"ImportExcel/#convertfrom-exceldata","title":"ConvertFrom-ExcelData","text":"<p>{{ Fill in the Synopsis }}</p>"},{"location":"ImportExcel/#convertfrom-excelsheet","title":"ConvertFrom-ExcelSheet","text":"<p>Exports Sheets from Excel Workbooks to CSV files.</p>"},{"location":"ImportExcel/#convertfrom-exceltosqlinsert","title":"ConvertFrom-ExcelToSQLInsert","text":"<p>Generate SQL insert statements from Excel spreadsheet.</p>"},{"location":"ImportExcel/#convertto-excelxlsx","title":"ConvertTo-ExcelXlsx","text":"<p>{{ Fill in the Synopsis }}</p>"},{"location":"ImportExcel/#copy-excelworksheet","title":"Copy-ExcelWorksheet","text":"<p>Copies a worksheet between workbooks or within the same workbook.</p>"},{"location":"ImportExcel/#dochart","title":"DoChart","text":"<pre><code>DoChart [[-targetData] &lt;Object&gt;] [[-title] &lt;Object&gt;] [[-ChartType] &lt;eChartType&gt;] [-NoLegend] [-ShowCategory] [-ShowPercent]\n</code></pre>"},{"location":"ImportExcel/#enable-excelautofilter","title":"Enable-ExcelAutoFilter","text":"<p>Enable the Excel AutoFilter</p>"},{"location":"ImportExcel/#enable-excelautofit","title":"Enable-ExcelAutofit","text":"<p>Make all text fit the cells</p>"},{"location":"ImportExcel/#expand-numberformat","title":"Expand-NumberFormat","text":"<p>Converts short names for number formats to the formatting strings used in Excel</p>"},{"location":"ImportExcel/#export-excel","title":"Export-Excel","text":"<p>Exports data to an Excel worksheet.</p>"},{"location":"ImportExcel/#get-excelcolumnname","title":"Get-ExcelColumnName","text":"<p>{{ Fill in the Synopsis }}</p>"},{"location":"ImportExcel/#get-excelfileschema","title":"Get-ExcelFileSchema","text":"<p>Gets the schema of an Excel file.</p>"},{"location":"ImportExcel/#get-excelfilesummary","title":"Get-ExcelFileSummary","text":"<p>Gets summary information on an Excel file like number of rows, columns, and more</p>"},{"location":"ImportExcel/#get-excelsheetdimensionaddress","title":"Get-ExcelSheetDimensionAddress","text":"<p>Get the Excel address of the dimension of a sheet</p>"},{"location":"ImportExcel/#get-excelsheetinfo","title":"Get-ExcelSheetInfo","text":"<p>Get worksheet names and their indices of an Excel workbook.</p>"},{"location":"ImportExcel/#get-excelworkbookinfo","title":"Get-ExcelWorkbookInfo","text":"<p>Retrieve information of an Excel workbook.</p>"},{"location":"ImportExcel/#get-htmltable","title":"Get-HtmlTable","text":"<p>{{ Fill in the Synopsis }}</p>"},{"location":"ImportExcel/#get-range","title":"Get-Range","text":"<p>{{ Fill in the Synopsis }}</p>"},{"location":"ImportExcel/#get-xyrange","title":"Get-XYRange","text":"<p>{{ Fill in the Synopsis }}</p>"},{"location":"ImportExcel/#import-excel","title":"Import-Excel","text":"<pre><code>Import-Excel [-Path] &lt;string[]&gt; [[-WorksheetName] &lt;string[]&gt;] -NoHeader [-StartRow &lt;int&gt;] [-EndRow &lt;int&gt;] [-StartColumn &lt;int&gt;] [-EndColumn &lt;int&gt;] [-DataOnly] [-AsText &lt;string[]&gt;] [-AsDate &lt;string[]&gt;] [-Password &lt;string&gt;] [-ImportColumns &lt;int[]&gt;] [-Raw] [&lt;CommonParameters&gt;]\n\nImport-Excel [-Path] &lt;string[]&gt; [[-WorksheetName] &lt;string[]&gt;] -HeaderName &lt;string[]&gt; [-StartRow &lt;int&gt;] [-EndRow &lt;int&gt;] [-StartColumn &lt;int&gt;] [-EndColumn &lt;int&gt;] [-DataOnly] [-AsText &lt;string[]&gt;] [-AsDate &lt;string[]&gt;] [-Password &lt;string&gt;] [-ImportColumns &lt;int[]&gt;] [-Raw] [&lt;CommonParameters&gt;]\n\nImport-Excel [-Path] &lt;string[]&gt; [[-WorksheetName] &lt;string[]&gt;] [-StartRow &lt;int&gt;] [-EndRow &lt;int&gt;] [-StartColumn &lt;int&gt;] [-EndColumn &lt;int&gt;] [-DataOnly] [-AsText &lt;string[]&gt;] [-AsDate &lt;string[]&gt;] [-Password &lt;string&gt;] [-ImportColumns &lt;int[]&gt;] [-Raw] [&lt;CommonParameters&gt;]\n\nImport-Excel [[-WorksheetName] &lt;string[]&gt;] -ExcelPackage &lt;ExcelPackage&gt; -NoHeader [-StartRow &lt;int&gt;] [-EndRow &lt;int&gt;] [-StartColumn &lt;int&gt;] [-EndColumn &lt;int&gt;] [-DataOnly] [-AsText &lt;string[]&gt;] [-AsDate &lt;string[]&gt;] [-Password &lt;string&gt;] [-ImportColumns &lt;int[]&gt;] [-Raw] [&lt;CommonParameters&gt;]\n\nImport-Excel [[-WorksheetName] &lt;string[]&gt;] -ExcelPackage &lt;ExcelPackage&gt; -HeaderName &lt;string[]&gt; [-StartRow &lt;int&gt;] [-EndRow &lt;int&gt;] [-StartColumn &lt;int&gt;] [-EndColumn &lt;int&gt;] [-DataOnly] [-AsText &lt;string[]&gt;] [-AsDate &lt;string[]&gt;] [-Password &lt;string&gt;] [-ImportColumns &lt;int[]&gt;] [-Raw] [&lt;CommonParameters&gt;]\n\nImport-Excel [[-WorksheetName] &lt;string[]&gt;] -ExcelPackage &lt;ExcelPackage&gt; [-StartRow &lt;int&gt;] [-EndRow &lt;int&gt;] [-StartColumn &lt;int&gt;] [-EndColumn &lt;int&gt;] [-DataOnly] [-AsText &lt;string[]&gt;] [-AsDate &lt;string[]&gt;] [-Password &lt;string&gt;] [-ImportColumns &lt;int[]&gt;] [-Raw] [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"ImportExcel/#import-html","title":"Import-Html","text":"<p>{{ Fill in the Synopsis }}</p>"},{"location":"ImportExcel/#import-ups","title":"Import-UPS","text":"<p>{{ Fill in the Synopsis }}</p>"},{"location":"ImportExcel/#import-usps","title":"Import-USPS","text":"<p>{{ Fill in the Synopsis }}</p>"},{"location":"ImportExcel/#invoke-excelquery","title":"Invoke-ExcelQuery","text":"<p>Helper method for executing Read-OleDbData with some basic defaults.For additional help, see documentation for Read-OleDbData cmdlet.</p>"},{"location":"ImportExcel/#invoke-sum","title":"Invoke-Sum","text":"<p>{{ Fill in the Synopsis }}</p>"},{"location":"ImportExcel/#join-worksheet","title":"Join-Worksheet","text":"<p>Combines data on all the sheets in an Excel worksheet onto a single sheet.</p>"},{"location":"ImportExcel/#linechart","title":"LineChart","text":"<pre><code>LineChart [[-targetData] &lt;Object&gt;] [[-title] &lt;Object&gt;] [[-ChartType] &lt;eChartType&gt;] [-NoLegend] [-ShowCategory] [-ShowPercent] [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"ImportExcel/#merge-multiplesheets","title":"Merge-MultipleSheets","text":"<p>Merges Worksheets into a single Worksheet with differences marked up.</p>"},{"location":"ImportExcel/#merge-worksheet","title":"Merge-Worksheet","text":"<p>Merges two Worksheets (or other objects) into a single Worksheet with differences marked up.</p>"},{"location":"ImportExcel/#new-conditionalformattingiconset","title":"New-ConditionalFormattingIconSet","text":"<p>Creates an object which describes a conditional formatting rule a for 3,4 or 5 icon set.</p>"},{"location":"ImportExcel/#new-conditionaltext","title":"New-ConditionalText","text":"<p>Creates an object which describes a conditional formatting rule for single valued rules.</p>"},{"location":"ImportExcel/#new-excelchartdefinition","title":"New-ExcelChartDefinition","text":"<p>Creates a Definition of a chart which can be added using Export-Excel, or Add-PivotTable</p>"},{"location":"ImportExcel/#new-excelstyle","title":"New-ExcelStyle","text":"<p>{{ Fill in the Synopsis }}</p>"},{"location":"ImportExcel/#new-pivottabledefinition","title":"New-PivotTableDefinition","text":"<p>Creates PivotTable definitons for Export-Excel</p>"},{"location":"ImportExcel/#new-plot","title":"New-Plot","text":"<p>{{ Fill in the Synopsis }}</p>"},{"location":"ImportExcel/#new-psitem","title":"New-PSItem","text":"<p>{{ Fill in the Synopsis }}</p>"},{"location":"ImportExcel/#open-excelpackage","title":"Open-ExcelPackage","text":"<p>Returns an ExcelPackage object for the specified XLSX file.</p>"},{"location":"ImportExcel/#piechart","title":"PieChart","text":"<pre><code>PieChart [[-targetData] &lt;Object&gt;] [[-title] &lt;Object&gt;] [[-ChartType] &lt;eChartType&gt;] [-NoLegend] [-ShowCategory] [-ShowPercent] [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"ImportExcel/#pivot","title":"Pivot","text":"<pre><code>Pivot [[-targetData] &lt;Object&gt;] [[-PivotRows] &lt;Object&gt;] [[-PivotData] &lt;Object&gt;] [[-ChartType] &lt;eChartType&gt;] [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"ImportExcel/#read-clipboard","title":"Read-Clipboard","text":"<p>Read text from clipboard and pass to either ConvertFrom-Csv or ConvertFrom-Json.Check out the how to video</p>"},{"location":"ImportExcel/#readclipboardimpl","title":"ReadClipboardImpl","text":"<pre><code>ReadClipboardImpl [-data] &lt;string&gt; [[-Delimiter] &lt;Object&gt;] [[-Header] &lt;Object&gt;] [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"ImportExcel/#read-oledbdata","title":"Read-OleDbData","text":"<p>Read data from an OleDb source using dotnet classes. This allows for OleDb queries against excel spreadsheets. Examples will only be for querying xlsx files.For additional documentation, see Microsoft's documentation on the System.Data OleDb namespace here:System.Data.OleDb</p>"},{"location":"ImportExcel/#remove-worksheet","title":"Remove-Worksheet","text":"<p>Removes one or more worksheets from one or more workbooks</p>"},{"location":"ImportExcel/#select-worksheet","title":"Select-Worksheet","text":"<p>Sets the selected tab in an Excel workbook to be the chosen sheet and unselects all the others.</p>"},{"location":"ImportExcel/#send-sqldatatoexcel","title":"Send-SQLDataToExcel","text":"<p>Inserts a DataTable - returned by a SQL query - into an ExcelSheet</p>"},{"location":"ImportExcel/#set-cellcomment","title":"Set-CellComment","text":"<p>{{ Fill in the Synopsis }}</p>"},{"location":"ImportExcel/#set-cellstyle","title":"Set-CellStyle","text":"<p>{{ Fill in the Synopsis }}</p>"},{"location":"ImportExcel/#set-excelcolumn","title":"Set-ExcelColumn","text":"<p>Adds or modifies a column in an Excel worksheet, filling values, setting formatting and/or creating named ranges.</p>"},{"location":"ImportExcel/#set-excelrange","title":"Set-ExcelRange","text":"<p>Applies number, font, alignment and/or color formatting, values or formulas to a range of Excel cells.</p>"},{"location":"ImportExcel/#set-excelrow","title":"Set-ExcelRow","text":"<p>Fills values into a [new] row in an Excel spreadsheet, and sets row formats.</p>"},{"location":"ImportExcel/#set-worksheetprotection","title":"Set-WorksheetProtection","text":"<p>{{ Fill in the Synopsis }}</p>"},{"location":"ImportExcel/#test-boolean","title":"Test-Boolean","text":"<p>{{ Fill in the Synopsis }}</p>"},{"location":"ImportExcel/#test-date","title":"Test-Date","text":"<p>{{ Fill in the Synopsis }}</p>"},{"location":"ImportExcel/#test-integer","title":"Test-Integer","text":"<p>{{ Fill in the Synopsis }}</p>"},{"location":"ImportExcel/#test-number","title":"Test-Number","text":"<p>{{ Fill in the Synopsis }}</p>"},{"location":"ImportExcel/#test-string","title":"Test-String","text":"<p>{{ Fill in the Synopsis }}</p>"},{"location":"ImportExcel/#update-firstobjectproperties","title":"Update-FirstObjectProperties","text":"<p>Updates the first object to contain all the properties of the object with the most properties in the array.</p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#786","title":"7.8.6","text":"<ul> <li>Thank you John Boyne<ul> <li>Add missing parameter aliases to align with caller/callee</li> </ul> </li> </ul>"},{"location":"changelog/#785","title":"7.8.5","text":"<ul> <li>Added <code>Get-ExcelFileSchema</code> to get the schema of an Excel file.</li> <li>This was added to support interacting with <code>ChatGPT</code>. Passing the schema to the <code>ChatGPT</code> via <code>PowerShellAI</code> let's you ask questions about the data including generating code based on the schema.</li> </ul> <pre><code>Get-ExcelFileSchema .\\salesData.xlsx\n</code></pre> <pre><code>{\n  \"ExcelFile\": \"salesData.xlsx\",\n  \"WorksheetName\": \"Sheet1\",\n  \"Visible\": true,\n  \"Rows\": 10,\n  \"Columns\": 4,\n  \"Address\": \"A1:D10\",\n  \"Path\": \".\",\n  \"PropertyNames\": [\n    \"Region\",\n    \"State\",\n    \"Units\",\n    \"Price\"\n  ]\n}\n</code></pre>"},{"location":"changelog/#78x","title":"7.8.x","text":"<p>Thanks to Thomas Hofkens - Added <code>-NoHyperLinkConversion</code> to <code>Export-Excel</code> to no convert data to hyperlinks. #1316</p>"},{"location":"changelog/#784","title":"7.8.4","text":"<ul> <li>Add -ShowOnlyIcon to <code>New-ConditionalFormattingIconSet</code> does not show data in the cell, just the icon. Based on this discussion https://github.com/dfinke/ImportExcel/discussions/1340</li> </ul>"},{"location":"changelog/#783","title":"7.8.3","text":"<p>Thanks Thomas Hofkens</p> <ul> <li>Extended Export-Excel with parameter TableTotalSettings</li> <li>New Feature: Set-CellComment</li> <li>Fix Pester error for countries with ',' as decimal separator</li> <li>Fix Pester error for Windows PowerShell 5.1</li> </ul>"},{"location":"changelog/#782","title":"7.8.2","text":"<ul> <li>Fix docs #1254<code>Add-Worksheet</code> warning. Thank you Wilson Stewart</li> <li>Fix docs #1251<code>Add-Worksheet</code> warning. Thank you Jeremiah Adams</li> <li>Fix docs #1253 <code>ConvertFrom-ExcelToSQLInsert</code>. Thank you Wes Stahler</li> <li>Set Validate Range for rows to max rows available #1273. Thank you Stephen Brown</li> <li>Extended Get-ExcelFileSummary to include more Visible -eq $true|$false</li> </ul>"},{"location":"changelog/#781","title":"7.8.1","text":"<ul> <li>Fixed conditional formatting so it recognizes 'Top and Bottom' as a rule type. Thanks g-pearl</li> <li>Update Open-ExcelPackage.md. Thanks stahler</li> <li>Added Group Column tests </li> </ul>"},{"location":"changelog/#780","title":"7.8.0","text":"<p>Thanks James O'Neill</p> <ul> <li>Updated example Get-ModuleStats that extracts module statistics on the PowerShell Gallery.</li> <li>Added GroupNumericColumn and GroupDateColumn to New-PivotTableDefinition and Add-PivotTable.</li> </ul> GroupNumericColumn GroupDateColumn"},{"location":"changelog/#example-added","title":"Example added","text":"<p>Thank you @kkazala </p> <ul> <li>Added an example reading a sheet, extracting the <code>ConditionalFormatting</code> and generating the PowerShell statements so you can re-create them.</li> <li>Added an example showing <code>ConditionalFormatting</code> using the <code>RuleType</code> <code>Expression</code> with a formula<ul> <li>Highlight-DiffCells.ps1</li> </ul> </li> </ul>"},{"location":"changelog/#770","title":"7.7.0","text":"<ul> <li>Fix a bug with <code>-UnderLineType parameter is ignored in Set-ExcelColumn</code> #1204</li> </ul>"},{"location":"changelog/#760","title":"7.6.0","text":"<ul> <li>[Under investigation] Fix -StartRow and -StartColumn being ignored.</li> <li>James O'Neill: <ul> <li>Update Get-HtmlTable to support to use PowerHTML (maintained by Justin Grote). </li> <li>Added example to including a new function Import-ByColumn. Works like Import-Excel but with data in columns instead of the conventional rows.</li> </ul> </li> <li>Update Import-HTML with better defaults</li> <li>Fixed example <code>Get-ModuleStats.ps1</code> which reads the PowerShell Gallery page and extracts the stats table</li> </ul>"},{"location":"changelog/#v752","title":"v7.5.2","text":"<ul> <li>Changed the switch <code>-NotAsDictionary</code> to <code>-Raw</code>. Works with <code>-Worksheetname *</code> reads all the sheets in the xlsx file and returns an array.</li> </ul>"},{"location":"changelog/#v751","title":"v7.5.1","text":"<ul> <li>Fixed <code>Import-Excel</code> - Reset <code>EndRow</code> and <code>EndColumn</code> in the correct place.</li> </ul>"},{"location":"changelog/#v750","title":"v7.5.0","text":""},{"location":"changelog/#fixes","title":"Fixes","text":"<ul> <li>Importing multiple files with Import-Excel by pipeline uses only the first file for the row count https://github.com/dfinke/ImportExcel/issues/1172</li> </ul>"},{"location":"changelog/#new-features","title":"New Features","text":"<ul> <li>Import-Excel now supports importing multiple sheets. It can either return a dictionary of all sheets, or as a single array of all sheets combined.<ul> <li><code>Import-Excel $xlfile *</code>                  # reads all sheets, returns all data in a dictionary</li> <li><code>Import-Excel $xlfile * -NotAsDictionary</code> # reads all sheets, returns all data in a single array</li> </ul> </li> <li>Added helper functions. Useful for working with an Excel package via <code>Open-ExcelPackage</code> or <code>-PassThru</code> <ul> <li><code>Enable-ExcelAutoFilter</code></li> <li><code>Enable-ExcelAutofit</code></li> <li><code>Get-ExcelSheetDimensionAddress</code></li> </ul> </li> </ul>"},{"location":"changelog/#v742","title":"v7.4.2","text":"<ul> <li> <p>Thank you James Mueller Updated <code>ConvertFrom-ExcelToSQLInsert</code> to handle single quotes in the SQL statement.</p> </li> <li> <p>Thank you to Josh Hendricks</p> <ul> <li>Add images to spreadsheets. Check it out<ul> <li>Catch up with him on GitHub and Twitter for the idea</li> </ul> </li> </ul> </li> </ul>"},{"location":"changelog/#v741","title":"v7.4.1","text":"<ul> <li>Implements: https://github.com/dfinke/ImportExcel/issues/1111</li> <li>Refactored ReZip into separate function</li> <li>Deletes temp folder after rezipping</li> <li>Added -ReZip to <code>Close-ExcelPackage</code></li> </ul>"},{"location":"changelog/#v740","title":"v7.4.0","text":"<ul> <li>Thank you to Max Goczall for this contribution!<ul> <li><code>ImportColumns</code> parameter added to <code>ImportExcel</code>. It is used to define which columns of the ExcelPackage should be imported.</li> </ul> </li> </ul> <pre><code>Import-Excel -Path $xlFile -ImportColumns @(6,7,12,25,46)\n</code></pre>"},{"location":"changelog/#v731","title":"v7.3.1","text":"<ul> <li>Added query Excel spreadsheets, with SQL queries!</li> </ul> <pre><code>$query = 'select F2 as [Category], F5 as [Discount], F5*2 as [DiscountPlus] from [sheet1$A2:E11]'\n\nInvoke-ExcelQuery .\\testOleDb.xlsx $query\n</code></pre>"},{"location":"changelog/#result","title":"Result","text":"<pre><code>Category    Discount DiscountPlus\n--------    -------- ------------\nCosmetics        0.7          1.4\nGrocery          0.3          0.6\nApparels         0.2          0.4\nElectronics      0.1          0.2\nElectronics        0            0\nApparels         0.8          1.6\nElectronics      0.7          1.4\nCosmetics        0.6          1.2\nGrocery          0.4          0.8\nGrocery          0.3          0.6\n</code></pre> <ul> <li>Thank you to Roy Ashbrook for the SQL query code. Catch up with Roy:</li> </ul> Media Link twitter https://twitter.com/royashbrook github https://github.com/royashbrook linkedin https://linkedin.com/in/royashbrook blog https://ashbrook.io"},{"location":"changelog/#v730","title":"v7.3.0","text":"<ul> <li>Fix throwing error when a Worksheet name collides with a method, or property name on the <code>OfficeOpenXml.ExcelPackage</code> package</li> </ul>"},{"location":"changelog/#v723","title":"v7.2.3","text":"<ul> <li>Fix inline help, thank you Wes Stahler</li> </ul>"},{"location":"changelog/#v722","title":"v7.2.2","text":"<ul> <li>Improved checks for Linux, Mac and PS 5.1</li> </ul>"},{"location":"changelog/#v721","title":"v7.2.1","text":"<ul> <li>Improve auto-detection of data on the clipboard</li> </ul>"},{"location":"changelog/#v720","title":"v7.2.0","text":"<ul> <li>Added <code>Read-Clipboard</code> support for Windows. Read text from clipboard. It can read CSV or JSON. Plus, you can specify the delimiter and headers.</li> </ul>"},{"location":"changelog/#check-out-the-video","title":"Check out the video","text":""},{"location":"Examples/AddImage/","title":"Add-ExcelImage Example","text":"<p>Adding pictures to an Excel worksheet is possible by calling the <code>AddPicture(name, image)</code> method on the <code>Drawings</code> property of an <code>ExcelWorksheet</code> object.</p> <p>The <code>Add-ExcelImage</code> example here demonstrates how to add a picture at a given cell location, and optionally resize the row and column to fit the image.</p>"},{"location":"Examples/AddImage/#running-the-example","title":"Running the example","text":"<p>To try this example, run the script <code>AddImage.ps1</code>. The <code>Add-ExcelImage</code> function will be dot-sourced, and an Excel document will be created in the same folder with a sample data set. The Octocat image will then be embedded into Sheet1.</p> <p>The creation of the Excel document and the <code>System.Drawing.Image</code> object representing Octocat are properly disposed within a <code>finally</code> block to ensure that the resources are released, even if an error occurs in the <code>try</code> block.</p>"},{"location":"Examples/AddImage/#note-about-column-and-row-sizing","title":"Note about column and row sizing","text":"<p>Care has been taken in this example to get the image placement to be just inside the cell border, and if the <code>-ResizeCell</code> switch is present, the height and width of the row and column will be increased, if needed, so that the bottom right of the image also lands just inside the cell border.</p> <p>The Excel row and column sizes are measured in \"point\" units rather than pixels, and a fixed multiplication factor is used to convert the size of the image in pixels, to the corresponding height and width values in Excel.</p> <p>It's possible that different DPI or text scaling options could result in imperfect column and row sizing and if a better strategy is found for converting the image dimensions to column and row sizes, this example will be updated.</p>"},{"location":"FAQ/How%20to%20Create%20an%20Empty%20Excel%20File/","title":"Create an Empty Excel File","text":"<p>Use an empty string to export to an excel file. <pre><code>#Build an Excel file named: \"file.xlsx\" containing a worksheet: \"MyWorksheet\"\n\"\" | Export-Excel -Path \"C:\\Test\\file.xlsx\" -WorksheetName \"MyWorksheet\" \n</code></pre></p>"},{"location":"FAQ/How%20to%20Read%20an%20Existing%20Excel%20File/","title":"How to Read an Existing Excel File","text":""},{"location":"FAQ/How%20to%20Read%20an%20Existing%20Excel%20File/#enumerate-the-excel-file-contents","title":"Enumerate the Excel File Contents","text":"<pre><code>#Load the Excel file into a PSCustomObject\n$ExcelFile = Import-Excel \"C:\\Test\\file.xlsx\" -WorksheetName \"Sheet1\" \n</code></pre>"},{"location":"FAQ/How%20to%20Read%20an%20Existing%20Excel%20File/#visual-of-data-structure","title":"Visual of Data Structure","text":"<p>The File C:\\Test\\file.xlsx contains </p> <p>After loading this data into <code>$ExcelFile</code> the data is stored like: </p>"},{"location":"FAQ/How%20to%20Read%20an%20Existing%20Excel%20File/#other-common-operations","title":"Other Common Operations","text":""},{"location":"FAQ/How%20to%20Read%20an%20Existing%20Excel%20File/#load-a-column","title":"Load a Column","text":"<pre><code>$SpecificColumn = $ExcelFile.\"anotherHeader\" #loads column with the header \"anotherHeader\" -- data stored in an array\n</code></pre>"},{"location":"FAQ/How%20to%20Read%20an%20Existing%20Excel%20File/#load-a-row","title":"Load a Row","text":"<pre><code>$SpecificRow = $ExcelFile[1] #Loads row at index 1. Index 1 is the first row instead of 0. \n</code></pre>"},{"location":"FAQ/How%20to%20Read%20an%20Existing%20Excel%20File/#map-contents-to-hashtable-to-interpret-data","title":"Map Contents to Hashtable to Interpret Data","text":"<p>Sometimes mapping to a Hashtable is more convenient to have access to common Hashtable operations. Enumerate a Hashtable with the row's data by: <pre><code>$HashTable = @{}\n$SpecificRow= $ExcelFile[2]\n$SpecificRow.psobject.properties | ForEach-Object { \n    $HashTable[$_.Name] = $_.Value\n}\n</code></pre> To then iterate through the enumerated Hashtable: <pre><code>ForEach ($Key in ($HashTable.GetEnumerator()) | Where-Object {$_.Value -eq \"x\"}){ #Only grabs a key where the value is \"x\"\n    #values accessible with $Key.Name or $Key.Value\n}\n</code></pre></p>"},{"location":"FAQ/How%20to%20Write%20to%20an%20Existing%20Excel%20File/","title":"Write to an Existing Excel File","text":""},{"location":"FAQ/How%20to%20Write%20to%20an%20Existing%20Excel%20File/#enumerate-the-excel-file","title":"Enumerate the Excel File","text":"<p>The cmdlets <code>Open-ExcelPackage</code> and <code>Close-ExcelPackage</code> allow for direct modification to Excel file contents. <pre><code>$ExcelPkg = Open-ExcelPackage -Path  \"C:\\Test\\file.xlsx\"\n</code></pre> Contents of file.xlsx: </p>"},{"location":"FAQ/How%20to%20Write%20to%20an%20Existing%20Excel%20File/#enumerate-the-worksheet-to-view-or-modify-the-data","title":"Enumerate the Worksheet to View or Modify the Data","text":"<p><pre><code>$WorkSheet = $ExcelPkg.Workbook.Worksheets[\"sheet1\"].Cells #open excel worksheet cells from worksheet \"sheet1\"\n</code></pre> Visual of data structure:  A1 contains \"someHeader\", A2 contains \"data1\" etc.</p>"},{"location":"FAQ/How%20to%20Write%20to%20an%20Existing%20Excel%20File/#modify-a-specific-value-in-a-file","title":"Modify a Specific Value in a File","text":"<p>Values can be accessed by row, column. Similar to a 2D array. <pre><code>$WorkSheet[1,4].Value = \"New Column Header\" #Starts at index 1 not 0\n</code></pre> Contents of file.xlsx after modifying: </p>"},{"location":"FAQ/How%20to%20Write%20to%20an%20Existing%20Excel%20File/#load-value-at-specific-index","title":"Load Value at Specific Index","text":"<p><pre><code>$ValueAtIndex = $WorkSheet[2,1].Value #Loads the value at row 2, column A\n</code></pre> <code>$ValueAtIndex</code> now contains:  </p>"},{"location":"FAQ/How%20to%20Write%20to%20an%20Existing%20Excel%20File/#save-file-after-modifying","title":"Save File After Modifying","text":"<p>The changes will not display in the Excel file until Close-ExcelPackage is called. <pre><code>Close-ExcelPackage $ExcelPkg #close and save changes made to the Excel file.\n</code></pre> Note: If the file is currently in use, Close-ExcelPackage will return an error and will not save the information.</p>"},{"location":"commands/Add-ConditionalFormatting/","title":"Add-ConditionalFormatting","text":""},{"location":"commands/Add-ConditionalFormatting/#synopsis","title":"SYNOPSIS","text":"<p>Adds conditional formatting to all or part of a worksheet.</p>"},{"location":"commands/Add-ConditionalFormatting/#syntax","title":"SYNTAX","text":""},{"location":"commands/Add-ConditionalFormatting/#namedrule","title":"NamedRule","text":"<pre><code>Add-ConditionalFormatting [-Address] &lt;Object&gt; [-Worksheet &lt;ExcelWorksheet&gt;]\n [-RuleType] &lt;eExcelConditionalFormattingRuleType&gt; [-ForegroundColor &lt;Object&gt;] [-Reverse] [-ShowIconOnly]\n [[-ConditionValue] &lt;Object&gt;] [[-ConditionValue2] &lt;Object&gt;] [-BackgroundColor &lt;Object&gt;]\n [-BackgroundPattern &lt;ExcelFillStyle&gt;] [-PatternColor &lt;Object&gt;] [-NumberFormat &lt;Object&gt;] [-Bold] [-Italic]\n [-Underline] [-StrikeThru] [-StopIfTrue] [-Priority &lt;Int32&gt;] [-PassThru] [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"commands/Add-ConditionalFormatting/#databar","title":"DataBar","text":"<pre><code>Add-ConditionalFormatting [-Address] &lt;Object&gt; [-Worksheet &lt;ExcelWorksheet&gt;] -DataBarColor &lt;Object&gt;\n [-ShowIconOnly] [-Priority &lt;Int32&gt;] [-PassThru] [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"commands/Add-ConditionalFormatting/#threeiconset","title":"ThreeIconSet","text":"<pre><code>Add-ConditionalFormatting [-Address] &lt;Object&gt; [-Worksheet &lt;ExcelWorksheet&gt;]\n -ThreeIconsSet &lt;eExcelconditionalFormatting3IconsSetType&gt; [-Reverse] [-ShowIconOnly] [-Priority &lt;Int32&gt;]\n [-PassThru] [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"commands/Add-ConditionalFormatting/#fouriconset","title":"FourIconSet","text":"<pre><code>Add-ConditionalFormatting [-Address] &lt;Object&gt; [-Worksheet &lt;ExcelWorksheet&gt;]\n -FourIconsSet &lt;eExcelconditionalFormatting4IconsSetType&gt; [-Reverse] [-ShowIconOnly] [-Priority &lt;Int32&gt;]\n [-PassThru] [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"commands/Add-ConditionalFormatting/#fiveiconset","title":"FiveIconSet","text":"<pre><code>Add-ConditionalFormatting [-Address] &lt;Object&gt; [-Worksheet &lt;ExcelWorksheet&gt;]\n -FiveIconsSet &lt;eExcelconditionalFormatting5IconsSetType&gt; [-Reverse] [-ShowIconOnly] [-Priority &lt;Int32&gt;]\n [-PassThru] [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"commands/Add-ConditionalFormatting/#description","title":"DESCRIPTION","text":"<p>Conditional formatting allows Excel to:</p> <ul> <li>Mark cells with icons depending on their value</li> <li>Show a databar whose length indicates the value or a two or three color scale where the color indicates the relative value</li> <li>Change the color, font, or number format of cells which meet given criteria</li> </ul> <p>Add-ConditionalFormatting allows these parameters to be set; for fine tuning of the rules, the -PassThru switch will return the rule so that you can modify things which are specific to that type of rule, example, the values which correspond to each icon in an Icon-Set.</p>"},{"location":"commands/Add-ConditionalFormatting/#examples","title":"EXAMPLES","text":""},{"location":"commands/Add-ConditionalFormatting/#example-1","title":"EXAMPLE 1","text":"<pre><code>PS\\&gt; $excel = $avdata | Export-Excel -Path (Join-path $FilePath \"\\Machines.XLSX\" ) -WorksheetName \"Server Anti-Virus\" -AutoSize -FreezeTopRow -AutoFilter -PassThru\n     Add-ConditionalFormatting -WorkSheet $excel.Workbook.Worksheets[1] -Address \"b2:b1048576\" -ForeGroundColor \"RED\"     -RuleType ContainsText -ConditionValue \"2003\"\n     Add-ConditionalFormatting -WorkSheet $excel.Workbook.Worksheets[1] -Address \"i2:i1048576\" -ForeGroundColor \"RED\"     -RuleType ContainsText -ConditionValue \"Disabled\"\n     $excel.Workbook.Worksheets[1].Cells[\"D1:G1048576\"].Style.Numberformat.Format = [cultureinfo]::CurrentCulture.DateTimeFormat.ShortDatePattern\n     $excel.Workbook.Worksheets[1].Row(1).style.font.bold = $true\n     $excel.Save() ; $excel.Dispose()\n</code></pre> <p>Here Export-Excel is called with the -PassThru parameter, so the ExcelPackage object representing Machines.XLSX is stored in $Excel. The desired worksheet is selected, and then columns\" B\" and \"I\" are conditionally formatted (excluding the top row) to show red text if they contain \"2003\" or \"Disabled\" respectively.</p> <p>A fixed date format is then applied to columns D to G, and the top row is formatted.</p> <p>Finally the workbook is saved and the Excel package object is closed.</p>"},{"location":"commands/Add-ConditionalFormatting/#example-2","title":"EXAMPLE 2","text":"<pre><code>PS\\&gt; $r = Add-ConditionalFormatting -WorkSheet $excel.Workbook.Worksheets[1] -Range \"B1:B100\" -ThreeIconsSet Flags -Passthru\n     $r.Reverse = $true ;   $r.Icon1.Type = \"Num\"; $r.Icon2.Type = \"Num\" ; $r.Icon2.value = 100 ; $r.Icon3.type = \"Num\" ;$r.Icon3.value = 1000\n</code></pre> <p>Again Export-Excel has been called with -PassThru leaving a package object in $Excel.</p> <p>This time B1:B100 has been conditionally formatted with 3 icons, using the \"Flags\" Icon-Set.</p> <p>Add-ConditionalFormatting does not provide access to every option in the formatting rule, so -PassThru has been used and the rule is modified to apply the flags in reverse order, and transitions between flags are set to 100 and 1000.</p>"},{"location":"commands/Add-ConditionalFormatting/#example-3","title":"EXAMPLE 3","text":"<pre><code>PS\\&gt; Add-ConditionalFormatting -WorkSheet $sheet -Range \"D2:D1048576\" -DataBarColor Red\n</code></pre> <p>This time $sheet holds an ExcelWorkshseet object and databars are added to column D, excluding the top row.</p>"},{"location":"commands/Add-ConditionalFormatting/#example-4","title":"EXAMPLE 4","text":"<pre><code>PS\\&gt; Add-ConditionalFormatting -Address $worksheet.cells[\"FinishPosition\"] -RuleType Equal -ConditionValue 1 -ForeGroundColor Purple -Bold -Priority 1 -StopIfTrue\n</code></pre> <p>In this example a named range is used to select the cells where the condition should apply, and instead of specifying a sheet and range within the sheet as separate parameters, the cells where the format should apply are specified directly.</p> <p>If a cell in the \"FinishPosition\" range is 1, then the text is turned to Bold &amp; Purple.</p> <p>This rule is moved to first in the priority list, and where cells have a value of 1, no other rules will be processed.</p>"},{"location":"commands/Add-ConditionalFormatting/#example-5","title":"EXAMPLE 5","text":"<pre><code>PS\\&gt; $excel = Get-ChildItem | Select-Object -Property Name,Length,LastWriteTime,CreationTime | Export-Excel \"$env:temp\\test43.xlsx\" -PassThru -AutoSize\n     $ws = $excel.Workbook.Worksheets[\"Sheet1\"]\n     $ws.Cells[\"E1\"].Value = \"SavedAt\"\n     $ws.Cells[\"F1\"].Value = [datetime]::Now\n     $ws.Cells[\"F1\"].Style.Numberformat.Format = (Expand-NumberFormat -NumberFormat 'Date-Time')\n     $lastRow = $ws.Dimension.End.Row\n     Add-ConditionalFormatting -WorkSheet $ws -address \"A2:A$Lastrow\" -RuleType LessThan    -ConditionValue \"A\"  -ForeGroundColor Gray\n     Add-ConditionalFormatting -WorkSheet $ws -address \"B2:B$Lastrow\" -RuleType GreaterThan -ConditionValue  1000000         -NumberFormat '#,###,,.00\"M\"'\n     Add-ConditionalFormatting -WorkSheet $ws -address \"C2:C$Lastrow\" -RuleType GreaterThan -ConditionValue \"=INT($F$1-7)\"  -ForeGroundColor Green  -StopIfTrue\n     Add-ConditionalFormatting -WorkSheet $ws -address \"D2:D$Lastrow\" -RuleType Equal       -ConditionValue \"=C2\"           -ForeGroundColor Blue   -StopIfTrue\n     Close-ExcelPackage -Show $excel\n</code></pre> <p>The first few lines of code export a list of file and directory names, sizes and dates to a spreadsheet.</p> <p>It puts the date of the export in cell F1.</p> <p>The first Conditional format changes the color of files and folders that begin with a \".\", \"_\" or anything else which sorts before \"A\".</p> <p>The second Conditional format changes the Number format of numbers bigger than 1 million, for example 1,234,567,890 will dispay as \"1,234.57M\"</p> <p>The third highlights datestamps of files less than a week old when the export was run; the = is necessary in the condition value otherwise the rule will look for the the text INT($F$1-7), and the cell address for the date is fixed using the standard Excel $ notation.</p> <p>The final Conditional format looks for files which have not changed since they were created. Here the condition value is \"=C2\". The = sign means C2 is treated as a formula, not literal text. Unlike the file age, we want the cell used to change for each cell where the conditional format applies.</p> <p>The first cell in the conditional format range is D2, which is compared against C2, then D3 is compared against C3 and so on. A common mistake is to include the title row in the range and accidentally apply conditional formatting to it, or to begin the range at row 2 but use row 1 as the starting point for comparisons.</p>"},{"location":"commands/Add-ConditionalFormatting/#example-6","title":"EXAMPLE 6","text":"<pre><code>PS\\&gt; Add-ConditionalFormatting  $ws.Cells[\"B:B\"] GreaterThan 10000000 -Fore  Red -Stop -Pri 1\n</code></pre> <p>This version shows the shortest syntax - the Address, Ruletype, and Conditionvalue can be identified from their position, and ForegroundColor, StopIfTrue and Priority can all be shortend.</p>"},{"location":"commands/Add-ConditionalFormatting/#parameters","title":"PARAMETERS","text":""},{"location":"commands/Add-ConditionalFormatting/#-address","title":"-Address","text":"<p>A block of cells to format - you can use a named range with -Address $ws.names[1] or $ws.cells[\"RangeName\"]</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases: Range\n\nRequired: True\nPosition: 0\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-ConditionalFormatting/#-backgroundcolor","title":"-BackgroundColor","text":"<p>Background color for matching items</p> <pre><code>Type: Object\nParameter Sets: NamedRule\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-ConditionalFormatting/#-backgroundpattern","title":"-BackgroundPattern","text":"<p>Background pattern for matching items</p> <pre><code>Type: ExcelFillStyle\nParameter Sets: NamedRule\nAliases:\nAccepted values: None, Solid, DarkGray, MediumGray, LightGray, Gray125, Gray0625, DarkVertical, DarkHorizontal, DarkDown, DarkUp, DarkGrid, DarkTrellis, LightVertical, LightHorizontal, LightDown, LightUp, LightGrid, LightTrellis\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-ConditionalFormatting/#-bold","title":"-Bold","text":"<p>Put matching items in bold face</p> <pre><code>Type: SwitchParameter\nParameter Sets: NamedRule\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-ConditionalFormatting/#-conditionvalue","title":"-ConditionValue","text":"<p>A value for the condition (for example 2000 if the test is 'lessthan 2000'; Formulas should begin with \"=\" )</p> <pre><code>Type: Object\nParameter Sets: NamedRule\nAliases:\n\nRequired: False\nPosition: 2\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-ConditionalFormatting/#-conditionvalue2","title":"-ConditionValue2","text":"<p>A second value for the conditions like \"Between X and Y\"</p> <pre><code>Type: Object\nParameter Sets: NamedRule\nAliases:\n\nRequired: False\nPosition: 3\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-ConditionalFormatting/#-databarcolor","title":"-DataBarColor","text":"<p>Color for databar type charts</p> <pre><code>Type: Object\nParameter Sets: DataBar\nAliases: DataBarColour\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-ConditionalFormatting/#-fiveiconsset","title":"-FiveIconsSet","text":"<p>A five-icon set name</p> <pre><code>Type: eExcelconditionalFormatting5IconsSetType\nParameter Sets: FiveIconSet\nAliases:\nAccepted values: Arrows, ArrowsGray, Quarters, Rating\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-ConditionalFormatting/#-foregroundcolor","title":"-ForegroundColor","text":"<p>Text color for matching objects</p> <pre><code>Type: Object\nParameter Sets: NamedRule\nAliases: ForegroundColour, FontColor\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-ConditionalFormatting/#-fouriconsset","title":"-FourIconsSet","text":"<p>A four-icon set name</p> <pre><code>Type: eExcelconditionalFormatting4IconsSetType\nParameter Sets: FourIconSet\nAliases:\nAccepted values: Arrows, ArrowsGray, Rating, RedToBlack, TrafficLights\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-ConditionalFormatting/#-italic","title":"-Italic","text":"<p>Put matching items in italic</p> <pre><code>Type: SwitchParameter\nParameter Sets: NamedRule\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-ConditionalFormatting/#-numberformat","title":"-NumberFormat","text":"<p>Sets the numeric format for matching items</p> <pre><code>Type: Object\nParameter Sets: NamedRule\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-ConditionalFormatting/#-passthru","title":"-PassThru","text":"<p>If specified pass the rule back to the caller to allow additional customization.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-ConditionalFormatting/#-patterncolor","title":"-PatternColor","text":"<p>Secondary color when a background pattern requires it</p> <pre><code>Type: Object\nParameter Sets: NamedRule\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-ConditionalFormatting/#-priority","title":"-Priority","text":"<p>Set the sequence for rule processing</p> <pre><code>Type: Int32\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: 0\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-ConditionalFormatting/#-reverse","title":"-Reverse","text":"<p>Use the Icon-Set in reverse order, or reverse the orders of Two- &amp; Three-Color Scales</p> <pre><code>Type: SwitchParameter\nParameter Sets: NamedRule, ThreeIconSet, FourIconSet, FiveIconSet\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-ConditionalFormatting/#-ruletype","title":"-RuleType","text":"<p>A standard named-rule - Top / Bottom / Less than / Greater than / Contains etc.</p> <pre><code>Type: eExcelConditionalFormattingRuleType\nParameter Sets: NamedRule\nAliases:\nAccepted values: AboveAverage, AboveOrEqualAverage, BelowAverage, BelowOrEqualAverage, AboveStdDev, BelowStdDev, Bottom, BottomPercent, Top, TopPercent, Last7Days, LastMonth, LastWeek, NextMonth, NextWeek, ThisMonth, ThisWeek, Today, Tomorrow, Yesterday, BeginsWith, Between, ContainsBlanks, ContainsErrors, ContainsText, DuplicateValues, EndsWith, Equal, Expression, GreaterThan, GreaterThanOrEqual, LessThan, LessThanOrEqual, NotBetween, NotContains, NotContainsBlanks, NotContainsErrors, NotContainsText, NotEqual, UniqueValues, ThreeColorScale, TwoColorScale, ThreeIconSet, FourIconSet, FiveIconSet, DataBar\n\nRequired: True\nPosition: 1\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-ConditionalFormatting/#-showicononly","title":"-ShowIconOnly","text":"<p>{{ Fill ShowIconOnly Description }}</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-ConditionalFormatting/#-stopiftrue","title":"-StopIfTrue","text":"<p>Prevent the processing of subsequent rules</p> <pre><code>Type: SwitchParameter\nParameter Sets: NamedRule\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-ConditionalFormatting/#-strikethru","title":"-StrikeThru","text":"<p>Strikethrough text of matching items</p> <pre><code>Type: SwitchParameter\nParameter Sets: NamedRule\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-ConditionalFormatting/#-threeiconsset","title":"-ThreeIconsSet","text":"<p>One of the three-icon set types (e.g. Traffic Lights)</p> <pre><code>Type: eExcelconditionalFormatting3IconsSetType\nParameter Sets: ThreeIconSet\nAliases:\nAccepted values: Arrows, ArrowsGray, Flags, Signs, Symbols, Symbols2, TrafficLights1, TrafficLights2\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-ConditionalFormatting/#-underline","title":"-Underline","text":"<p>Underline matching items</p> <pre><code>Type: SwitchParameter\nParameter Sets: NamedRule\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-ConditionalFormatting/#-worksheet","title":"-Worksheet","text":"<p>The worksheet where the format is to be applied</p> <pre><code>Type: ExcelWorksheet\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-ConditionalFormatting/#commonparameters","title":"CommonParameters","text":"<p>This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters.</p>"},{"location":"commands/Add-ConditionalFormatting/#inputs","title":"INPUTS","text":""},{"location":"commands/Add-ConditionalFormatting/#outputs","title":"OUTPUTS","text":""},{"location":"commands/Add-ConditionalFormatting/#notes","title":"NOTES","text":""},{"location":"commands/Add-ConditionalFormatting/#related-links","title":"RELATED LINKS","text":""},{"location":"commands/Add-ExcelChart/","title":"Add-ExcelChart","text":""},{"location":"commands/Add-ExcelChart/#synopsis","title":"SYNOPSIS","text":"<p>Creates a chart in an existing Excel worksheet.</p>"},{"location":"commands/Add-ExcelChart/#syntax","title":"SYNTAX","text":""},{"location":"commands/Add-ExcelChart/#worksheet-default","title":"Worksheet (Default)","text":"<pre><code>Add-ExcelChart -Worksheet &lt;ExcelWorksheet&gt; [-Title &lt;String&gt;] [-ChartType &lt;eChartType&gt;]\n [-ChartTrendLine &lt;eTrendLine[]&gt;] [-XRange &lt;Object&gt;] [-YRange &lt;Object&gt;] [-Width &lt;Int32&gt;] [-Height &lt;Int32&gt;]\n [-Row &lt;Int32&gt;] [-RowOffSetPixels &lt;Int32&gt;] [-Column &lt;Int32&gt;] [-ColumnOffSetPixels &lt;Int32&gt;]\n [-LegendPosition &lt;eLegendPosition&gt;] [-LegendSize &lt;Object&gt;] [-LegendBold] [-NoLegend] [-ShowCategory]\n [-ShowPercent] [-SeriesHeader &lt;String[]&gt;] [-TitleBold] [-TitleSize &lt;Int32&gt;] [-XAxisTitleText &lt;String&gt;]\n [-XAxisTitleBold] [-XAxisTitleSize &lt;Object&gt;] [-XAxisNumberformat &lt;String&gt;] [-XMajorUnit &lt;Object&gt;]\n [-XMinorUnit &lt;Object&gt;] [-XMaxValue &lt;Object&gt;] [-XMinValue &lt;Object&gt;] [-XAxisPosition &lt;eAxisPosition&gt;]\n [-YAxisTitleText &lt;String&gt;] [-YAxisTitleBold] [-YAxisTitleSize &lt;Object&gt;] [-YAxisNumberformat &lt;String&gt;]\n [-YMajorUnit &lt;Object&gt;] [-YMinorUnit &lt;Object&gt;] [-YMaxValue &lt;Object&gt;] [-YMinValue &lt;Object&gt;]\n [-YAxisPosition &lt;eAxisPosition&gt;] [-PassThru] [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"commands/Add-ExcelChart/#pivottable","title":"PivotTable","text":"<pre><code>Add-ExcelChart -PivotTable &lt;ExcelPivotTable&gt; [-Title &lt;String&gt;] [-ChartType &lt;eChartType&gt;]\n [-ChartTrendLine &lt;eTrendLine[]&gt;] [-XRange &lt;Object&gt;] [-YRange &lt;Object&gt;] [-Width &lt;Int32&gt;] [-Height &lt;Int32&gt;]\n [-Row &lt;Int32&gt;] [-RowOffSetPixels &lt;Int32&gt;] [-Column &lt;Int32&gt;] [-ColumnOffSetPixels &lt;Int32&gt;]\n [-LegendPosition &lt;eLegendPosition&gt;] [-LegendSize &lt;Object&gt;] [-LegendBold] [-NoLegend] [-ShowCategory]\n [-ShowPercent] [-SeriesHeader &lt;String[]&gt;] [-TitleBold] [-TitleSize &lt;Int32&gt;] [-XAxisTitleText &lt;String&gt;]\n [-XAxisTitleBold] [-XAxisTitleSize &lt;Object&gt;] [-XAxisNumberformat &lt;String&gt;] [-XMajorUnit &lt;Object&gt;]\n [-XMinorUnit &lt;Object&gt;] [-XMaxValue &lt;Object&gt;] [-XMinValue &lt;Object&gt;] [-XAxisPosition &lt;eAxisPosition&gt;]\n [-YAxisTitleText &lt;String&gt;] [-YAxisTitleBold] [-YAxisTitleSize &lt;Object&gt;] [-YAxisNumberformat &lt;String&gt;]\n [-YMajorUnit &lt;Object&gt;] [-YMinorUnit &lt;Object&gt;] [-YMaxValue &lt;Object&gt;] [-YMinValue &lt;Object&gt;]\n [-YAxisPosition &lt;eAxisPosition&gt;] [-PassThru] [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"commands/Add-ExcelChart/#description","title":"DESCRIPTION","text":"<p>Creates a chart.</p> <p>It is possible to configure the type of chart, the range of X values (labels) and Y values, the title, the legend, the ranges for both axes, the format and position of the axes.</p> <p>Normally the command does not return anything, but if -passthru is specified the chart is returned so that it can be customized.</p>"},{"location":"commands/Add-ExcelChart/#examples","title":"EXAMPLES","text":""},{"location":"commands/Add-ExcelChart/#example-1","title":"EXAMPLE 1","text":"<pre><code>PS\\&gt; $Excel = ConvertFrom-Csv    @\"\n    Product, City,    Sales\n    Apple,   London,    300\n    Orange,  London,    400\n    Banana,  London,    300\n    Orange,  Paris,     600\n    Banana,  Paris,     300\n    Apple,   New York, 1200\n\"@  | Export-Excel  -Path test.xlsx -PassThru\n    Add-ExcelChart -Worksheet $Excel.Workbook.Worksheets[1] -ChartType \"Doughnut\" -XRange \"A2:B7\"  -YRange \"C2:C7\" -width 500\n    Close-ExcelPackage -Show $Excel\n</code></pre> <p>The first command expands a multi-line string into 6 rows of data which is exported to new Excel file; leaving an ExcelPackage object in $excel The second command adds a chart - the cell ranges are explicitly specified.</p> <p>Note that the XRange (labels) is TWO columns wide and the chart will combine the name of the product and the name of the City to create the label.</p> <p>The width of the chart is set explictly, the default legend is used and there is no Chart title.</p>"},{"location":"commands/Add-ExcelChart/#example-2","title":"EXAMPLE 2","text":"<pre><code>PS\\&gt; $Excel = Invoke-Sum (Get-Process) Company Handles, PM, VirtualMemorySize | Export-Excel $path  -AutoSize -ExcelChartDefinition $c -AutoNameRange -PassThru\n     Add-ExcelChart -Worksheet $Excel.Workbook.Worksheets[1] -Title \"VM use\" -ChartType PieExploded3D   -XRange \"Name\" -YRange \"VirtualMemorySize\" -NoLegend -ShowCategory\n     Close-ExcelPackage $Excel -Show\n</code></pre> <p>The first line exports information and creates named ranges for each column.</p> <p>The Second line uses the ranges to specify a chart - the labels come from the range \"Name\" and the data from the range \"VirtualMemorySize\"</p> <p>The chart is specified as a 3D exploded PIE chart, with a title of \"VM Use\" and instead of a legend the the pie slices are identified with a label.</p>"},{"location":"commands/Add-ExcelChart/#example-3","title":"EXAMPLE 3","text":"<pre><code>PS\\&gt; $Excel = Invoke-Sum (Get-Process) Company Handles, PM, VirtualMemorySize | Export-Excel test.xlsx  -TableName Processes -PassThru\n      Add-ExcelChart -Worksheet $Excel.Workbook.Worksheets[1] -Title Stats -ChartType LineMarkersStacked   -XRange \"Processes[Name]\" -YRange \"Processes[PM]\", \"Processes[VirtualMemorySize]\" -SeriesHeader 'PM', 'VMSize'\n      Close-ExcelPackage $Excel -Show\n</code></pre> <p>The first line exports information to a table in new file; and captures the excel Package object in $Excel</p> <p>The second line creates a chart on the first page of the work sheet, using the notation \"TableName[ColumnName]\" to refer to the data, the labels come Name column in the table, and the data series from its PM and VirtualMemorySize columns. The display names for these in the header are set to 'PM' and 'VMSize'.</p>"},{"location":"commands/Add-ExcelChart/#example-4","title":"EXAMPLE 4","text":"<pre><code>PS\\&gt; $excel = 0..360 | ForEach-Object {[pscustomobject][ordered]@{x = $_; Sinx = \"=Sin(Radians(x)) \"}} | Export-Excel -AutoNameRange -Path Text.xlsx -WorkSheetname SinX -PassThru\nAdd-ExcelChart -Worksheet $excel.Workbook.Worksheets[\"Sinx\"] -ChartType line -XRange \"X\" -YRange \"Sinx\"  -Title \"Graph of Sine X\" -TitleBold -TitleSize 14 \\`\n               -Column 2 -ColumnOffSetPixels 35 -Width 800 -XAxisTitleText \"Degrees\" -XAxisTitleBold -XAxisTitleSize 12 -XMajorUnit 30 -XMinorUnit 10 -XMinValue 0 -XMaxValue 361  -XAxisNumberformat \"000\" \\`\n               -YMinValue -1.25 -YMaxValue 1.25 -YMajorUnit 0.25 -YAxisNumberformat \"0.00\" -YAxisTitleText \"Sine\" -YAxisTitleBold -YAxisTitleSize 12 \\`\n               -SeriesHeader \"Sin(x)\" -LegendSize 8 -legendBold  -LegendPosition Bottom\nClose-ExcelPackage $Excel -Show\n</code></pre> <p>The first line puts numbers from 0 to 360 into a sheet, as the first column, and a formula to calculate the Sine of that number of number of degrees in the second column. It creates named-ranges for the two columns - \"X\" and \"SinX\" respectively</p> <p>The Add-ExcelChart command adds a chart to that worksheet, specifying a line chart with the X values coming from named-range \"X\" and the Y values coming from named-range \"SinX\". The chart has a title, and is positioned to the right of column 2 and sized 800 pixels wide</p> <p>The X-axis is labelled \"Degrees\", in bold 12 point type and runs from 0 to 361 with labels every 30, and minor tick marks every 10. Degrees are shown padded to 3 digits.</p> <p>The Y-axis is labelled \"Sine\" and to allow some room above and below its scale runs from -1.25 to 1.25, and is marked off in units of 0.25 shown to two decimal places.</p> <p>The key will for the chart will be at the bottom in 8 point bold type and the line will be named \"Sin(x)\".</p>"},{"location":"commands/Add-ExcelChart/#parameters","title":"PARAMETERS","text":""},{"location":"commands/Add-ExcelChart/#-charttrendline","title":"-ChartTrendLine","text":"<pre><code>Type: eTrendLine[]\nParameter Sets: (All)\nAliases:\nAccepted values: Exponential, Linear, Logarithmic, MovingAvgerage, Polynomial, Power\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-ExcelChart/#-charttype","title":"-ChartType","text":"<p>One of the built-in chart types, such as Pie, ClusteredColumn, Line etc. Defaults to \"ColumnStacked\".</p> <pre><code>Type: eChartType\nParameter Sets: (All)\nAliases:\nAccepted values: Area, Line, Pie, Bubble, ColumnClustered, ColumnStacked, ColumnStacked100, ColumnClustered3D, ColumnStacked3D, ColumnStacked1003D, BarClustered, BarStacked, BarStacked100, BarClustered3D, BarStacked3D, BarStacked1003D, LineStacked, LineStacked100, LineMarkers, LineMarkersStacked, LineMarkersStacked100, PieOfPie, PieExploded, PieExploded3D, BarOfPie, XYScatterSmooth, XYScatterSmoothNoMarkers, XYScatterLines, XYScatterLinesNoMarkers, AreaStacked, AreaStacked100, AreaStacked3D, AreaStacked1003D, DoughnutExploded, RadarMarkers, RadarFilled, Surface, SurfaceWireframe, SurfaceTopView, SurfaceTopViewWireframe, Bubble3DEffect, StockHLC, StockOHLC, StockVHLC, StockVOHLC, CylinderColClustered, CylinderColStacked, CylinderColStacked100, CylinderBarClustered, CylinderBarStacked, CylinderBarStacked100, CylinderCol, ConeColClustered, ConeColStacked, ConeColStacked100, ConeBarClustered, ConeBarStacked, ConeBarStacked100, ConeCol, PyramidColClustered, PyramidColStacked, PyramidColStacked100, PyramidBarClustered, PyramidBarStacked, PyramidBarStacked100, PyramidCol, XYScatter, Radar, Doughnut, Pie3D, Line3D, Column3D, Area3D\n\nRequired: False\nPosition: Named\nDefault value: ColumnStacked\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-ExcelChart/#-column","title":"-Column","text":"<p>Column position of the top left corner of the chart; 0 places at the edge of the sheet 1 to the right of column A and so on.</p> <pre><code>Type: Int32\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: 6\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-ExcelChart/#-columnoffsetpixels","title":"-ColumnOffSetPixels","text":"<p>Offset to position the chart by a fraction of a column.</p> <pre><code>Type: Int32\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: 5\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-ExcelChart/#-height","title":"-Height","text":"<p>Height of the chart in Pixels; defaults to 350.</p> <pre><code>Type: Int32\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: 350\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-ExcelChart/#-legendbold","title":"-LegendBold","text":"<p>Sets the key in bold type.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-ExcelChart/#-legendposition","title":"-LegendPosition","text":"<p>Location of the key, either left, right, top, bottom or TopRight.</p> <pre><code>Type: eLegendPosition\nParameter Sets: (All)\nAliases:\nAccepted values: Top, Left, Right, Bottom, TopRight\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-ExcelChart/#-legendsize","title":"-LegendSize","text":"<p>Font size for the key.</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-ExcelChart/#-nolegend","title":"-NoLegend","text":"<p>If specified, turns of display of the key. If you only have one data series it may be preferable to use the title to say what the chart is.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-ExcelChart/#-passthru","title":"-PassThru","text":"<p>Add-Excel chart doesn't normally return anything, but if -PassThru is specified it returns the newly created chart to allow it to be fine tuned.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-ExcelChart/#-pivottable","title":"-PivotTable","text":"<p>Instead of specify X and Y ranges, get data from a PivotTable by passing a PivotTable Object.</p> <pre><code>Type: ExcelPivotTable\nParameter Sets: PivotTable\nAliases:\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-ExcelChart/#-row","title":"-Row","text":"<p>Row position of the top left corner of the chart. ) places at the top of the sheet, 1 below row 1 and so on.</p> <pre><code>Type: Int32\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: 0\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-ExcelChart/#-rowoffsetpixels","title":"-RowOffSetPixels","text":"<p>Offset to position the chart by a fraction of a row.</p> <pre><code>Type: Int32\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: 10\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-ExcelChart/#-seriesheader","title":"-SeriesHeader","text":"<p>Specify explicit name(s) for the data series, which will appear in the legend/key. The contents of a cell can be specified in the from =Sheet9!Z10 .</p> <pre><code>Type: String[]\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-ExcelChart/#-showcategory","title":"-ShowCategory","text":"<p>Attaches a category label, in charts which support this.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-ExcelChart/#-showpercent","title":"-ShowPercent","text":"<p>Attaches a percentage label, in charts which support this.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-ExcelChart/#-title","title":"-Title","text":"<p>The title for the chart.</p> <pre><code>Type: String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-ExcelChart/#-titlebold","title":"-TitleBold","text":"<p>Sets the title in bold face.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-ExcelChart/#-titlesize","title":"-TitleSize","text":"<p>Sets the point size for the title.</p> <pre><code>Type: Int32\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: 0\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-ExcelChart/#-width","title":"-Width","text":"<p>Width of the chart in Pixels; defaults to 500.</p> <pre><code>Type: Int32\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: 500\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-ExcelChart/#-worksheet","title":"-Worksheet","text":"<p>An existing Sheet where the chart will be created.</p> <pre><code>Type: ExcelWorksheet\nParameter Sets: Worksheet\nAliases:\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-ExcelChart/#-xaxisnumberformat","title":"-XAxisNumberformat","text":"<p>A number formatting string, like \"#,##0.00\", for numbers along the X-axis.</p> <pre><code>Type: String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-ExcelChart/#-xaxisposition","title":"-XAxisPosition","text":"<p>Position for the X-axis (Top or Bottom).</p> <pre><code>Type: eAxisPosition\nParameter Sets: (All)\nAliases:\nAccepted values: Left, Bottom, Right, Top\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-ExcelChart/#-xaxistitlebold","title":"-XAxisTitleBold","text":"<p>Sets the X-axis title in bold face.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-ExcelChart/#-xaxistitlesize","title":"-XAxisTitleSize","text":"<p>Sets the font size for the axis title.</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-ExcelChart/#-xaxistitletext","title":"-XAxisTitleText","text":"<p>Specifies a title for the X-axis.</p> <pre><code>Type: String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-ExcelChart/#-xmajorunit","title":"-XMajorUnit","text":"<p>Spacing for the major gridlines / tick marks along the X-axis.</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-ExcelChart/#-xmaxvalue","title":"-XMaxValue","text":"<p>Maximum value for the scale along the X-axis.</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-ExcelChart/#-xminorunit","title":"-XMinorUnit","text":"<p>Spacing for the minor gridlines / tick marks along the X-axis.</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-ExcelChart/#-xminvalue","title":"-XMinValue","text":"<p>Minimum value for the scale along the X-axis.</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-ExcelChart/#-xrange","title":"-XRange","text":"<p>The range of cells containing values for the X-Axis - usually labels.</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-ExcelChart/#-yaxisnumberformat","title":"-YAxisNumberformat","text":"<p>A number formatting string, like \"#,##0.00\", for numbers on the Y-axis.</p> <pre><code>Type: String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-ExcelChart/#-yaxisposition","title":"-YAxisPosition","text":"<p>Position for the Y-axis (Left or Right).</p> <pre><code>Type: eAxisPosition\nParameter Sets: (All)\nAliases:\nAccepted values: Left, Bottom, Right, Top\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-ExcelChart/#-yaxistitlebold","title":"-YAxisTitleBold","text":"<p>Sets the Y-axis title in bold face.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-ExcelChart/#-yaxistitlesize","title":"-YAxisTitleSize","text":"<p>Sets the font size for the Y-axis title</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-ExcelChart/#-yaxistitletext","title":"-YAxisTitleText","text":"<p>Specifies a title for the Y-axis.</p> <pre><code>Type: String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-ExcelChart/#-ymajorunit","title":"-YMajorUnit","text":"<p>Spacing for the major gridlines / tick marks on the Y-axis.</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-ExcelChart/#-ymaxvalue","title":"-YMaxValue","text":"<p>Maximum value on the Y-axis.</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-ExcelChart/#-yminorunit","title":"-YMinorUnit","text":"<p>Spacing for the minor gridlines / tick marks on the Y-axis.</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-ExcelChart/#-yminvalue","title":"-YMinValue","text":"<p>Minimum value on the Y-axis.</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-ExcelChart/#-yrange","title":"-YRange","text":"<p>The range(s) of cells holding values for the Y-Axis - usually \"data\".</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-ExcelChart/#commonparameters","title":"CommonParameters","text":"<p>This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters.</p>"},{"location":"commands/Add-ExcelChart/#inputs","title":"INPUTS","text":""},{"location":"commands/Add-ExcelChart/#outputs","title":"OUTPUTS","text":""},{"location":"commands/Add-ExcelChart/#officeopenxmldrawingchartexcelchart","title":"OfficeOpenXml.Drawing.Chart.ExcelChart","text":""},{"location":"commands/Add-ExcelChart/#notes","title":"NOTES","text":""},{"location":"commands/Add-ExcelChart/#related-links","title":"RELATED LINKS","text":""},{"location":"commands/Add-ExcelDataValidationRule/","title":"Add-ExcelDataValidationRule","text":""},{"location":"commands/Add-ExcelDataValidationRule/#synopsis","title":"SYNOPSIS","text":"<p>Adds data validation to a range of cells</p>"},{"location":"commands/Add-ExcelDataValidationRule/#syntax","title":"SYNTAX","text":"<pre><code>Add-ExcelDataValidationRule [[-Range] &lt;Object&gt;] [-Worksheet &lt;ExcelWorksheet&gt;] [-ValidationType &lt;Object&gt;]\n [-Operator &lt;ExcelDataValidationOperator&gt;] [-Value &lt;Object&gt;] [-Value2 &lt;Object&gt;] [-Formula &lt;Object&gt;]\n [-Formula2 &lt;Object&gt;] [-ValueSet &lt;Object&gt;] [-ShowErrorMessage] [-ErrorStyle &lt;ExcelDataValidationWarningStyle&gt;]\n [-ErrorTitle &lt;String&gt;] [-ErrorBody &lt;String&gt;] [-ShowPromptMessage] [-PromptBody &lt;String&gt;]\n [-PromptTitle &lt;String&gt;] [-NoBlank &lt;String&gt;] [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"commands/Add-ExcelDataValidationRule/#description","title":"DESCRIPTION","text":"<p>Excel supports the validation of user input, and ranges of cells can be marked to only contain numbers, or date, or Text up to a particular length, or selections from a list. This command adds validation rules to a worksheet.</p>"},{"location":"commands/Add-ExcelDataValidationRule/#examples","title":"EXAMPLES","text":""},{"location":"commands/Add-ExcelDataValidationRule/#example-1","title":"EXAMPLE 1","text":"<pre><code>PS\\&gt;Add-ExcelDataValidationRule -WorkSheet $PlanSheet -Range 'E2:E1001' -ValidationType Integer -Operator between -Value 0 -Value2 100 \\`\n     -ShowErrorMessage -ErrorStyle stop -ErrorTitle 'Invalid Data' -ErrorBody 'Percentage must be a whole number between 0 and 100'\n</code></pre> <p>This defines a validation rule on cells E2-E1001; it is an integer rule and requires a number between 0 and 100. If a value is input with a fraction, negative number, or positive number &gt; 100 a stop dialog box appears.</p>"},{"location":"commands/Add-ExcelDataValidationRule/#example-2","title":"EXAMPLE 2","text":"<pre><code>PS\\&gt;Add-ExcelDataValidationRule -WorkSheet $PlanSheet -Range 'B2:B1001' -ValidationType List  -Formula 'values!$a$2:$a$1000'\n       -ShowErrorMessage -ErrorStyle stop -ErrorTitle 'Invalid Data' -ErrorBody 'You must select an item from the list'\n</code></pre> <p>This defines a list rule on Cells B2:1001, and the posible values are in a sheet named \"values\" at cells A2 to A1000 Blank cells in this range are ignored.</p> <p>If $ signs were left out of the fomrmula B2 would be checked against A2-A1000, B3, against A3-A1001, B4 against A4-A1002 up to B1001 beng checked against A1001-A1999</p>"},{"location":"commands/Add-ExcelDataValidationRule/#example-3","title":"EXAMPLE 3","text":"<pre><code>PS\\&gt;Add-ExcelDataValidationRule -WorkSheet $PlanSheet -Range 'I2:N1001' -ValidationType List    -ValueSet @('yes','YES','Yes')\n        -ShowErrorMessage -ErrorStyle stop -ErrorTitle 'Invalid Data' -ErrorBody \"Select Yes or leave blank for no\"\n</code></pre> <p>Similar to the previous example but this time provides a value set; Excel comparisons are case sesnsitive, hence 3 versions of Yes.</p>"},{"location":"commands/Add-ExcelDataValidationRule/#parameters","title":"PARAMETERS","text":""},{"location":"commands/Add-ExcelDataValidationRule/#-errorbody","title":"-ErrorBody","text":"<p>The error message corresponding to to the Error message setting in the Excel dialog</p> <pre><code>Type: String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-ExcelDataValidationRule/#-errorstyle","title":"-ErrorStyle","text":"<p>Stop, Warning, or Infomation, corresponding to to the style setting in the Excel dialog</p> <pre><code>Type: ExcelDataValidationWarningStyle\nParameter Sets: (All)\nAliases:\nAccepted values: undefined, stop, warning, information\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-ExcelDataValidationRule/#-errortitle","title":"-ErrorTitle","text":"<p>The title for the message box corresponding to to the title setting in the Excel dialog</p> <pre><code>Type: String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-ExcelDataValidationRule/#-formula","title":"-Formula","text":"<p>The [first] data value as a formula. Use absolute formulas $A$1 if (e.g.) you want all cells to check against the same list</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-ExcelDataValidationRule/#-formula2","title":"-Formula2","text":"<p>When using the between operator, the second data value as a formula</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-ExcelDataValidationRule/#-noblank","title":"-NoBlank","text":"<p>By default the 'Ignore blank' option will be selected, unless NoBlank is sepcified.</p> <pre><code>Type: String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-ExcelDataValidationRule/#-operator","title":"-Operator","text":"<p>The operator to apply to Decimal, Integer, TextLength, DateTime and time fields, for example \"equal\" or \"between\"</p> <pre><code>Type: ExcelDataValidationOperator\nParameter Sets: (All)\nAliases:\nAccepted values: between, notBetween, equal, notEqual, lessThan, lessThanOrEqual, greaterThan, greaterThanOrEqual\n\nRequired: False\nPosition: Named\nDefault value: Equal\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-ExcelDataValidationRule/#-promptbody","title":"-PromptBody","text":"<p>The prompt message corresponding to to the Input message setting in the Excel dialog</p> <pre><code>Type: String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-ExcelDataValidationRule/#-prompttitle","title":"-PromptTitle","text":"<p>The title for the message box corresponding to to the title setting in the Excel dialog</p> <pre><code>Type: String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-ExcelDataValidationRule/#-range","title":"-Range","text":"<p>The range of cells to be validate, for example, \"B2:C100\"</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases: Address\n\nRequired: False\nPosition: 0\nDefault value: None\nAccept pipeline input: True (ByValue)\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-ExcelDataValidationRule/#-showerrormessage","title":"-ShowErrorMessage","text":"<p>Corresponds to the the 'Show Error alert ...' check box on error alert page in the Excel dialog</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-ExcelDataValidationRule/#-showpromptmessage","title":"-ShowPromptMessage","text":"<p>Corresponds to the the 'Show Input message ...' check box on input message page in the Excel dialog</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-ExcelDataValidationRule/#-validationtype","title":"-ValidationType","text":"<p>An option corresponding to a choice from the 'Allow' pull down on the settings page in the Excel dialog. \"Any\" means \"any allowed\" - in other words, no Validation</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\nAccepted values: Any, Custom, DateTime, Decimal, Integer, List, TextLength, Time\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-ExcelDataValidationRule/#-value","title":"-Value","text":"<p>For Decimal, Integer, TextLength, DateTime the [first] data value</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-ExcelDataValidationRule/#-value2","title":"-Value2","text":"<p>When using the between operator, the second data value</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-ExcelDataValidationRule/#-valueset","title":"-ValueSet","text":"<p>When using the list validation type, a set of values (rather than refering to Sheet!B$2:B$100 )</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-ExcelDataValidationRule/#-worksheet","title":"-Worksheet","text":"<p>The worksheet where the cells should be validated</p> <pre><code>Type: ExcelWorksheet\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-ExcelDataValidationRule/#commonparameters","title":"CommonParameters","text":"<p>This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters.</p>"},{"location":"commands/Add-ExcelDataValidationRule/#inputs","title":"INPUTS","text":""},{"location":"commands/Add-ExcelDataValidationRule/#outputs","title":"OUTPUTS","text":""},{"location":"commands/Add-ExcelDataValidationRule/#notes","title":"NOTES","text":""},{"location":"commands/Add-ExcelDataValidationRule/#related-links","title":"RELATED LINKS","text":""},{"location":"commands/Add-ExcelName/","title":"Add-ExcelName","text":""},{"location":"commands/Add-ExcelName/#synopsis","title":"SYNOPSIS","text":"<p>Adds a named-range to an existing Excel worksheet.</p>"},{"location":"commands/Add-ExcelName/#syntax","title":"SYNTAX","text":"<pre><code>Add-ExcelName [-Range] &lt;ExcelRange&gt; [[-RangeName] &lt;String&gt;] [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"commands/Add-ExcelName/#description","title":"DESCRIPTION","text":"<p>It is often helpful to be able to refer to sets of cells with a name rather than using their co-ordinates; Add-ExcelName sets up these names.</p>"},{"location":"commands/Add-ExcelName/#examples","title":"EXAMPLES","text":""},{"location":"commands/Add-ExcelName/#example-1","title":"EXAMPLE 1","text":"<pre><code>PS\\&gt; Add-ExcelName -Range $ws.Cells[$dataRange] -RangeName $rangeName\n</code></pre> <p>$WS is a worksheet, and $dataRange is a string describing a range of cells - for example \"A1:Z10\" - which will become a named range, using the name in $rangeName.</p>"},{"location":"commands/Add-ExcelName/#parameters","title":"PARAMETERS","text":""},{"location":"commands/Add-ExcelName/#-range","title":"-Range","text":"<p>The range of cells to assign as a name.</p> <pre><code>Type: ExcelRange\nParameter Sets: (All)\nAliases:\n\nRequired: True\nPosition: 0\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-ExcelName/#-rangename","title":"-RangeName","text":"<p>The name to assign to the range. If the name exists it will be updated to the new range. If no name is specified, the first cell in the range will be used as the name.</p> <pre><code>Type: String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 1\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-ExcelName/#commonparameters","title":"CommonParameters","text":"<p>This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters.</p>"},{"location":"commands/Add-ExcelName/#inputs","title":"INPUTS","text":""},{"location":"commands/Add-ExcelName/#outputs","title":"OUTPUTS","text":""},{"location":"commands/Add-ExcelName/#notes","title":"NOTES","text":""},{"location":"commands/Add-ExcelName/#related-links","title":"RELATED LINKS","text":""},{"location":"commands/Add-ExcelTable/","title":"Add-ExcelTable","text":""},{"location":"commands/Add-ExcelTable/#synopsis","title":"SYNOPSIS","text":"<p>Adds Tables to Excel workbooks.</p>"},{"location":"commands/Add-ExcelTable/#syntax","title":"SYNTAX","text":"<pre><code>Add-ExcelTable [-Range] &lt;ExcelRange&gt; [[-TableName] &lt;String&gt;] [[-TableStyle] &lt;TableStyles&gt;] [-ShowHeader]\n [-ShowFilter] [-ShowTotal] [[-TableTotalSettings] &lt;Hashtable&gt;] [-ShowFirstColumn] [-ShowLastColumn]\n [-ShowRowStripes] [-ShowColumnStripes] [-PassThru] [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"commands/Add-ExcelTable/#description","title":"DESCRIPTION","text":"<p>Unlike named ranges, where the name only needs to be unique within a sheet, Table names must be unique in the workbook.</p> <p>Tables carry formatting and by default have a filter.</p> <p>The filter, header, totals, first and last column highlights can all be configured.</p>"},{"location":"commands/Add-ExcelTable/#examples","title":"EXAMPLES","text":""},{"location":"commands/Add-ExcelTable/#example-1","title":"EXAMPLE 1","text":"<pre><code>PS\\&gt; Add-ExcelTable -Range $ws.Cells[$dataRange] -TableName $TableName\n</code></pre> <p>$WS is a worksheet, and $dataRange is a string describing a range of cells - for example \"A1:Z10\". This range which will become a table, named $TableName</p>"},{"location":"commands/Add-ExcelTable/#example-2","title":"EXAMPLE 2","text":"<pre><code>PS\\&gt; Add-ExcelTable -Range $ws.cells[$($ws.Dimension.address)] -TableStyle Light1 -TableName Musictable -ShowFilter:$false -ShowTotal -ShowFirstColumn\n</code></pre> <p>Again $ws is a worksheet, range here is the whole of the active part of the worksheet. The table style and name are set, the filter is turned off, and a \"Totals\" row added, and first column is set in bold.</p>"},{"location":"commands/Add-ExcelTable/#parameters","title":"PARAMETERS","text":""},{"location":"commands/Add-ExcelTable/#-passthru","title":"-PassThru","text":"<p>If -PassThru is specified, the table object will be returned to allow additional changes to be made.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-ExcelTable/#-range","title":"-Range","text":"<p>The range of cells to assign to a table.</p> <pre><code>Type: ExcelRange\nParameter Sets: (All)\nAliases:\n\nRequired: True\nPosition: 0\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-ExcelTable/#-showcolumnstripes","title":"-ShowColumnStripes","text":"<p>Turns on column stripes.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-ExcelTable/#-showfilter","title":"-ShowFilter","text":"<p>By default the filter is enabled - it can be turned off with -ShowFilter:$false.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-ExcelTable/#-showfirstcolumn","title":"-ShowFirstColumn","text":"<p>Highlights the first column in bold.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-ExcelTable/#-showheader","title":"-ShowHeader","text":"<p>By default the header row is shown - it can be turned off with -ShowHeader:$false.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-ExcelTable/#-showlastcolumn","title":"-ShowLastColumn","text":"<p>Highlights the last column in bold.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-ExcelTable/#-showrowstripes","title":"-ShowRowStripes","text":"<p>By default the table formats show striped rows, the can be turned off with -ShowRowStripes:$false</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-ExcelTable/#-showtotal","title":"-ShowTotal","text":"<p>Show total adds a totals row. This does not automatically sum the columns but provides a drop-down in each to select sum, average etc</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-ExcelTable/#-tablename","title":"-TableName","text":"<p>The name for the Table - this should be unqiue in the Workbook - auto generated names will be used if this is left empty.</p> <pre><code>Type: String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 1\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-ExcelTable/#-tablestyle","title":"-TableStyle","text":"<p>The Style for the table, by default \"Medium6\" is used</p> <pre><code>Type: TableStyles\nParameter Sets: (All)\nAliases:\nAccepted values: None, Custom, Light1, Light2, Light3, Light4, Light5, Light6, Light7, Light8, Light9, Light10, Light11, Light12, Light13, Light14, Light15, Light16, Light17, Light18, Light19, Light20, Light21, Medium1, Medium2, Medium3, Medium4, Medium5, Medium6, Medium7, Medium8, Medium9, Medium10, Medium11, Medium12, Medium13, Medium14, Medium15, Medium16, Medium17, Medium18, Medium19, Medium20, Medium21, Medium22, Medium23, Medium24, Medium25, Medium26, Medium27, Medium28, Dark1, Dark2, Dark3, Dark4, Dark5, Dark6, Dark7, Dark8, Dark9, Dark10, Dark11\n\nRequired: False\nPosition: 2\nDefault value: Medium6\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-ExcelTable/#-tabletotalsettings","title":"-TableTotalSettings","text":"<p>A HashTable in the form of either</p>"},{"location":"commands/Add-ExcelTable/#-columnname-averagecountcountnumsmaxminnonestddevsumvarcustom-excel-function-starting-with","title":"- ColumnName = \"Average\"|\"Count\"|\"CountNums\"|\"Max\"|\"Min\"|\"None\"|\"StdDev\"|\"Sum\"|\"Var\"|\\&lt;Custom Excel function starting with \"=\"&gt;","text":"<p>ColumnName = @{       Function = \"Average\"|\"Count\"|\"CountNums\"|\"Max\"|\"Min\"|\"None\"|\"StdDev\"|\"Sum\"|\"Var\"|<pre><code>Type: Hashtable\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 3\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-ExcelTable/#commonparameters","title":"CommonParameters","text":"<p>This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters.</p>"},{"location":"commands/Add-ExcelTable/#inputs","title":"INPUTS","text":""},{"location":"commands/Add-ExcelTable/#outputs","title":"OUTPUTS","text":""},{"location":"commands/Add-ExcelTable/#officeopenxmltableexceltable","title":"OfficeOpenXml.Table.ExcelTable","text":""},{"location":"commands/Add-ExcelTable/#notes","title":"NOTES","text":""},{"location":"commands/Add-ExcelTable/#related-links","title":"RELATED LINKS","text":""},{"location":"commands/Add-PivotTable/","title":"Add-PivotTable","text":""},{"location":"commands/Add-PivotTable/#synopsis","title":"SYNOPSIS","text":"<p>Adds a PivotTable (and optional PivotChart) to a workbook.</p>"},{"location":"commands/Add-PivotTable/#syntax","title":"SYNTAX","text":""},{"location":"commands/Add-PivotTable/#chartbyparams-default","title":"ChartbyParams (Default)","text":"<pre><code>Add-PivotTable -PivotTableName &lt;String&gt; [-Address &lt;ExcelAddressBase&gt;] [-ExcelPackage &lt;Object&gt;]\n [-SourceWorksheet &lt;Object&gt;] [-SourceRange &lt;Object&gt;] [-PivotRows &lt;Object&gt;] [-PivotData &lt;Object&gt;]\n [-PivotColumns &lt;Object&gt;] [-PivotFilter &lt;Object&gt;] [-PivotDataToColumn] [-PivotTotals &lt;String&gt;]\n [-NoTotalsInPivot] [-GroupDateRow &lt;String&gt;] [-GroupDateColumn &lt;String&gt;] [-GroupDatePart &lt;eDateGroupBy[]&gt;]\n [-GroupNumericRow &lt;String&gt;] [-GroupNumericColumn &lt;String&gt;] [-GroupNumericMin &lt;Double&gt;]\n [-GroupNumericMax &lt;Double&gt;] [-GroupNumericInterval &lt;Double&gt;] [-PivotNumberFormat &lt;String&gt;]\n [-PivotTableStyle &lt;TableStyles&gt;] [-IncludePivotChart] [-ChartTitle &lt;String&gt;] [-ChartHeight &lt;Int32&gt;]\n [-ChartWidth &lt;Int32&gt;] [-ChartRow &lt;Int32&gt;] [-ChartColumn &lt;Int32&gt;] [-ChartRowOffSetPixels &lt;Int32&gt;]\n [-ChartColumnOffSetPixels &lt;Int32&gt;] [-ChartType &lt;eChartType&gt;] [-NoLegend] [-ShowCategory] [-ShowPercent]\n [-Activate] [-PassThru] [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"commands/Add-PivotTable/#chartbydef","title":"ChartbyDef","text":"<pre><code>Add-PivotTable -PivotTableName &lt;String&gt; [-Address &lt;ExcelAddressBase&gt;] [-ExcelPackage &lt;Object&gt;]\n [-SourceWorksheet &lt;Object&gt;] [-SourceRange &lt;Object&gt;] [-PivotRows &lt;Object&gt;] [-PivotData &lt;Object&gt;]\n [-PivotColumns &lt;Object&gt;] [-PivotFilter &lt;Object&gt;] [-PivotDataToColumn] [-PivotTotals &lt;String&gt;]\n [-NoTotalsInPivot] [-GroupDateRow &lt;String&gt;] [-GroupDateColumn &lt;String&gt;] [-GroupDatePart &lt;eDateGroupBy[]&gt;]\n [-GroupNumericRow &lt;String&gt;] [-GroupNumericColumn &lt;String&gt;] [-GroupNumericMin &lt;Double&gt;]\n [-GroupNumericMax &lt;Double&gt;] [-GroupNumericInterval &lt;Double&gt;] [-PivotNumberFormat &lt;String&gt;]\n [-PivotTableStyle &lt;TableStyles&gt;] -PivotChartDefinition &lt;Object&gt; [-Activate] [-PassThru] [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"commands/Add-PivotTable/#description","title":"DESCRIPTION","text":"<p>If the PivotTable already exists, the source data will be updated.</p>"},{"location":"commands/Add-PivotTable/#examples","title":"EXAMPLES","text":""},{"location":"commands/Add-PivotTable/#example-1","title":"EXAMPLE 1","text":"<pre><code>PS\\&gt; $excel = Get-Service | Export-Excel -Path test.xlsx -WorksheetName Services -PassThru -AutoSize -DisplayPropertySet -TableName ServiceTable -Title \"Services on $Env:COMPUTERNAME\"\n    Add-PivotTable -ExcelPackage $excel  -PivotTableName ServiceSummary   -SourceRange $excel.Workbook.Worksheets\\[1\\].Tables\\[0\\].Address -PivotRows Status -PivotData Name -NoTotalsInPivot -Activate\n     Close-ExcelPackage $excel -Show\n</code></pre> <p>This exports data to new workbook and creates a table with the data in it.</p> <p>The Pivot table is added on its own page, the table created in the first command is used as the source for the PivotTable; which counts the service names in for each Status.</p> <p>At the end the Pivot page is made active.</p>"},{"location":"commands/Add-PivotTable/#example-2","title":"EXAMPLE 2","text":"<pre><code>PS\\&gt;  $chartdef = New-ExcelChartDefinition -Title \"Gross and net by city and product\"  -ChartType ColumnClustered `\n         -Column 11 -Width 500 -Height 360 -YMajorUnit 500 -YMinorUnit 100 -YAxisNumberformat \"$#,##0\" -LegendPosition Bottom\n      $excel = ConvertFrom-Csv    @\"\nProduct, City, Gross, Net\nApple, London , 300, 250\nOrange, London , 400, 350\nBanana, London , 300, 200\nOrange, Paris,   600, 500\nBanana, Paris,   300, 200\nApple, New York, 1200,700\n\"@  | Export-Excel  -Path \"test.xlsx\"  -TableStyle Medium13 -tablename \"RawData\" -PassThru\n      Add-PivotTable -PivotTableName Sales -Address $excel.Workbook.Worksheets[1].Cells[\"F1\"] `\n            -SourceWorkSheet $excel.Workbook.Worksheets[1]  -PivotRows City -PivotColumns Product -PivotData @{Gross=\"Sum\";Net=\"Sum\"} `\n            -PivotNumberFormat \"$#,##0.00\"  -PivotTotals Both  -PivotTableStyle Medium12 -PivotChartDefinition $chartdef\n      Close-ExcelPackage -show $excel\n</code></pre> <p>This script starts by defining a chart.</p> <p>Then it exports some data to an XLSX file and keeps the file open.</p> <p>The next step is to add the pivot table, normally this would be on its own sheet in the workbook, but here -Address is specified to place it beside the data.</p> <p>The Add-Pivot table is given the chart definition and told to create a tale using the City field to create rows, the Product field to create columns and the data should be the sum of the gross field and the sum of the net field; grand totals for both gross and net are included for rows (Cities) and columns (Products) and the data is explicitly formatted as a currency.</p> <p>Note that in the chart definition the number format for the axis does not include any fraction part.</p>"},{"location":"commands/Add-PivotTable/#example-3","title":"EXAMPLE 3","text":"<pre><code>PS&gt; $excel = Convertfrom-csv @\"\nLocation,OrderDate,quantity\nBoston,1/1/2017,100\nNew York,1/21/2017,200\nBoston,1/11/2017,300\nNew York,1/9/2017,400\nBoston,1/18/2017,500\nBoston,2/1/2017,600\nNew York,2/21/2017,700\nNew York,2/11/2017,800\nBoston,2/9/2017,900\nBoston,2/18/2017,1000\nNew York,1/1/2018,100\nBoston,1/21/2018,200\nNew York,1/11/2018,300\nBoston,1/9/2018,400\nNew York,1/18/2018,500\nBoston,2/1/2018,600\nBoston,2/21/2018,700\nNew York,2/11/2018,800\nNew York,2/9/2018,900\nBoston,2/18/2018,1000\n\"@ |  Select-Object -Property @{n=\"OrderDate\";e={[datetime]::ParseExact($_.OrderDate,\"M/d/yyyy\",(Get-Culture))}},\n        Location, Quantity |  Export-Excel \"test2.xlsx\" -PassThru -AutoSize\n      Set-ExcelColumn -Worksheet $excel.sheet1 -Column 1 -NumberFormat 'Short Date'\n      $pt = Add-PivotTable -PassThru -PivotTableName \"ByDate\" -Address $excel.Sheet1.cells[\"F1\"] -SourceWorkSheet $excel.Sheet1  -PivotRows location,orderdate -PivotData @{'quantity'='sum'}  -GroupDateRow orderdate -GroupDatePart 'Months,Years' -PivotTotals None\n      $pt.RowFields[0].SubtotalTop=$false\n      $pt.RowFields[0].Compact=$false\n      Close-ExcelPackage $excel -Show\n</code></pre> <p>Here the data contains dates formatted as strings using US format.</p> <p>These are converted to DateTime objects before being exported to Excel; the \"OrderDate\" column is formatted with the local short-date style.</p> <p>Then the PivotTable is added; it groups information by date and location, the date is split into years and then months.</p> <p>No grand totals are displayed.</p> <p>The Pivot table object is caught in a variable, and the \"Location\" column has its subtotal moved from the top to the bottom of each location section, and the \"Compact\" option is disabled to prevent \"Year\" moving into the same column as location.</p> <p>Finally the workbook is saved and shown in Excel.</p>"},{"location":"commands/Add-PivotTable/#parameters","title":"PARAMETERS","text":""},{"location":"commands/Add-PivotTable/#-activate","title":"-Activate","text":"<p>If there is already content in the workbook the sheet with the PivotTable will not be active UNLESS Activate is specified.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-PivotTable/#-address","title":"-Address","text":"<p>By default, a PivotTable will be created on its own sheet, but it can be created on an existing sheet by giving the address where the top left corner of the table should go. (Allow two rows for the filter if one is used.)</p> <pre><code>Type: ExcelAddressBase\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-PivotTable/#-chartcolumn","title":"-ChartColumn","text":"<p>Cell position of the top left corner of the chart, there will be this number of cells to the left of the chart (default is 4, chart starts at left edge of column E).</p> <pre><code>Type: Int32\nParameter Sets: ChartbyParams\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: 4\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-PivotTable/#-chartcolumnoffsetpixels","title":"-ChartColumnOffSetPixels","text":"<p>Horizontal offset of the chart from the cell corner.</p> <pre><code>Type: Int32\nParameter Sets: ChartbyParams\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: 0\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-PivotTable/#-chartheight","title":"-ChartHeight","text":"<p>Height of the chart in Pixels (400 by default).</p> <pre><code>Type: Int32\nParameter Sets: ChartbyParams\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: 400\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-PivotTable/#-chartrow","title":"-ChartRow","text":"<p>Cell position of the top left corner of the chart, there will be this number of rows above the top edge of the chart (default is 0, chart starts at top edge of row 1).</p> <pre><code>Type: Int32\nParameter Sets: ChartbyParams\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: 0\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-PivotTable/#-chartrowoffsetpixels","title":"-ChartRowOffSetPixels","text":"<p>Vertical offset of the chart from the cell corner.</p> <pre><code>Type: Int32\nParameter Sets: ChartbyParams\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: 0\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-PivotTable/#-charttitle","title":"-ChartTitle","text":"<p>Optional title for the pivot chart, by default the title omitted.</p> <pre><code>Type: String\nParameter Sets: ChartbyParams\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-PivotTable/#-charttype","title":"-ChartType","text":"<p>Type of chart; defaults to \"Pie\".</p> <pre><code>Type: eChartType\nParameter Sets: ChartbyParams\nAliases:\nAccepted values: Area, Line, Pie, Bubble, ColumnClustered, ColumnStacked, ColumnStacked100, ColumnClustered3D, ColumnStacked3D, ColumnStacked1003D, BarClustered, BarStacked, BarStacked100, BarClustered3D, BarStacked3D, BarStacked1003D, LineStacked, LineStacked100, LineMarkers, LineMarkersStacked, LineMarkersStacked100, PieOfPie, PieExploded, PieExploded3D, BarOfPie, XYScatterSmooth, XYScatterSmoothNoMarkers, XYScatterLines, XYScatterLinesNoMarkers, AreaStacked, AreaStacked100, AreaStacked3D, AreaStacked1003D, DoughnutExploded, RadarMarkers, RadarFilled, Surface, SurfaceWireframe, SurfaceTopView, SurfaceTopViewWireframe, Bubble3DEffect, StockHLC, StockOHLC, StockVHLC, StockVOHLC, CylinderColClustered, CylinderColStacked, CylinderColStacked100, CylinderBarClustered, CylinderBarStacked, CylinderBarStacked100, CylinderCol, ConeColClustered, ConeColStacked, ConeColStacked100, ConeBarClustered, ConeBarStacked, ConeBarStacked100, ConeCol, PyramidColClustered, PyramidColStacked, PyramidColStacked100, PyramidBarClustered, PyramidBarStacked, PyramidBarStacked100, PyramidCol, XYScatter, Radar, Doughnut, Pie3D, Line3D, Column3D, Area3D\n\nRequired: False\nPosition: Named\nDefault value: Pie\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-PivotTable/#-chartwidth","title":"-ChartWidth","text":"<p>Width of the chart in Pixels (600 by default).</p> <pre><code>Type: Int32\nParameter Sets: ChartbyParams\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: 600\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-PivotTable/#-excelpackage","title":"-ExcelPackage","text":"<p>An Excel-package object for the workbook.</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-PivotTable/#-groupdatecolumn","title":"-GroupDateColumn","text":"<p>The name of a Column field which should be grouped by parts of the date/time (ignored if GroupDateRow is not specified)</p> <pre><code>Type: String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-PivotTable/#-groupdatepart","title":"-GroupDatePart","text":"<p>The Part(s) of the date to use in the grouping (ignored if GroupDateRow is not specified)</p> <pre><code>Type: eDateGroupBy[]\nParameter Sets: (All)\nAliases:\nAccepted values: Years, Quarters, Months, Days, Hours, Minutes, Seconds\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-PivotTable/#-groupdaterow","title":"-GroupDateRow","text":"<p>The name of a row field which should be grouped by parts of the date/time (ignored if GroupDateRow is not specified)</p> <pre><code>Type: String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-PivotTable/#-groupnumericcolumn","title":"-GroupNumericColumn","text":"<p>The name of a Column field which should be grouped by Number (e.g. 0-99, 100-199, 200-299 )</p> <pre><code>Type: String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-PivotTable/#-groupnumericinterval","title":"-GroupNumericInterval","text":"<p>The interval for grouping</p> <pre><code>Type: Double\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: 100\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-PivotTable/#-groupnumericmax","title":"-GroupNumericMax","text":"<p>The endpoint for grouping</p> <pre><code>Type: Double\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: 1.79769313486232E+308\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-PivotTable/#-groupnumericmin","title":"-GroupNumericMin","text":"<p>The starting point for grouping</p> <pre><code>Type: Double\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: 0\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-PivotTable/#-groupnumericrow","title":"-GroupNumericRow","text":"<p>The name of a row field which should be grouped by Number (e.g. 0-99, 100-199, 200-299 )</p> <pre><code>Type: String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-PivotTable/#-includepivotchart","title":"-IncludePivotChart","text":"<p>If specified, a chart will be included.</p> <pre><code>Type: SwitchParameter\nParameter Sets: ChartbyParams\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-PivotTable/#-nolegend","title":"-NoLegend","text":"<p>If specified hides the chart legend.</p> <pre><code>Type: SwitchParameter\nParameter Sets: ChartbyParams\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-PivotTable/#-nototalsinpivot","title":"-NoTotalsInPivot","text":"<p>Included for compatibility - equivalent to -PivotTotals \"None\".</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-PivotTable/#-passthru","title":"-PassThru","text":"<p>Return the PivotTable so it can be customized.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-PivotTable/#-pivotchartdefinition","title":"-PivotChartDefinition","text":"<p>Use a chart definition instead of specifying chart settings one by one.</p> <pre><code>Type: Object\nParameter Sets: ChartbyDef\nAliases:\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName)\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-PivotTable/#-pivotcolumns","title":"-PivotColumns","text":"<p>Fields to set as columns in the PivotTable.</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-PivotTable/#-pivotdata","title":"-PivotData","text":"<p>A hash table in form \"FieldName\"=\"Function\", where function is one of Average, Count, CountNums, Max, Min, Product, None, StdDev, StdDevP, Sum, Var, VarP.</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-PivotTable/#-pivotdatatocolumn","title":"-PivotDataToColumn","text":"<p>If there are multiple data items in a PivotTable, by default they are shown on separate rows; this switch makes them separate columns.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-PivotTable/#-pivotfilter","title":"-PivotFilter","text":"<p>Fields to use to filter in the PivotTable.</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-PivotTable/#-pivotnumberformat","title":"-PivotNumberFormat","text":"<p>Number format to apply to the data cells in the PivotTable.</p> <pre><code>Type: String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-PivotTable/#-pivotrows","title":"-PivotRows","text":"<p>Fields to set as rows in the PivotTable.</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-PivotTable/#-pivottablename","title":"-PivotTableName","text":"<p>Name for the new PivotTable - this will be the name of a sheet in the Workbook.</p> <pre><code>Type: String\nParameter Sets: (All)\nAliases:\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-PivotTable/#-pivottablestyle","title":"-PivotTableStyle","text":"<p>Apply a table style to the PivotTable.</p> <pre><code>Type: TableStyles\nParameter Sets: (All)\nAliases:\nAccepted values: None, Custom, Light1, Light2, Light3, Light4, Light5, Light6, Light7, Light8, Light9, Light10, Light11, Light12, Light13, Light14, Light15, Light16, Light17, Light18, Light19, Light20, Light21, Medium1, Medium2, Medium3, Medium4, Medium5, Medium6, Medium7, Medium8, Medium9, Medium10, Medium11, Medium12, Medium13, Medium14, Medium15, Medium16, Medium17, Medium18, Medium19, Medium20, Medium21, Medium22, Medium23, Medium24, Medium25, Medium26, Medium27, Medium28, Dark1, Dark2, Dark3, Dark4, Dark5, Dark6, Dark7, Dark8, Dark9, Dark10, Dark11\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-PivotTable/#-pivottotals","title":"-PivotTotals","text":"<p>Define whether totals should be added to rows, columns neither, or both (the default is both).</p> <pre><code>Type: String\nParameter Sets: (All)\nAliases:\nAccepted values: Both, Columns, Rows, None\n\nRequired: False\nPosition: Named\nDefault value: Both\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-PivotTable/#-showcategory","title":"-ShowCategory","text":"<p>If specified attaches the category to slices in a pie chart : not supported on all chart types, this may give errors if applied to an unsupported type.</p> <pre><code>Type: SwitchParameter\nParameter Sets: ChartbyParams\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-PivotTable/#-showpercent","title":"-ShowPercent","text":"<p>If specified attaches percentages to slices in a pie chart.</p> <pre><code>Type: SwitchParameter\nParameter Sets: ChartbyParams\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-PivotTable/#-sourcerange","title":"-SourceRange","text":"<p>Address range in the worksheet e.g \"A10:F20\" - the first row must be column names: if not specified the whole sheet will be used.</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-PivotTable/#-sourceworksheet","title":"-SourceWorksheet","text":"<p>Worksheet where the data is found.</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-PivotTable/#commonparameters","title":"CommonParameters","text":"<p>This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters.</p>"},{"location":"commands/Add-PivotTable/#inputs","title":"INPUTS","text":""},{"location":"commands/Add-PivotTable/#outputs","title":"OUTPUTS","text":""},{"location":"commands/Add-PivotTable/#officeopenxmltablepivottableexcelpivottable","title":"OfficeOpenXml.Table.PivotTable.ExcelPivotTable","text":""},{"location":"commands/Add-PivotTable/#notes","title":"NOTES","text":""},{"location":"commands/Add-PivotTable/#related-links","title":"RELATED LINKS","text":""},{"location":"commands/Add-Worksheet/","title":"Add-Worksheet","text":""},{"location":"commands/Add-Worksheet/#synopsis","title":"SYNOPSIS","text":"<p>Adds a worksheet to an existing workbook.</p>"},{"location":"commands/Add-Worksheet/#syntax","title":"SYNTAX","text":""},{"location":"commands/Add-Worksheet/#package","title":"Package","text":"<pre><code>Add-Worksheet [-ExcelPackage] &lt;ExcelPackage&gt; [-WorksheetName &lt;String&gt;] [-ClearSheet] [-MoveToStart]\n [-MoveToEnd] [-MoveBefore &lt;Object&gt;] [-MoveAfter &lt;Object&gt;] [-Activate] [-CopySource &lt;ExcelWorksheet&gt;]\n [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"commands/Add-Worksheet/#workbook","title":"Workbook","text":"<pre><code>Add-Worksheet -ExcelWorkbook &lt;ExcelWorkbook&gt; [-WorksheetName &lt;String&gt;] [-ClearSheet] [-MoveToStart]\n [-MoveToEnd] [-MoveBefore &lt;Object&gt;] [-MoveAfter &lt;Object&gt;] [-Activate] [-CopySource &lt;ExcelWorksheet&gt;]\n [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"commands/Add-Worksheet/#description","title":"DESCRIPTION","text":"<p>If the named worksheet already exists, the -Clearsheet parameter decides whether it should be deleted and a new one returned, or if not specified the existing sheet will be returned.</p> <p>By default the sheet is created at the end of the work book, the -MoveXXXX switches allow the sheet to be [re]positioned at the start or before or after another sheet.</p> <p>A new sheet will only be made the default sheet when excel opens if -Activate is specified.</p>"},{"location":"commands/Add-Worksheet/#examples","title":"EXAMPLES","text":""},{"location":"commands/Add-Worksheet/#example-1","title":"EXAMPLE 1","text":"<pre><code>PS\\&gt; $WorksheetActors = $ExcelPackage | Add-WorkSheet -WorkSheetname Actors\n</code></pre> <p>$ExcelPackage holds an Excel package object (returned by Open-ExcelPackage, or Export-Excel -passthru). This command will add a sheet named 'Actors', or return the sheet if it exists, and the result is stored in $WorkSheetActors.</p>"},{"location":"commands/Add-Worksheet/#example-2","title":"EXAMPLE 2","text":"<pre><code>PS\\&gt; $WorksheetActors = Add-WorkSheet -ExcelPackage $ExcelPackage -WorkSheetname \"Actors\" -ClearSheet -MoveToStart\n</code></pre> <p>This time the Excel package object is passed as a parameter instead of piped.</p> <p>If the 'Actors' sheet already exists it is deleted and re-created.</p> <p>The new sheet will be created last in the workbook, and -MoveToStart Moves it to the start.</p>"},{"location":"commands/Add-Worksheet/#example-3","title":"EXAMPLE 3","text":"<pre><code>PS\\&gt; $null = Add-WorkSheet -ExcelWorkbook $wb -WorkSheetname $DestinationName -CopySource $sourceWs -Activate\n</code></pre> <p>This time a workbook is used instead of a package, and a worksheet is copied - $SourceWs is a worksheet object, which can come from the same workbook or a different one.</p> <p>Here the new copy of the data is made the active sheet when the workbook is opened.</p>"},{"location":"commands/Add-Worksheet/#parameters","title":"PARAMETERS","text":""},{"location":"commands/Add-Worksheet/#-activate","title":"-Activate","text":"<p>If there is already content in the workbook the new sheet will not be active UNLESS Activate is specified.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-Worksheet/#-clearsheet","title":"-ClearSheet","text":"<p>If the worksheet already exists, by default it will returned, unless -ClearSheet is specified in which case it will be deleted and re-created.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-Worksheet/#-copysource","title":"-CopySource","text":"<p>If worksheet is provided as a copy source the new worksheet will be a copy of it. The source can be in the same workbook, or in a different file.</p> <pre><code>Type: ExcelWorksheet\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-Worksheet/#-excelpackage","title":"-ExcelPackage","text":"<p>An object representing an Excel Package.</p> <pre><code>Type: ExcelPackage\nParameter Sets: Package\nAliases:\n\nRequired: True\nPosition: 0\nDefault value: None\nAccept pipeline input: True (ByValue)\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-Worksheet/#-excelworkbook","title":"-ExcelWorkbook","text":"<p>An Excel Workbook to which the Worksheet will be added - a Package contains one Workbook, so you can use whichever fits at the time.</p> <pre><code>Type: ExcelWorkbook\nParameter Sets: Workbook\nAliases:\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-Worksheet/#-moveafter","title":"-MoveAfter","text":"<p>If specified, the worksheet will be moved after the nominated one (which can be an index starting from 1, or a name or *).</p> <p>If * is used, the worksheet names will be examined starting with the first one, and the sheet placed after the last sheet which comes before it alphabetically.</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-Worksheet/#-movebefore","title":"-MoveBefore","text":"<p>If specified, the worksheet will be moved before the nominated one (which can be an index starting from 1, or a name).</p> <p>MoveBefore takes precedence over MoveAfter if both are specified.</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-Worksheet/#-movetoend","title":"-MoveToEnd","text":"<p>If specified, the worksheet will be moved to the end of the workbook.</p> <p>(This is the default position for newly created sheets, but it can be used to move existing sheets.)</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-Worksheet/#-movetostart","title":"-MoveToStart","text":"<p>If specified, the worksheet will be moved to the start of the workbook.</p> <p>MoveToStart takes precedence over MoveToEnd, Movebefore and MoveAfter if more than one is specified.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-Worksheet/#-worksheetname","title":"-WorksheetName","text":"<p>The name of the worksheet, 'Sheet1' by default.</p> <pre><code>Type: String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Add-Worksheet/#commonparameters","title":"CommonParameters","text":"<p>This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters.</p>"},{"location":"commands/Add-Worksheet/#inputs","title":"INPUTS","text":""},{"location":"commands/Add-Worksheet/#outputs","title":"OUTPUTS","text":""},{"location":"commands/Add-Worksheet/#officeopenxmlexcelworksheet","title":"OfficeOpenXml.ExcelWorksheet","text":""},{"location":"commands/Add-Worksheet/#notes","title":"NOTES","text":""},{"location":"commands/Add-Worksheet/#related-links","title":"RELATED LINKS","text":""},{"location":"commands/BarChart/","title":"BarChart","text":""},{"location":"commands/BarChart/#synopsis","title":"SYNOPSIS","text":"<p>{{ Fill in the Synopsis }}</p>"},{"location":"commands/BarChart/#syntax","title":"SYNTAX","text":"<pre><code>BarChart [[-targetData] &lt;Object&gt;] [[-title] &lt;Object&gt;] [[-ChartType] &lt;eChartType&gt;] [-NoLegend] [-ShowCategory]\n [-ShowPercent] [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"commands/BarChart/#description","title":"DESCRIPTION","text":"<p>{{ Fill in the Description }}</p>"},{"location":"commands/BarChart/#examples","title":"EXAMPLES","text":""},{"location":"commands/BarChart/#example-1","title":"EXAMPLE 1","text":"<pre><code>PS C:\\&gt; {{ Add example code here }}\n</code></pre> <p>{{ Add example description here }}</p>"},{"location":"commands/BarChart/#parameters","title":"PARAMETERS","text":""},{"location":"commands/BarChart/#-charttype","title":"-ChartType","text":"<p>{{ Fill ChartType Description }}</p> <pre><code>Type: eChartType\nParameter Sets: (All)\nAliases:\nAccepted values: Area, Line, Pie, Bubble, ColumnClustered, ColumnStacked, ColumnStacked100, ColumnClustered3D, ColumnStacked3D, ColumnStacked1003D, BarClustered, BarStacked, BarStacked100, BarClustered3D, BarStacked3D, BarStacked1003D, LineStacked, LineStacked100, LineMarkers, LineMarkersStacked, LineMarkersStacked100, PieOfPie, PieExploded, PieExploded3D, BarOfPie, XYScatterSmooth, XYScatterSmoothNoMarkers, XYScatterLines, XYScatterLinesNoMarkers, AreaStacked, AreaStacked100, AreaStacked3D, AreaStacked1003D, DoughnutExploded, RadarMarkers, RadarFilled, Surface, SurfaceWireframe, SurfaceTopView, SurfaceTopViewWireframe, Bubble3DEffect, StockHLC, StockOHLC, StockVHLC, StockVOHLC, CylinderColClustered, CylinderColStacked, CylinderColStacked100, CylinderBarClustered, CylinderBarStacked, CylinderBarStacked100, CylinderCol, ConeColClustered, ConeColStacked, ConeColStacked100, ConeBarClustered, ConeBarStacked, ConeBarStacked100, ConeCol, PyramidColClustered, PyramidColStacked, PyramidColStacked100, PyramidBarClustered, PyramidBarStacked, PyramidBarStacked100, PyramidCol, XYScatter, Radar, Doughnut, Pie3D, Line3D, Column3D, Area3D\n\nRequired: False\nPosition: 2\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/BarChart/#-nolegend","title":"-NoLegend","text":"<p>{{ Fill NoLegend Description }}</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/BarChart/#-showcategory","title":"-ShowCategory","text":"<p>{{ Fill ShowCategory Description }}</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/BarChart/#-showpercent","title":"-ShowPercent","text":"<p>{{ Fill ShowPercent Description }}</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/BarChart/#-targetdata","title":"-targetData","text":"<p>{{ Fill targetData Description }}</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 0\nDefault value: None\nAccept pipeline input: True (ByValue)\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/BarChart/#-title","title":"-title","text":"<p>{{ Fill title Description }}</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 1\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/BarChart/#commonparameters","title":"CommonParameters","text":"<p>This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters.</p>"},{"location":"commands/BarChart/#inputs","title":"INPUTS","text":""},{"location":"commands/BarChart/#systemobject","title":"System.Object","text":""},{"location":"commands/BarChart/#outputs","title":"OUTPUTS","text":""},{"location":"commands/BarChart/#systemobject_1","title":"System.Object","text":""},{"location":"commands/BarChart/#notes","title":"NOTES","text":""},{"location":"commands/BarChart/#related-links","title":"RELATED LINKS","text":""},{"location":"commands/Close-ExcelPackage/","title":"Close-ExcelPackage","text":""},{"location":"commands/Close-ExcelPackage/#synopsis","title":"SYNOPSIS","text":"<p>Closes an Excel Package, saving, saving under a new name or abandoning changes and opening the file in Excel as required.</p>"},{"location":"commands/Close-ExcelPackage/#syntax","title":"SYNTAX","text":"<pre><code>Close-ExcelPackage [-ExcelPackage] &lt;ExcelPackage&gt; [-Show] [-NoSave] [[-SaveAs] &lt;Object&gt;] [[-Password] &lt;String&gt;]\n [-Calculate] [-ReZip] [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"commands/Close-ExcelPackage/#description","title":"DESCRIPTION","text":"<p>When working with an ExcelPackage object, the Workbook is held in memory and not saved until the .Save() method of the package is called.</p> <p>Close-ExcelPackage saves and disposes of the Package object.</p> <p>It can be called with -NoSave to abandon the file without saving, with a new \"SaveAs\" filename, and/or with a password to protect the file. And -Show will open the file in Excel; -Calculate will try to update the workbook, although not everything can be recalculated</p>"},{"location":"commands/Close-ExcelPackage/#examples","title":"EXAMPLES","text":""},{"location":"commands/Close-ExcelPackage/#example-1","title":"EXAMPLE 1","text":"<pre><code>Close-ExcelPackage -show $excel\n</code></pre> <p>$excel holds a package object, this saves the workbook and loads it into Excel.</p>"},{"location":"commands/Close-ExcelPackage/#example-2","title":"EXAMPLE 2","text":"<pre><code>Close-ExcelPackage -NoSave $excel\n</code></pre> <p>$excel holds a package object, this disposes of it without writing it to disk.</p>"},{"location":"commands/Close-ExcelPackage/#parameters","title":"PARAMETERS","text":""},{"location":"commands/Close-ExcelPackage/#-calculate","title":"-Calculate","text":"<p>Attempt to recalculation the workbook before saving</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Close-ExcelPackage/#-excelpackage","title":"-ExcelPackage","text":"<p>Package to close.</p> <pre><code>Type: ExcelPackage\nParameter Sets: (All)\nAliases:\n\nRequired: True\nPosition: 0\nDefault value: None\nAccept pipeline input: True (ByValue)\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Close-ExcelPackage/#-nosave","title":"-NoSave","text":"<p>Abandon the file without saving.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Close-ExcelPackage/#-password","title":"-Password","text":"<p>Password to protect the file.</p> <pre><code>Type: String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 2\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Close-ExcelPackage/#-rezip","title":"-ReZip","text":"<p>{{ Fill ReZip Description }}</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Close-ExcelPackage/#-saveas","title":"-SaveAs","text":"<p>Save file with a new name (ignored if -NoSave Specified).</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 1\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Close-ExcelPackage/#-show","title":"-Show","text":"<p>Open the file in Excel.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Close-ExcelPackage/#commonparameters","title":"CommonParameters","text":"<p>This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters.</p>"},{"location":"commands/Close-ExcelPackage/#inputs","title":"INPUTS","text":""},{"location":"commands/Close-ExcelPackage/#outputs","title":"OUTPUTS","text":""},{"location":"commands/Close-ExcelPackage/#notes","title":"NOTES","text":""},{"location":"commands/Close-ExcelPackage/#related-links","title":"RELATED LINKS","text":""},{"location":"commands/ColumnChart/","title":"ColumnChart","text":""},{"location":"commands/ColumnChart/#synopsis","title":"SYNOPSIS","text":"<p>{{ Fill in the Synopsis }}</p>"},{"location":"commands/ColumnChart/#syntax","title":"SYNTAX","text":"<pre><code>ColumnChart [[-targetData] &lt;Object&gt;] [[-title] &lt;Object&gt;] [[-ChartType] &lt;eChartType&gt;] [-NoLegend]\n [-ShowCategory] [-ShowPercent] [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"commands/ColumnChart/#description","title":"DESCRIPTION","text":"<p>{{ Fill in the Description }}</p>"},{"location":"commands/ColumnChart/#examples","title":"EXAMPLES","text":""},{"location":"commands/ColumnChart/#example-1","title":"EXAMPLE 1","text":"<pre><code>PS C:\\&gt; {{ Add example code here }}\n</code></pre> <p>{{ Add example description here }}</p>"},{"location":"commands/ColumnChart/#parameters","title":"PARAMETERS","text":""},{"location":"commands/ColumnChart/#-charttype","title":"-ChartType","text":"<p>{{ Fill ChartType Description }}</p> <pre><code>Type: eChartType\nParameter Sets: (All)\nAliases:\nAccepted values: Area, Line, Pie, Bubble, ColumnClustered, ColumnStacked, ColumnStacked100, ColumnClustered3D, ColumnStacked3D, ColumnStacked1003D, BarClustered, BarStacked, BarStacked100, BarClustered3D, BarStacked3D, BarStacked1003D, LineStacked, LineStacked100, LineMarkers, LineMarkersStacked, LineMarkersStacked100, PieOfPie, PieExploded, PieExploded3D, BarOfPie, XYScatterSmooth, XYScatterSmoothNoMarkers, XYScatterLines, XYScatterLinesNoMarkers, AreaStacked, AreaStacked100, AreaStacked3D, AreaStacked1003D, DoughnutExploded, RadarMarkers, RadarFilled, Surface, SurfaceWireframe, SurfaceTopView, SurfaceTopViewWireframe, Bubble3DEffect, StockHLC, StockOHLC, StockVHLC, StockVOHLC, CylinderColClustered, CylinderColStacked, CylinderColStacked100, CylinderBarClustered, CylinderBarStacked, CylinderBarStacked100, CylinderCol, ConeColClustered, ConeColStacked, ConeColStacked100, ConeBarClustered, ConeBarStacked, ConeBarStacked100, ConeCol, PyramidColClustered, PyramidColStacked, PyramidColStacked100, PyramidBarClustered, PyramidBarStacked, PyramidBarStacked100, PyramidCol, XYScatter, Radar, Doughnut, Pie3D, Line3D, Column3D, Area3D\n\nRequired: False\nPosition: 2\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/ColumnChart/#-nolegend","title":"-NoLegend","text":"<p>{{ Fill NoLegend Description }}</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/ColumnChart/#-showcategory","title":"-ShowCategory","text":"<p>{{ Fill ShowCategory Description }}</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/ColumnChart/#-showpercent","title":"-ShowPercent","text":"<p>{{ Fill ShowPercent Description }}</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/ColumnChart/#-targetdata","title":"-targetData","text":"<p>{{ Fill targetData Description }}</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 0\nDefault value: None\nAccept pipeline input: True (ByValue)\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/ColumnChart/#-title","title":"-title","text":"<p>{{ Fill title Description }}</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 1\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/ColumnChart/#commonparameters","title":"CommonParameters","text":"<p>This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters.</p>"},{"location":"commands/ColumnChart/#inputs","title":"INPUTS","text":""},{"location":"commands/ColumnChart/#systemobject","title":"System.Object","text":""},{"location":"commands/ColumnChart/#outputs","title":"OUTPUTS","text":""},{"location":"commands/ColumnChart/#systemobject_1","title":"System.Object","text":""},{"location":"commands/ColumnChart/#notes","title":"NOTES","text":""},{"location":"commands/ColumnChart/#related-links","title":"RELATED LINKS","text":""},{"location":"commands/Compare-Worksheet/","title":"Compare-Worksheet","text":""},{"location":"commands/Compare-Worksheet/#synopsis","title":"SYNOPSIS","text":"<p>Compares two worksheets and shows the differences.</p>"},{"location":"commands/Compare-Worksheet/#syntax","title":"SYNTAX","text":""},{"location":"commands/Compare-Worksheet/#true-default","title":"True (Default)","text":"<pre><code>Compare-Worksheet [-Referencefile] &lt;Object&gt; [-Differencefile] &lt;Object&gt; [-WorksheetName &lt;Object&gt;]\n [-Property &lt;Object&gt;] [-ExcludeProperty &lt;Object&gt;] [-Startrow &lt;Int32&gt;] [-AllDataBackgroundColor &lt;Object&gt;]\n [-BackgroundColor &lt;Object&gt;] [-TabColor &lt;Object&gt;] [-Key &lt;Object&gt;] [-FontColor &lt;Object&gt;] [-Show] [-GridView]\n [-PassThru] [-IncludeEqual] [-ExcludeDifferent] [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"commands/Compare-Worksheet/#b","title":"B","text":"<pre><code>Compare-Worksheet [-Referencefile] &lt;Object&gt; [-Differencefile] &lt;Object&gt; [-WorksheetName &lt;Object&gt;]\n [-Property &lt;Object&gt;] [-ExcludeProperty &lt;Object&gt;] -Headername &lt;String[]&gt; [-Startrow &lt;Int32&gt;]\n [-AllDataBackgroundColor &lt;Object&gt;] [-BackgroundColor &lt;Object&gt;] [-TabColor &lt;Object&gt;] [-Key &lt;Object&gt;]\n [-FontColor &lt;Object&gt;] [-Show] [-GridView] [-PassThru] [-IncludeEqual] [-ExcludeDifferent] [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"commands/Compare-Worksheet/#c","title":"C","text":"<pre><code>Compare-Worksheet [-Referencefile] &lt;Object&gt; [-Differencefile] &lt;Object&gt; [-WorksheetName &lt;Object&gt;]\n [-Property &lt;Object&gt;] [-ExcludeProperty &lt;Object&gt;] [-NoHeader] [-Startrow &lt;Int32&gt;]\n [-AllDataBackgroundColor &lt;Object&gt;] [-BackgroundColor &lt;Object&gt;] [-TabColor &lt;Object&gt;] [-Key &lt;Object&gt;]\n [-FontColor &lt;Object&gt;] [-Show] [-GridView] [-PassThru] [-IncludeEqual] [-ExcludeDifferent] [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"commands/Compare-Worksheet/#description","title":"DESCRIPTION","text":"<p>This command takes two file names, one or two worksheet names and a name for a \"key\" column.</p> <p>It reads the worksheet from each file and decides the column names and builds a hashtable of the key-column values and the rows in which they appear.</p> <p>It then uses PowerShell's Compare-Object command to compare the sheets (explicitly checking all the column names which have not been excluded).</p> <p>For the difference rows it adds the row number for the key of that row - we have to add the key after doing the comparison, otherwise identical rows at different positions in the file will not be considered a match.</p> <p>We also add the name of the file and sheet in which the difference occurs.</p> <p>If -BackgroundColor is specified the difference rows will be changed to that background in the orginal file.</p>"},{"location":"commands/Compare-Worksheet/#examples","title":"EXAMPLES","text":""},{"location":"commands/Compare-Worksheet/#example-1","title":"EXAMPLE 1","text":"<pre><code>PS\\&gt; Compare-WorkSheet -Referencefile 'Server56.xlsx' -Differencefile 'Server57.xlsx' -WorkSheetName Products -key IdentifyingNumber -ExcludeProperty Install* | Format-Table\n</code></pre> <p>The two workbooks in this example contain the result of redirecting a subset of properties from Get-WmiObject -Class win32_product to Export-Excel.</p> <p>The command compares the \"Products\" pages in the two workbooks, but we don't want to register a difference if the software was installed on a different date or from a different place, and excluding Install* removes InstallDate and InstallSource.</p> <p>This data doesn't have a \"Name\" column, so we specify the \"IdentifyingNumber\" column as the key.</p> <p>The results will be presented as a table.</p>"},{"location":"commands/Compare-Worksheet/#example-2","title":"EXAMPLE 2","text":"<pre><code>PS\\&gt; Compare-WorkSheet \"Server54.xlsx\" \"Server55.xlsx\" -WorkSheetName Services -GridView\n</code></pre> <p>This time two workbooks contain the result of redirecting the command Get-WmiObject -Class win32_service to Export-Excel.</p> <p>Here the -Differencefile and -Referencefile parameter switches are assumed and the default setting for -Key (\"Name\") works for services.</p> <p>This will display the differences between the \"Services\" sheets using a grid view</p>"},{"location":"commands/Compare-Worksheet/#example-3","title":"EXAMPLE 3","text":"<pre><code>PS\\&gt; Compare-WorkSheet 'Server54.xlsx' 'Server55.xlsx' -WorkSheetName Services -BackgroundColor lightGreen\n</code></pre> <p>This version of the command outputs the differences between the \"services\" pages and highlights any different rows in the spreadsheet files.</p>"},{"location":"commands/Compare-Worksheet/#example-4","title":"EXAMPLE 4","text":"<pre><code>PS\\&gt; Compare-WorkSheet 'Server54.xlsx' 'Server55.xlsx' -WorkSheetName Services -BackgroundColor lightGreen -FontColor Red -Show\n</code></pre> <p>This example builds on the previous one: this time where two changed rows have the value in the \"Name\" column (the default value for -Key), this version adds highlighting of the changed cells in red; and then opens the Excel file.</p>"},{"location":"commands/Compare-Worksheet/#example-5","title":"EXAMPLE 5","text":"<pre><code>PS\\&gt; Compare-WorkSheet 'Pester-tests.xlsx' 'Pester-tests.xlsx' -WorkSheetName 'Server1','Server2' -Property \"full Description\",\"Executed\",\"Result\" -Key \"full Description\"\n</code></pre> <p>This time the reference file and the difference file are the same file and two different sheets are used.</p> <p>Because the tests include the machine name and time the test was run, the command specifies that a limited set of columns should be used.</p>"},{"location":"commands/Compare-Worksheet/#example-6","title":"EXAMPLE 6","text":"<pre><code>PS\\&gt; Compare-WorkSheet 'Server54.xlsx' 'Server55.xlsx' -WorkSheetName general -Startrow 2 -Headername Label,value -Key Label -GridView -ExcludeDifferent\n</code></pre> <p>The \"General\" page in the two workbooks has a title and two unlabelled columns with a row each for CPU, Memory, Domain, Disk and so on.</p> <p>So the command is told to start at row 2 in order to skip the title and given names for the columns: the first is \"label\" and the second \"Value\"; the label acts as the key.</p> <p>This time we are interested in those rows which are the same in both sheets, and the result is displayed using grid view.</p> <p>Note that grid view works best when the number of columns is small.</p>"},{"location":"commands/Compare-Worksheet/#example-7","title":"EXAMPLE 7","text":"<pre><code>PS\\&gt;Compare-WorkSheet 'Server1.xlsx' 'Server2.xlsx' -WorkSheetName general -Startrow 2 -Headername Label,value -Key Label -BackgroundColor White -Show -AllDataBackgroundColor LightGray\n</code></pre> <p>This version of the previous command highlights all the cells in LightGray and then sets the changed rows back to white.</p> <p>Only the unchanged rows are highlighted.</p>"},{"location":"commands/Compare-Worksheet/#parameters","title":"PARAMETERS","text":""},{"location":"commands/Compare-Worksheet/#-alldatabackgroundcolor","title":"-AllDataBackgroundColor","text":"<p>If specified, highlights all the cells - so you can make Equal cells one color, and Different cells another.</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Compare-Worksheet/#-backgroundcolor","title":"-BackgroundColor","text":"<p>If specified, highlights the rows with differences.</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Compare-Worksheet/#-differencefile","title":"-Differencefile","text":"<p>Second file to compare.</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: True\nPosition: 1\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Compare-Worksheet/#-excludedifferent","title":"-ExcludeDifferent","text":"<p>If specified, the result includes only the rows where both are equal.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Compare-Worksheet/#-excludeproperty","title":"-ExcludeProperty","text":"<p>Properties to exclude from the comparison - supports wildcards.</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Compare-Worksheet/#-fontcolor","title":"-FontColor","text":"<p>If specified, highlights the DIFF columns in rows which have the same key.</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Compare-Worksheet/#-gridview","title":"-GridView","text":"<p>If specified, the command tries to the show the DIFF in a Grid-View and not on the console (unless-PassThru is also specified). This works best with few columns selected, and requires a key.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Compare-Worksheet/#-headername","title":"-Headername","text":"<p>Specifies custom property names to use, instead of the values defined in the starting row of the sheet.</p> <pre><code>Type: String[]\nParameter Sets: B\nAliases:\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Compare-Worksheet/#-includeequal","title":"-IncludeEqual","text":"<p>If specified the result will include equal rows as well. By default only different rows are returned.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Compare-Worksheet/#-key","title":"-Key","text":"<p>Name of a column which is unique and will be used to add a row to the DIFF object, defaults to \"Name\".</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: Name\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Compare-Worksheet/#-noheader","title":"-NoHeader","text":"<p>Automatically generate property names (P1, P2, P3 ...) instead of the using the values the starting row of the sheet.</p> <pre><code>Type: SwitchParameter\nParameter Sets: C\nAliases:\n\nRequired: True\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Compare-Worksheet/#-passthru","title":"-PassThru","text":"<p>If specified a full set of DIFF data is returned without filtering to the specified properties.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Compare-Worksheet/#-property","title":"-Property","text":"<p>Properties to include in the comparison - supports wildcards, default is \"*\".</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: *\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Compare-Worksheet/#-referencefile","title":"-Referencefile","text":"<p>First file to compare.</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: True\nPosition: 0\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Compare-Worksheet/#-show","title":"-Show","text":"<p>If specified, opens the Excel workbooks instead of outputting the diff to the console (unless -PassThru is also specified).</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Compare-Worksheet/#-startrow","title":"-Startrow","text":"<p>The row from where we start to import data: all rows above the start row are disregarded. By default, this is the first row.</p> <pre><code>Type: Int32\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: 1\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Compare-Worksheet/#-tabcolor","title":"-TabColor","text":"<p>If specified identifies the tabs which contain difference rows (ignored if -BackgroundColor is omitted).</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Compare-Worksheet/#-worksheetname","title":"-WorksheetName","text":"<p>Name(s) of worksheets to compare.</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: Sheet1\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Compare-Worksheet/#commonparameters","title":"CommonParameters","text":"<p>This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters.</p>"},{"location":"commands/Compare-Worksheet/#inputs","title":"INPUTS","text":""},{"location":"commands/Compare-Worksheet/#outputs","title":"OUTPUTS","text":""},{"location":"commands/Compare-Worksheet/#notes","title":"NOTES","text":""},{"location":"commands/Compare-Worksheet/#related-links","title":"RELATED LINKS","text":""},{"location":"commands/Convert-ExcelRangeToImage/","title":"Convert-ExcelRangeToImage","text":""},{"location":"commands/Convert-ExcelRangeToImage/#synopsis","title":"SYNOPSIS","text":"<p>Gets the specified part of an Excel file and exports it as an image</p>"},{"location":"commands/Convert-ExcelRangeToImage/#syntax","title":"SYNTAX","text":"<pre><code>Convert-ExcelRangeToImage [-Path] &lt;Object&gt; [[-WorksheetName] &lt;Object&gt;] [-Range] &lt;Object&gt;\n [[-Destination] &lt;Object&gt;] [-Show] [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"commands/Convert-ExcelRangeToImage/#description","title":"DESCRIPTION","text":"<p>Excel allows charts to be exported directly to a file, but it can't do this with the rest of a sheet. To work round this, this function</p> <ul> <li>Opens a copy of Excel and loads a file</li> <li>Selects a worksheet and then a range of cells in that worksheet</li> <li>Copies the select to the clipboard</li> <li>Saves the clipboard contents as an image file (it will save as .JPG unless the file name ends .BMP or .PNG)</li> <li>Copies a single cell to the clipboard (to prevent the \"you have put a lot in the clipboard\" message appearing)</li> <li>Closes Excel</li> </ul> <p>Unlike most functions in the module it needs a local copy of Excel to be installed.</p> <p>EXAMPLES</p>"},{"location":"commands/Convert-ExcelRangeToImage/#examples","title":"EXAMPLES","text":""},{"location":"commands/Convert-ExcelRangeToImage/#parameters","title":"PARAMETERS","text":""},{"location":"commands/Convert-ExcelRangeToImage/#-destination","title":"-Destination","text":"<p>A bmp, png or jpg file where the result will be saved</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 3\nDefault value: \"$pwd\\temp.png\"\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Convert-ExcelRangeToImage/#-path","title":"-Path","text":"<p>Path to the Excel file</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: True\nPosition: 0\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Convert-ExcelRangeToImage/#-range","title":"-Range","text":"<p>Range of cells within the sheet, e.g \"A1:Z99\"</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: True\nPosition: 2\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Convert-ExcelRangeToImage/#-show","title":"-Show","text":"<p>If specified opens the image in the default viewer.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Convert-ExcelRangeToImage/#-worksheetname","title":"-WorksheetName","text":"<p>Worksheet name - if none is specified \"Sheet1\" will be assumed</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 1\nDefault value: Sheet1\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Convert-ExcelRangeToImage/#commonparameters","title":"CommonParameters","text":"<p>This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters.</p>"},{"location":"commands/Convert-ExcelRangeToImage/#inputs","title":"INPUTS","text":""},{"location":"commands/Convert-ExcelRangeToImage/#outputs","title":"OUTPUTS","text":""},{"location":"commands/Convert-ExcelRangeToImage/#notes","title":"NOTES","text":""},{"location":"commands/Convert-ExcelRangeToImage/#related-links","title":"RELATED LINKS","text":""},{"location":"commands/ConvertFrom-ExcelData/","title":"ConvertFrom-ExcelData","text":""},{"location":"commands/ConvertFrom-ExcelData/#synopsis","title":"SYNOPSIS","text":"<p>{{ Fill in the Synopsis }}</p>"},{"location":"commands/ConvertFrom-ExcelData/#syntax","title":"SYNTAX","text":"<pre><code>ConvertFrom-ExcelData [-Path] &lt;Object&gt; [[-ScriptBlock] &lt;ScriptBlock&gt;] [[-WorksheetName] &lt;Object&gt;]\n [[-StartRow] &lt;Int32&gt;] [[-Header] &lt;String[]&gt;] [-NoHeader] [-DataOnly] [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"commands/ConvertFrom-ExcelData/#description","title":"DESCRIPTION","text":"<p>{{ Fill in the Description }}</p>"},{"location":"commands/ConvertFrom-ExcelData/#examples","title":"EXAMPLES","text":""},{"location":"commands/ConvertFrom-ExcelData/#example-1","title":"EXAMPLE 1","text":"<pre><code>PS C:\\&gt; {{ Add example code here }}\n</code></pre> <p>{{ Add example description here }}</p>"},{"location":"commands/ConvertFrom-ExcelData/#parameters","title":"PARAMETERS","text":""},{"location":"commands/ConvertFrom-ExcelData/#-dataonly","title":"-DataOnly","text":"<p>{{ Fill DataOnly Description }}</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/ConvertFrom-ExcelData/#-header","title":"-Header","text":"<p>{{ Fill Header Description }}</p> <pre><code>Type: String[]\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 4\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/ConvertFrom-ExcelData/#-noheader","title":"-NoHeader","text":"<p>{{ Fill NoHeader Description }}</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/ConvertFrom-ExcelData/#-path","title":"-Path","text":"<p>{{ Fill Path Description }}</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases: FullName\n\nRequired: True\nPosition: 0\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/ConvertFrom-ExcelData/#-scriptblock","title":"-ScriptBlock","text":"<p>{{ Fill ScriptBlock Description }}</p> <pre><code>Type: ScriptBlock\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 1\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/ConvertFrom-ExcelData/#-startrow","title":"-StartRow","text":"<p>{{ Fill StartRow Description }}</p> <pre><code>Type: Int32\nParameter Sets: (All)\nAliases: HeaderRow, TopRow\n\nRequired: False\nPosition: 3\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/ConvertFrom-ExcelData/#-worksheetname","title":"-WorksheetName","text":"<p>{{ Fill WorksheetName Description }}</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases: Sheet\n\nRequired: False\nPosition: 2\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/ConvertFrom-ExcelData/#commonparameters","title":"CommonParameters","text":"<p>This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters.</p>"},{"location":"commands/ConvertFrom-ExcelData/#inputs","title":"INPUTS","text":""},{"location":"commands/ConvertFrom-ExcelData/#systemobject","title":"System.Object","text":""},{"location":"commands/ConvertFrom-ExcelData/#outputs","title":"OUTPUTS","text":""},{"location":"commands/ConvertFrom-ExcelData/#systemobject_1","title":"System.Object","text":""},{"location":"commands/ConvertFrom-ExcelData/#notes","title":"NOTES","text":""},{"location":"commands/ConvertFrom-ExcelData/#related-links","title":"RELATED LINKS","text":""},{"location":"commands/ConvertFrom-ExcelSheet/","title":"ConvertFrom-ExcelSheet","text":""},{"location":"commands/ConvertFrom-ExcelSheet/#synopsis","title":"SYNOPSIS","text":"<p>Exports Sheets from Excel Workbooks to CSV files.</p>"},{"location":"commands/ConvertFrom-ExcelSheet/#syntax","title":"SYNTAX","text":"<pre><code>ConvertFrom-ExcelSheet [-Path] &lt;String&gt; [[-OutputPath] &lt;String&gt;] [[-SheetName] &lt;String&gt;] [[-Encoding] &lt;String&gt;]\n [[-Extension] &lt;String&gt;] [[-Delimiter] &lt;String&gt;] [[-Property] &lt;Object&gt;] [[-ExcludeProperty] &lt;Object&gt;] [-Append]\n [[-AsText] &lt;String[]&gt;] [[-AsDate] &lt;String[]&gt;] [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"commands/ConvertFrom-ExcelSheet/#description","title":"DESCRIPTION","text":"<p>This command provides a convenient way to run Import-Excel @ImportParameters | Select-Object @selectParameters | export-Csv @ ExportParameters It can take the parameters -AsText , as used in Import-Excel, )Properties &amp; -ExcludeProperties as used in Select-Object and -Append, -Delimiter and -Encoding as used in Export-CSV</p>"},{"location":"commands/ConvertFrom-ExcelSheet/#examples","title":"EXAMPLES","text":""},{"location":"commands/ConvertFrom-ExcelSheet/#example-1","title":"EXAMPLE 1","text":"<pre><code>PS C:\\&gt; ConvertFrom-ExcelSheet Path .\\__tests__\\First10Races.xlsx -OutputPath .. -AsText GridPosition,date\n</code></pre> <p>First10Races.xlsx contains information about Motor races. The race date and grid (starting) position are stored with custom formats. The command specifies the path to the file, and the directory to create the output file, and specifies that the columns \"GridPosition\" and \"Date\" should be treated as text to preserve their formatting</p>"},{"location":"commands/ConvertFrom-ExcelSheet/#example-2","title":"EXAMPLE 2","text":"<pre><code>PS C:\\&gt; ConvertFrom-ExcelSheet Path .\\__tests__\\First10Races.xlsx -OutputPath .. -AsText \"GridPosition\" -Property driver, @{n=\"date\"; e={[datetime]::FromOADate($_.Date).tostring(\"#MM/dd/yyyy#\")}} , FinishPosition, GridPosition\n</code></pre> <p>This uses the same file as example 1. Because the race date has a custom format, it imports as a number, The requirement is to create a CSV file with the Driver, a specially formatted Date, FinishPostion and GridPostion (keeping its custom formatting). The command specifies the path to the file, and the directory to create the output file, specifies that the column \"GridPosition\" should be treated as text instead of a number, and the output properties should be Driver, a calculated \"date\" field, FinishPosition and GridPsition. FromOADate converts the dates used by Excel (Days since Jan 1 1900) to a datetime object.</p>"},{"location":"commands/ConvertFrom-ExcelSheet/#parameters","title":"PARAMETERS","text":""},{"location":"commands/ConvertFrom-ExcelSheet/#-append","title":"-Append","text":"<p>Use this parameter to have the export add output to the end of the file. Without this parameter, the command replaces the file contents without warning.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/ConvertFrom-ExcelSheet/#-asdate","title":"-AsDate","text":"<p>Not all date formats are recognized as indicating the number in the cell represents a date AsDate forces the number which would be returned to be converted to a date. (* is supported as a wildcard.)</p> <pre><code>Type: String[]\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 9\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/ConvertFrom-ExcelSheet/#-astext","title":"-AsText","text":"<p>AsText allows selected columns to be returned as the text displayed in their cells, instead of their value. (* is supported as a wildcard.)</p> <pre><code>Type: String[]\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 8\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/ConvertFrom-ExcelSheet/#-delimiter","title":"-Delimiter","text":"<p>Selects , or ; as the delimeter for the exported data - if not specified , is used by default.</p> <pre><code>Type: String\nParameter Sets: (All)\nAliases:\nAccepted values: ;, ,\n\nRequired: False\nPosition: 5\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/ConvertFrom-ExcelSheet/#-encoding","title":"-Encoding","text":"<p>Sets the text encoding for the output data file; UTF8 bu default</p> <pre><code>Type: String\nParameter Sets: (All)\nAliases:\nAccepted values: ASCII, BigEndianUniCode, Default, OEM, UniCode, UTF32, UTF7, UTF8\n\nRequired: False\nPosition: 3\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/ConvertFrom-ExcelSheet/#-excludeproperty","title":"-ExcludeProperty","text":"<p>Specifies the properties that to exclude from the export. Wildcards are permitted. This parameter is effective only when the command also includes the Property parameter.</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 7\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/ConvertFrom-ExcelSheet/#-extension","title":"-Extension","text":"<p>Sets the file extension for the exported data, defaults to CSV</p> <pre><code>Type: String\nParameter Sets: (All)\nAliases:\nAccepted values: .txt, .log, .csv\n\nRequired: False\nPosition: 4\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/ConvertFrom-ExcelSheet/#-outputpath","title":"-OutputPath","text":"<p>The directory where the output file(s) will be created. The file name(s) will match the name of the workbook page which contained the data.</p> <pre><code>Type: String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 1\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/ConvertFrom-ExcelSheet/#-path","title":"-Path","text":"<p>The path to the .XLSX file which will be exported.</p> <pre><code>Type: String\nParameter Sets: (All)\nAliases:\n\nRequired: True\nPosition: 0\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/ConvertFrom-ExcelSheet/#-property","title":"-Property","text":"<p>Specifies the properties to select. Wildcards are permitted - the default is \"*\". The value of the Property parameter can be a new calculated property, and follows the same pattern as Select-Item</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 6\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/ConvertFrom-ExcelSheet/#-sheetname","title":"-SheetName","text":"<p>The name of a sheet to export, or a regular expression which is used to identify sheets</p> <pre><code>Type: String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 2\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/ConvertFrom-ExcelSheet/#commonparameters","title":"CommonParameters","text":"<p>This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters.</p>"},{"location":"commands/ConvertFrom-ExcelSheet/#inputs","title":"INPUTS","text":""},{"location":"commands/ConvertFrom-ExcelSheet/#none","title":"None","text":""},{"location":"commands/ConvertFrom-ExcelSheet/#outputs","title":"OUTPUTS","text":""},{"location":"commands/ConvertFrom-ExcelSheet/#systemobject","title":"System.Object","text":""},{"location":"commands/ConvertFrom-ExcelSheet/#notes","title":"NOTES","text":""},{"location":"commands/ConvertFrom-ExcelSheet/#related-links","title":"RELATED LINKS","text":""},{"location":"commands/ConvertFrom-ExcelToSQLInsert/","title":"ConvertFrom-ExcelToSQLInsert","text":""},{"location":"commands/ConvertFrom-ExcelToSQLInsert/#synopsis","title":"SYNOPSIS","text":"<p>Generate SQL insert statements from Excel spreadsheet.</p>"},{"location":"commands/ConvertFrom-ExcelToSQLInsert/#syntax","title":"SYNTAX","text":"<pre><code>ConvertFrom-ExcelToSQLInsert [-TableName] &lt;Object&gt; [-Path] &lt;Object&gt; [[-WorksheetName] &lt;Object&gt;]\n [[-StartRow] &lt;Int32&gt;] [[-Header] &lt;String[]&gt;] [-NoHeader] [-DataOnly] [-ConvertEmptyStringsToNull]\n [-UseMsSqlSyntax] [[-SingleQuoteStyle] &lt;Object&gt;] [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"commands/ConvertFrom-ExcelToSQLInsert/#description","title":"DESCRIPTION","text":"<p>Generate SQL insert statements from Excel spreadsheet.</p>"},{"location":"commands/ConvertFrom-ExcelToSQLInsert/#examples","title":"EXAMPLES","text":""},{"location":"commands/ConvertFrom-ExcelToSQLInsert/#example-1","title":"EXAMPLE 1","text":"<pre><code>Generate SQL insert statements from Movies.xlsx file, leaving blank cells as empty strings:\n\n----------------------------------------------------------\n| File: Movies.xlsx            -           Sheet: Sheet1 |\n----------------------------------------------------------\n|           A            B            C                  |\n|1     Movie Name      Year         Rating               |\n|2     The Bodyguard   1992           9                  |\n|3     The Matrix      1999           8                  |\n|4     Skyfall         2012           9                  |\n|5     The Avengers    2012                              |\n----------------------------------------------------------\n\nPS C:\\&gt;  ConvertFrom-ExcelToSQLInsert -TableName \"Movies\" -Path 'C:\\Movies.xlsx'\nINSERT INTO Movies ('Movie Name', 'Year', 'Rating') Values('The Bodyguard', '1992', '9');\nINSERT INTO Movies ('Movie Name', 'Year', 'Rating') Values('The Matrix', '1999', '8');\nINSERT INTO Movies ('Movie Name', 'Year', 'Rating') Values('Skyfall', '2012', '9');\nINSERT INTO Movies ('Movie Name', 'Year', 'Rating') Values('The Avengers', '2012', '');\n</code></pre>"},{"location":"commands/ConvertFrom-ExcelToSQLInsert/#example-2","title":"EXAMPLE 2","text":"<pre><code>Generate SQL insert statements from Movies.xlsx file, specify NULL instead of an empty string.\n\n----------------------------------------------------------\n| File: Movies.xlsx            -           Sheet: Sheet1 |\n----------------------------------------------------------\n|           A            B            C                  |\n|1     Movie Name      Year         Rating               |\n|2     The Bodyguard   1992           9                  |\n|3     The Matrix      1999           8                  |\n|4     Skyfall         2012           9                  |\n|5     The Avengers    2012                              |\n----------------------------------------------------------\n\nPS C:\\&gt; ConvertFrom-ExcelToSQLInsert -TableName \"Movies\" -Path \"C:\\Movies.xlsx\" -ConvertEmptyStringsToNull\nINSERT INTO Movies ('Movie Name', 'Year', 'Rating') Values('The Bodyguard', '1992', '9');\nINSERT INTO Movies ('Movie Name', 'Year', 'Rating') Values('The Matrix', '1999', '8');\nINSERT INTO Movies ('Movie Name', 'Year', 'Rating') Values('Skyfall', '2012', '9');\nINSERT INTO Movies ('Movie Name', 'Year', 'Rating') Values('The Avengers', '2012', NULL);\n</code></pre>"},{"location":"commands/ConvertFrom-ExcelToSQLInsert/#parameters","title":"PARAMETERS","text":""},{"location":"commands/ConvertFrom-ExcelToSQLInsert/#-convertemptystringstonull","title":"-ConvertEmptyStringsToNull","text":"<p>If specified, cells without any data are replaced with NULL, instead of an empty string. This is to address behviors in certain DBMS where an empty string is insert as 0 for INT column, instead of a NULL value.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/ConvertFrom-ExcelToSQLInsert/#-dataonly","title":"-DataOnly","text":"<p>Import only rows and columns that contain data, empty rows and empty columns are not imported.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/ConvertFrom-ExcelToSQLInsert/#-header","title":"-Header","text":"<p>Specifies custom property names to use, instead of the values defined in the column headers of the TopRow. If you provide fewer header names than there is data in the worksheet, then only the data with a corresponding header name will be imported and the data without header name will be disregarded. If you provide more header names than there is data in the worksheet, then all data will be imported and all objects will have all the property names you defined in the header names. As such, the last properties will be blank as there is no data for them.</p> <pre><code>Type: String[]\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 4\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/ConvertFrom-ExcelToSQLInsert/#-noheader","title":"-NoHeader","text":"<p>Automatically generate property names (P1, P2, P3, ..) instead of the ones defined in the column headers of the TopRow. This switch is best used when you want to import the complete worksheet 'as is' and are not concerned with the property names.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/ConvertFrom-ExcelToSQLInsert/#-path","title":"-Path","text":"<p>Path to an existing .XLSX file This parameter is passed to Import-Excel as is.</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases: FullName\n\nRequired: True\nPosition: 1\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/ConvertFrom-ExcelToSQLInsert/#-singlequotestyle","title":"-SingleQuoteStyle","text":"<p>{{ Fill SingleQuoteStyle Description }}</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 5\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/ConvertFrom-ExcelToSQLInsert/#-startrow","title":"-StartRow","text":"<p>The row from where we start to import data, all rows above the StartRow are disregarded. By default this is the first row. When the parameters '-NoHeader' and '-HeaderName' are not provided, this row will contain the column headers that will be used as property names. When one of both parameters are provided, the property names are automatically created and this row will be treated as a regular row containing data.</p> <pre><code>Type: Int32\nParameter Sets: (All)\nAliases: HeaderRow, TopRow\n\nRequired: False\nPosition: 3\nDefault value: 0\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/ConvertFrom-ExcelToSQLInsert/#-tablename","title":"-TableName","text":"<p>Name of the target database table.</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: True\nPosition: 0\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/ConvertFrom-ExcelToSQLInsert/#-usemssqlsyntax","title":"-UseMsSqlSyntax","text":"<pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/ConvertFrom-ExcelToSQLInsert/#-worksheetname","title":"-WorksheetName","text":"<p>Specifies the name of the worksheet in the Excel workbook to import. By default, if no name is provided, the first worksheet will be imported. This parameter is passed to Import-Excel as is.</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases: Sheet\n\nRequired: False\nPosition: 2\nDefault value: 1\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/ConvertFrom-ExcelToSQLInsert/#commonparameters","title":"CommonParameters","text":"<p>This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters.</p>"},{"location":"commands/ConvertFrom-ExcelToSQLInsert/#inputs","title":"INPUTS","text":""},{"location":"commands/ConvertFrom-ExcelToSQLInsert/#outputs","title":"OUTPUTS","text":""},{"location":"commands/ConvertFrom-ExcelToSQLInsert/#notes","title":"NOTES","text":""},{"location":"commands/ConvertFrom-ExcelToSQLInsert/#related-links","title":"RELATED LINKS","text":""},{"location":"commands/ConvertTo-ExcelXlsx/","title":"ConvertTo-ExcelXlsx","text":""},{"location":"commands/ConvertTo-ExcelXlsx/#synopsis","title":"SYNOPSIS","text":"<p>{{ Fill in the Synopsis }}</p>"},{"location":"commands/ConvertTo-ExcelXlsx/#syntax","title":"SYNTAX","text":"<pre><code>ConvertTo-ExcelXlsx [-Path] &lt;String&gt; [-Force] [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"commands/ConvertTo-ExcelXlsx/#description","title":"DESCRIPTION","text":"<p>{{ Fill in the Description }}</p>"},{"location":"commands/ConvertTo-ExcelXlsx/#examples","title":"EXAMPLES","text":""},{"location":"commands/ConvertTo-ExcelXlsx/#example-1","title":"EXAMPLE 1","text":"<pre><code>PS C:\\&gt; {{ Add example code here }}\n</code></pre> <p>{{ Add example description here }}</p>"},{"location":"commands/ConvertTo-ExcelXlsx/#parameters","title":"PARAMETERS","text":""},{"location":"commands/ConvertTo-ExcelXlsx/#-force","title":"-Force","text":"<p>{{ Fill Force Description }}</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/ConvertTo-ExcelXlsx/#-path","title":"-Path","text":"<p>{{ Fill Path Description }}</p> <pre><code>Type: String\nParameter Sets: (All)\nAliases:\n\nRequired: True\nPosition: 0\nDefault value: None\nAccept pipeline input: True (ByValue)\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/ConvertTo-ExcelXlsx/#commonparameters","title":"CommonParameters","text":"<p>This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters.</p>"},{"location":"commands/ConvertTo-ExcelXlsx/#inputs","title":"INPUTS","text":""},{"location":"commands/ConvertTo-ExcelXlsx/#systemstring","title":"System.String","text":""},{"location":"commands/ConvertTo-ExcelXlsx/#outputs","title":"OUTPUTS","text":""},{"location":"commands/ConvertTo-ExcelXlsx/#systemobject","title":"System.Object","text":""},{"location":"commands/ConvertTo-ExcelXlsx/#notes","title":"NOTES","text":""},{"location":"commands/ConvertTo-ExcelXlsx/#related-links","title":"RELATED LINKS","text":""},{"location":"commands/Copy-ExcelWorksheet/","title":"Copy-ExcelWorksheet","text":""},{"location":"commands/Copy-ExcelWorksheet/#synopsis","title":"SYNOPSIS","text":"<p>Copies a worksheet between workbooks or within the same workbook.</p>"},{"location":"commands/Copy-ExcelWorksheet/#syntax","title":"SYNTAX","text":"<pre><code>Copy-ExcelWorksheet [-SourceObject] &lt;Object&gt; [[-SourceWorksheet] &lt;Object&gt;] [-DestinationWorkbook] &lt;Object&gt;\n [[-DestinationWorksheet] &lt;Object&gt;] [-Show] [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"commands/Copy-ExcelWorksheet/#description","title":"DESCRIPTION","text":"<p>Copy-ExcelWorkSheet takes a Source object which is either a worksheet, or a package, Workbook or path, in which case the source worksheet can be specified by name or number (starting from 1). The destination worksheet can be explicitly named, or will follow the name of the source if no name is specified. The Destination workbook can be given as the path to an XLSx file, an ExcelPackage object or an ExcelWorkbook object.</p>"},{"location":"commands/Copy-ExcelWorksheet/#examples","title":"EXAMPLES","text":""},{"location":"commands/Copy-ExcelWorksheet/#example-1","title":"EXAMPLE 1","text":"<pre><code>Copy-ExcelWorkSheet -SourceWorkbook Test1.xlsx  -DestinationWorkbook Test2.xlsx\n</code></pre> <p>This is the simplest version of the command: no source worksheet is specified so Copy-ExcelWorksheet uses the first sheet in the workbook No Destination sheet is specified so the new worksheet will be the same as the one which is being copied.</p>"},{"location":"commands/Copy-ExcelWorksheet/#example-2","title":"EXAMPLE 2","text":"<pre><code>Copy-ExcelWorkSheet -SourceWorkbook Server1.xlsx -sourceWorksheet \"Settings\" -DestinationWorkbook Settings.xlsx -DestinationWorksheet \"Server1\"\n</code></pre> <p>Here the Settings page from Server1's workbook is copied to the 'Server1\" page of a \"Settings\" workbook.</p>"},{"location":"commands/Copy-ExcelWorksheet/#example-3","title":"EXAMPLE 3","text":"<pre><code>$excel = Open-ExcelPackage   .\\test.xlsx\n</code></pre> <p>C:\\&gt; Copy-ExcelWorkSheet -SourceWorkbook $excel -SourceWorkSheet \"first\" -DestinationWorkbook $excel -Show -DestinationWorksheet Duplicate This opens the workbook test.xlsx and copies the worksheet named \"first\" to a new worksheet named \"Duplicate\", because -Show is specified the file is saved and opened in Excel</p>"},{"location":"commands/Copy-ExcelWorksheet/#example-4","title":"EXAMPLE 4","text":"<pre><code>$excel = Open-ExcelPackage .\\test.xlsx\n</code></pre> <p>C:\\&gt; Copy-ExcelWorkSheet -SourceWorkbook $excel -SourceWorkSheet 1 -DestinationWorkbook $excel -DestinationWorksheet Duplicate C:\\&gt; Close-ExcelPackage $excel This is almost the same as the previous example, except source sheet is specified by position rather than name and because -Show is not specified, so other steps can be carried using the package object, at the end the file is saved by Close-ExcelPackage</p>"},{"location":"commands/Copy-ExcelWorksheet/#parameters","title":"PARAMETERS","text":""},{"location":"commands/Copy-ExcelWorksheet/#-destinationworkbook","title":"-DestinationWorkbook","text":"<p>An ExcelWorkbook or ExcelPackage object or the path to an XLSx file where the data should be copied.</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: True\nPosition: 2\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Copy-ExcelWorksheet/#-destinationworksheet","title":"-DestinationWorksheet","text":"<p>Name of the worksheet in the destination workbook; by default the same as the source worksheet's name. If the sheet exists it will be deleted and re-copied.</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 3\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Copy-ExcelWorksheet/#-show","title":"-Show","text":"<p>if the destination is an excel package or a path, launch excel and open the file on completion.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Copy-ExcelWorksheet/#-sourceobject","title":"-SourceObject","text":"<p>An ExcelWorkbook or ExcelPackage object or the path to an XLSx file where the data is found.</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases: SourceWorkbook\n\nRequired: True\nPosition: 0\nDefault value: None\nAccept pipeline input: True (ByValue)\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Copy-ExcelWorksheet/#-sourceworksheet","title":"-SourceWorksheet","text":"<p>Name or number (starting from 1) of the worksheet in the source workbook (defaults to 1).</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 1\nDefault value: 1\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Copy-ExcelWorksheet/#commonparameters","title":"CommonParameters","text":"<p>This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters.</p>"},{"location":"commands/Copy-ExcelWorksheet/#inputs","title":"INPUTS","text":""},{"location":"commands/Copy-ExcelWorksheet/#outputs","title":"OUTPUTS","text":""},{"location":"commands/Copy-ExcelWorksheet/#notes","title":"NOTES","text":""},{"location":"commands/Copy-ExcelWorksheet/#related-links","title":"RELATED LINKS","text":""},{"location":"commands/DoChart/","title":"DoChart","text":""},{"location":"commands/DoChart/#synopsis","title":"SYNOPSIS","text":"<p>{{ Fill in the Synopsis }}</p>"},{"location":"commands/DoChart/#syntax","title":"SYNTAX","text":"<pre><code>DoChart [[-targetData] &lt;Object&gt;] [[-title] &lt;Object&gt;] [[-ChartType] &lt;eChartType&gt;] [-NoLegend] [-ShowCategory]\n [-ShowPercent]\n</code></pre>"},{"location":"commands/DoChart/#description","title":"DESCRIPTION","text":"<p>{{ Fill in the Description }}</p>"},{"location":"commands/DoChart/#examples","title":"EXAMPLES","text":""},{"location":"commands/DoChart/#example-1","title":"EXAMPLE 1","text":"<pre><code>PS C:\\&gt; {{ Add example code here }}\n</code></pre> <p>{{ Add example description here }}</p>"},{"location":"commands/DoChart/#parameters","title":"PARAMETERS","text":""},{"location":"commands/DoChart/#-charttype","title":"-ChartType","text":"<p>{{ Fill ChartType Description }}</p> <pre><code>Type: eChartType\nParameter Sets: (All)\nAliases:\nAccepted values: Area, Line, Pie, Bubble, ColumnClustered, ColumnStacked, ColumnStacked100, ColumnClustered3D, ColumnStacked3D, ColumnStacked1003D, BarClustered, BarStacked, BarStacked100, BarClustered3D, BarStacked3D, BarStacked1003D, LineStacked, LineStacked100, LineMarkers, LineMarkersStacked, LineMarkersStacked100, PieOfPie, PieExploded, PieExploded3D, BarOfPie, XYScatterSmooth, XYScatterSmoothNoMarkers, XYScatterLines, XYScatterLinesNoMarkers, AreaStacked, AreaStacked100, AreaStacked3D, AreaStacked1003D, DoughnutExploded, RadarMarkers, RadarFilled, Surface, SurfaceWireframe, SurfaceTopView, SurfaceTopViewWireframe, Bubble3DEffect, StockHLC, StockOHLC, StockVHLC, StockVOHLC, CylinderColClustered, CylinderColStacked, CylinderColStacked100, CylinderBarClustered, CylinderBarStacked, CylinderBarStacked100, CylinderCol, ConeColClustered, ConeColStacked, ConeColStacked100, ConeBarClustered, ConeBarStacked, ConeBarStacked100, ConeCol, PyramidColClustered, PyramidColStacked, PyramidColStacked100, PyramidBarClustered, PyramidBarStacked, PyramidBarStacked100, PyramidCol, XYScatter, Radar, Doughnut, Pie3D, Line3D, Column3D, Area3D\n\nRequired: False\nPosition: 2\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/DoChart/#-nolegend","title":"-NoLegend","text":"<p>{{ Fill NoLegend Description }}</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/DoChart/#-showcategory","title":"-ShowCategory","text":"<p>{{ Fill ShowCategory Description }}</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/DoChart/#-showpercent","title":"-ShowPercent","text":"<p>{{ Fill ShowPercent Description }}</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/DoChart/#-targetdata","title":"-targetData","text":"<p>{{ Fill targetData Description }}</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 0\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/DoChart/#-title","title":"-title","text":"<p>{{ Fill title Description }}</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 1\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/DoChart/#inputs","title":"INPUTS","text":""},{"location":"commands/DoChart/#none","title":"None","text":""},{"location":"commands/DoChart/#outputs","title":"OUTPUTS","text":""},{"location":"commands/DoChart/#systemobject","title":"System.Object","text":""},{"location":"commands/DoChart/#notes","title":"NOTES","text":""},{"location":"commands/DoChart/#related-links","title":"RELATED LINKS","text":""},{"location":"commands/Enable-ExcelAutoFilter/","title":"Enable-ExcelAutoFilter","text":""},{"location":"commands/Enable-ExcelAutoFilter/#synopsis","title":"SYNOPSIS","text":"<p>Enable the Excel AutoFilter</p>"},{"location":"commands/Enable-ExcelAutoFilter/#syntax","title":"SYNTAX","text":"<pre><code>Enable-ExcelAutoFilter [-Worksheet] &lt;ExcelWorksheet&gt; [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"commands/Enable-ExcelAutoFilter/#description","title":"DESCRIPTION","text":"<p>{{ Fill in the Description }}</p>"},{"location":"commands/Enable-ExcelAutoFilter/#examples","title":"EXAMPLES","text":""},{"location":"commands/Enable-ExcelAutoFilter/#example-1","title":"EXAMPLE 1","text":"<pre><code>Enable-ExcelAutoFilter $targetSheet\n</code></pre>"},{"location":"commands/Enable-ExcelAutoFilter/#parameters","title":"PARAMETERS","text":""},{"location":"commands/Enable-ExcelAutoFilter/#-worksheet","title":"-Worksheet","text":"<p>{{ Fill Worksheet Description }}</p> <pre><code>Type: ExcelWorksheet\nParameter Sets: (All)\nAliases:\n\nRequired: True\nPosition: 1\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Enable-ExcelAutoFilter/#commonparameters","title":"CommonParameters","text":"<p>This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters.</p>"},{"location":"commands/Enable-ExcelAutoFilter/#inputs","title":"INPUTS","text":""},{"location":"commands/Enable-ExcelAutoFilter/#outputs","title":"OUTPUTS","text":""},{"location":"commands/Enable-ExcelAutoFilter/#notes","title":"NOTES","text":""},{"location":"commands/Enable-ExcelAutoFilter/#related-links","title":"RELATED LINKS","text":""},{"location":"commands/Enable-ExcelAutofit/","title":"Enable-ExcelAutofit","text":""},{"location":"commands/Enable-ExcelAutofit/#synopsis","title":"SYNOPSIS","text":"<p>Make all text fit the cells</p>"},{"location":"commands/Enable-ExcelAutofit/#syntax","title":"SYNTAX","text":"<pre><code>Enable-ExcelAutofit [-Worksheet] &lt;ExcelWorksheet&gt; [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"commands/Enable-ExcelAutofit/#description","title":"DESCRIPTION","text":"<p>{{ Fill in the Description }}</p>"},{"location":"commands/Enable-ExcelAutofit/#examples","title":"EXAMPLES","text":""},{"location":"commands/Enable-ExcelAutofit/#example-1","title":"EXAMPLE 1","text":"<pre><code>Enable-ExcelAutofit $excel.Sheet1\n</code></pre>"},{"location":"commands/Enable-ExcelAutofit/#parameters","title":"PARAMETERS","text":""},{"location":"commands/Enable-ExcelAutofit/#-worksheet","title":"-Worksheet","text":"<p>{{ Fill Worksheet Description }}</p> <pre><code>Type: ExcelWorksheet\nParameter Sets: (All)\nAliases:\n\nRequired: True\nPosition: 1\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Enable-ExcelAutofit/#commonparameters","title":"CommonParameters","text":"<p>This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters.</p>"},{"location":"commands/Enable-ExcelAutofit/#inputs","title":"INPUTS","text":""},{"location":"commands/Enable-ExcelAutofit/#outputs","title":"OUTPUTS","text":""},{"location":"commands/Enable-ExcelAutofit/#notes","title":"NOTES","text":""},{"location":"commands/Enable-ExcelAutofit/#related-links","title":"RELATED LINKS","text":""},{"location":"commands/Expand-NumberFormat/","title":"Expand-NumberFormat","text":""},{"location":"commands/Expand-NumberFormat/#synopsis","title":"SYNOPSIS","text":"<p>Converts short names for number formats to the formatting strings used in Excel</p>"},{"location":"commands/Expand-NumberFormat/#syntax","title":"SYNTAX","text":"<pre><code>Expand-NumberFormat [[-NumberFormat] &lt;Object&gt;] [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"commands/Expand-NumberFormat/#description","title":"DESCRIPTION","text":"<p>Where you can type a number format you can write, for example, 'Short-Date' and the module will translate it into the format string used by Excel. Some formats, like Short-Date, change when Excel loads (so date will use the local ordering of year, month and Day). Excel also changes how markers in the are presented different cultures \",\" is used in the format string to mean \"local thousand seperator\" but depending on the country \",\" or \".\" or \" \" may used as the thousand seperator.</p>"},{"location":"commands/Expand-NumberFormat/#examples","title":"EXAMPLES","text":""},{"location":"commands/Expand-NumberFormat/#example-1","title":"EXAMPLE 1","text":"<pre><code>Expand-NumberFormat percentage\n</code></pre> <p>Returns \"0.00%\"</p>"},{"location":"commands/Expand-NumberFormat/#example-2","title":"EXAMPLE 2","text":"<pre><code>Expand-NumberFormat Currency\n</code></pre> <p>Returns the currency format specified in the local regional settings, which may not be the same as Excel uses.</p> <p>The regional settings set the currency symbol and then whether it is before or after the number and separated with a space or not; for negative numbers the number may be wrapped in parentheses or a - sign might appear before or after the number and symbol.</p> <p>So this returns $#,##0.00;($#,##0.00) for English US, #,##0.00 \u20ac;\u20ac#,##0.00- for French.</p> <p>Note some Eurozone countries write \u20ac1,23 and others 1,23\u20ac. In French the decimal point will be rendered as a \",\" and the thousand separator as a space.</p>"},{"location":"commands/Expand-NumberFormat/#parameters","title":"PARAMETERS","text":""},{"location":"commands/Expand-NumberFormat/#-numberformat","title":"-NumberFormat","text":"<p>The format string to Expand</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 0\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Expand-NumberFormat/#commonparameters","title":"CommonParameters","text":"<p>This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters.</p>"},{"location":"commands/Expand-NumberFormat/#inputs","title":"INPUTS","text":""},{"location":"commands/Expand-NumberFormat/#outputs","title":"OUTPUTS","text":""},{"location":"commands/Expand-NumberFormat/#systemstring","title":"System.String","text":""},{"location":"commands/Expand-NumberFormat/#notes","title":"NOTES","text":""},{"location":"commands/Expand-NumberFormat/#related-links","title":"RELATED LINKS","text":""},{"location":"commands/Export-Excel/","title":"Export-Excel","text":""},{"location":"commands/Export-Excel/#synopsis","title":"SYNOPSIS","text":"<p>Exports data to an Excel worksheet.</p>"},{"location":"commands/Export-Excel/#syntax","title":"SYNTAX","text":""},{"location":"commands/Export-Excel/#default-default","title":"Default (Default)","text":"<pre><code>Export-Excel [[-Path] &lt;String&gt;] [-InputObject &lt;Object&gt;] [-Calculate] [-Show] [-WorksheetName &lt;String&gt;]\n [-Password &lt;String&gt;] [-ClearSheet] [-Append] [-Title &lt;String&gt;] [-TitleFillPattern &lt;ExcelFillStyle&gt;]\n [-TitleBold] [-TitleSize &lt;Int32&gt;] [-TitleBackgroundColor &lt;Object&gt;] [-PivotTableName &lt;String&gt;]\n [-PivotRows &lt;String[]&gt;] [-PivotColumns &lt;String[]&gt;] [-PivotData &lt;Object&gt;] [-PivotFilter &lt;String[]&gt;]\n [-PivotDataToColumn] [-PivotTableDefinition &lt;Hashtable&gt;] [-IncludePivotChart] [-PivotChartType &lt;eChartType&gt;]\n [-NoLegend] [-ShowCategory] [-ShowPercent] [-AutoSize] [-MaxAutoSizeRows &lt;Object&gt;] [-NoClobber]\n [-FreezeTopRow] [-FreezeFirstColumn] [-FreezeTopRowFirstColumn] [-FreezePane &lt;Int32[]&gt;] [-AutoFilter]\n [-BoldTopRow] [-NoHeader] [-RangeName &lt;String&gt;] [-TableName &lt;Object&gt;] [-TableStyle &lt;TableStyles&gt;]\n [-TableTotalSettings &lt;Hashtable&gt;] [-BarChart] [-PieChart] [-LineChart] [-ColumnChart]\n [-ExcelChartDefinition &lt;Object[]&gt;] [-HideSheet &lt;String[]&gt;] [-UnHideSheet &lt;String[]&gt;] [-MoveToStart]\n [-MoveToEnd] [-MoveBefore &lt;Object&gt;] [-MoveAfter &lt;Object&gt;] [-KillExcel] [-AutoNameRange] [-StartRow &lt;Int32&gt;]\n [-StartColumn &lt;Int32&gt;] [-PassThru] [-Numberformat &lt;String&gt;] [-ExcludeProperty &lt;String[]&gt;]\n [-NoAliasOrScriptPropeties] [-DisplayPropertySet] [-NoNumberConversion &lt;String[]&gt;]\n [-NoHyperLinkConversion &lt;String[]&gt;] [-ConditionalFormat &lt;Object[]&gt;] [-ConditionalText &lt;Object[]&gt;]\n [-Style &lt;Object[]&gt;] [-CellStyleSB &lt;ScriptBlock&gt;] [-Activate] [-Now] [-ReturnRange] [-PivotTotals &lt;String&gt;]\n [-NoTotalsInPivot] [-ReZip] [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"commands/Export-Excel/#package","title":"Package","text":"<pre><code>Export-Excel -ExcelPackage &lt;ExcelPackage&gt; [-InputObject &lt;Object&gt;] [-Calculate] [-Show]\n [-WorksheetName &lt;String&gt;] [-Password &lt;String&gt;] [-ClearSheet] [-Append] [-Title &lt;String&gt;]\n [-TitleFillPattern &lt;ExcelFillStyle&gt;] [-TitleBold] [-TitleSize &lt;Int32&gt;] [-TitleBackgroundColor &lt;Object&gt;]\n [-PivotTableName &lt;String&gt;] [-PivotRows &lt;String[]&gt;] [-PivotColumns &lt;String[]&gt;] [-PivotData &lt;Object&gt;]\n [-PivotFilter &lt;String[]&gt;] [-PivotDataToColumn] [-PivotTableDefinition &lt;Hashtable&gt;] [-IncludePivotChart]\n [-PivotChartType &lt;eChartType&gt;] [-NoLegend] [-ShowCategory] [-ShowPercent] [-AutoSize]\n [-MaxAutoSizeRows &lt;Object&gt;] [-NoClobber] [-FreezeTopRow] [-FreezeFirstColumn] [-FreezeTopRowFirstColumn]\n [-FreezePane &lt;Int32[]&gt;] [-AutoFilter] [-BoldTopRow] [-NoHeader] [-RangeName &lt;String&gt;] [-TableName &lt;Object&gt;]\n [-TableStyle &lt;TableStyles&gt;] [-TableTotalSettings &lt;Hashtable&gt;] [-BarChart] [-PieChart] [-LineChart]\n [-ColumnChart] [-ExcelChartDefinition &lt;Object[]&gt;] [-HideSheet &lt;String[]&gt;] [-UnHideSheet &lt;String[]&gt;]\n [-MoveToStart] [-MoveToEnd] [-MoveBefore &lt;Object&gt;] [-MoveAfter &lt;Object&gt;] [-KillExcel] [-AutoNameRange]\n [-StartRow &lt;Int32&gt;] [-StartColumn &lt;Int32&gt;] [-PassThru] [-Numberformat &lt;String&gt;] [-ExcludeProperty &lt;String[]&gt;]\n [-NoAliasOrScriptPropeties] [-DisplayPropertySet] [-NoNumberConversion &lt;String[]&gt;]\n [-NoHyperLinkConversion &lt;String[]&gt;] [-ConditionalFormat &lt;Object[]&gt;] [-ConditionalText &lt;Object[]&gt;]\n [-Style &lt;Object[]&gt;] [-CellStyleSB &lt;ScriptBlock&gt;] [-Activate] [-ReturnRange] [-PivotTotals &lt;String&gt;]\n [-NoTotalsInPivot] [-ReZip] [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"commands/Export-Excel/#description","title":"DESCRIPTION","text":"<p>Exports data to an Excel file and where possible tries to convert numbers in text fields so Excel recognizes them as numbers instead of text. After all: Excel is a spreadsheet program used for number manipulation and calculations. The parameter -NoNumberConversion * can be used if number conversion is not desired. In the same way the parameter NoHyperLinkConversion * can be used if hyperlink conversion is not desired</p>"},{"location":"commands/Export-Excel/#examples","title":"EXAMPLES","text":""},{"location":"commands/Export-Excel/#example-1","title":"EXAMPLE 1","text":"<pre><code>PS\\&gt; Get-Process | Export-Excel .\\Test.xlsx -show\n</code></pre> <p>Export all the processes to the Excel file 'Test.xlsx' and open the file immediately.</p>"},{"location":"commands/Export-Excel/#example-2","title":"EXAMPLE 2","text":"<pre><code>PS\\&gt; $ExcelParams = @{\n    Path    = $env:TEMP + '\\Excel.xlsx'\n    Show    = $true\n    Verbose = $true\n}\nPS\\&gt; Remove-Item -Path $ExcelParams.Path -Force -EA Ignore\nPS\\&gt; Write-Output -1 668 34 777 860 -0.5 119 -0.1 234 788 |\n        Export-Excel @ExcelParams -NumberFormat ' [Blue$#,##0.00; [Red]-$#,##0.00'\n</code></pre> <p>Exports all data to the Excel file 'Excel.xslx' and colors the negative values in Red and the positive values in Blue.</p> <p>It will also add a dollar sign in front of the numbers which use a thousand seperator and display to two decimal places.</p>"},{"location":"commands/Export-Excel/#example-3","title":"EXAMPLE 3","text":"<pre><code>PS\\&gt; $ExcelParams = @{\n    Path    = $env:TEMP + '\\Excel.xlsx'\n    Show    = $true\n    Verbose = $true\n}\nPS\\&gt; Remove-Item -Path $ExcelParams.Path -Force -EA Ignore\nPS\\&gt; [PSCustOmobject][Ordered]@{\n    Date      = Get-Date\n    Formula1  = '=SUM(F2:G2)'\n    String1   = 'My String'\n    String2   = 'a'\n    IPAddress = '10.10.25.5'\n    Number1   = '07670'\n    Number2   = '0,26'\n    Number3   = '1.555,83'\n    Number4   = '1.2'\n    Number5   = '-31'\n    PhoneNr1  = '+32 44'\n    PhoneNr2  = '+32 4 4444 444'\n    PhoneNr3  =  '+3244444444'\n} | Export-Excel @ExcelParams -NoNumberConversion IPAddress, Number1\n</code></pre> <p>Exports all data to the Excel file \"Excel.xlsx\" and tries to convert all values to numbers where possible except for \"IPAddress\" and \"Number1\", which are stored in the sheet 'as is', without being converted to a number.</p>"},{"location":"commands/Export-Excel/#example-4","title":"EXAMPLE 4","text":"<pre><code>PS\\&gt; $ExcelParams = @{\n    Path    = $env:TEMP + '\\Excel.xlsx'\n    Show    = $true\n    Verbose = $true\n}\nPS\\&gt; Remove-Item -Path $ExcelParams.Path -Force -EA Ignore\nPS\\&gt; [PSCustOmobject][Ordered]@{\n    Date      = Get-Date\n    Formula1  = '=SUM(F2:G2)'\n    String1   = 'My String'\n    String2   = 'a'\n    IPAddress = '10.10.25.5'\n    Number1   = '07670'\n    Number2   = '0,26'\n    Number3   = '1.555,83'\n    Number4   = '1.2'\n    Number5   = '-31'\n    PhoneNr1  = '+32 44'\n    PhoneNr2  = '+32 4 4444 444'\n    PhoneNr3  =  '+3244444444'\n} | Export-Excel @ExcelParams -NoNumberConversion * -NoHyperLinkConversion *\n</code></pre> <p>Exports all data to the Excel file 'Excel.xslx' as is, no number or hyperlink conversion will take place. This means that Excel will show the exact same data that you handed over to the 'Export-Excel' function.</p>"},{"location":"commands/Export-Excel/#example-5","title":"EXAMPLE 5","text":"<pre><code>PS\\&gt; $ExcelParams = @{\n        Path    = $env:TEMP + '\\Excel.xlsx'\n        Show    = $true\n        Verbose = $true\n}\nPS\\&gt; Remove-Item -Path $ExcelParams.Path -Force -EA Ignore\nPS\\&gt; Write-Output 489 668 299 777 860 151 119 497 234 788 |\n        Export-Excel @ExcelParams -ConditionalText $(\n            New-ConditionalText -ConditionalType GreaterThan 525 -ConditionalTextColor DarkRed -BackgroundColor LightPink\n        )\n</code></pre> <p>Exports data that will have a Conditional Formatting rule in Excel that will show cells with a value is greater than 525, with a background fill color of \"LightPink\" and the text in \"DarkRed\".</p> <p>Where the condition is not met the color will be the default, black text on a white background.</p>"},{"location":"commands/Export-Excel/#example-6","title":"EXAMPLE 6","text":"<pre><code>PS\\&gt; $ExcelParams = @{\n    Path    = $env:TEMP + '\\Excel.xlsx'\n    Show    = $true\n    Verbose = $true\n}\nPS\\&gt; Remove-Item -Path $ExcelParams.Path -Force -EA Ignore\nPS\\&gt; Get-Service | Select-Object -Property Name, Status, DisplayName, ServiceName |\n        Export-Excel @ExcelParams -ConditionalText $(\n            New-ConditionalText Stop DarkRed LightPink\n            New-ConditionalText Running Blue Cyan\n        )\n</code></pre> <p>Exports all services to an Excel sheet, setting a Conditional formatting rule that will set the background fill color to \"LightPink\" and the text color to \"DarkRed\" when the value contains the word \"Stop\".</p> <p>If the value contains the word \"Running\" it will have a background fill color of \"Cyan\" and text colored 'Blue'.</p> <p>If neither condition is met, the color will be the default, black text on a white background.</p>"},{"location":"commands/Export-Excel/#example-7","title":"EXAMPLE 7","text":"<pre><code>PS\\&gt; $r = Get-ChildItem C:\\WINDOWS\\system32 -File\n\nPS\\&gt; $TotalSettings = @{ \n         Name = \"Count\"\n         Extension = \"=COUNTIF([Extension];`\".exe`\")\"\n         Length = @{\n             Function = \"=SUMIF([Extension];`\".exe`\";[Length])\"\n             Comment = \"Sum of all exe sizes\"\n         }\n     }\n\nPS\\&gt; $r | Export-Excel -TableName system32files -TableStyle Medium10 -TableTotalSettings $TotalSettings -Show\n</code></pre> <p>Exports a list of files with a totals row with three calculated totals:</p> <ul> <li>Total count of names</li> <li>Count of files with the extension \".exe\"</li> <li>Total size of all file with extension \".exe\" and add a comment as to not be mistaken that is is the total size of all files</li> </ul>"},{"location":"commands/Export-Excel/#example-8","title":"EXAMPLE 8","text":"<pre><code>PS\\&gt; $ExcelParams = @{\n        Path      = $env:TEMP + '\\Excel.xlsx'\n        Show      = $true\n        Verbose   = $true\n    }\nPS\\&gt; Remove-Item -Path $ExcelParams.Path -Force -EA Ignore\nPS\\&gt; $Array = @()\nPS\\&gt; $Obj1 = [PSCustomObject]@{\n    Member1   = 'First'\n    Member2   = 'Second'\n}\n\nPS\\&gt; $Obj2 = [PSCustomObject]@{\n    Member1   = 'First'\n    Member2   = 'Second'\n    Member3   = 'Third'\n}\n\n PS\\&gt; $Obj3 = [PSCustomObject]@{\n    Member1   = 'First'\n    Member2   = 'Second'\n    Member3   = 'Third'\n    Member4   = 'Fourth'\n}\n\nPS\\&gt; $Array = $Obj1, $Obj2, $Obj3\nPS\\&gt; $Array | Out-GridView -Title 'Not showing Member3 and Member4'\nPS\\&gt; $Array | Update-FirstObjectProperties | Export-Excel @ExcelParams -WorksheetName Numbers\n</code></pre> <p>Updates the first object of the array by adding property 'Member3' and 'Member4'. Afterwards, all objects are exported to an Excel file and all column headers are visible.</p>"},{"location":"commands/Export-Excel/#example-9","title":"EXAMPLE 9","text":"<pre><code>PS\\&gt; Get-Process | Export-Excel .\\test.xlsx -WorksheetName Processes -IncludePivotTable -Show -PivotRows Company -PivotData PM\n</code></pre>"},{"location":"commands/Export-Excel/#example-10","title":"EXAMPLE 10","text":"<pre><code>PS\\&gt; Get-Process | Export-Excel .\\test.xlsx -WorksheetName Processes -ChartType PieExploded3D -IncludePivotChart -IncludePivotTable -Show -PivotRows Company -PivotData PM\n</code></pre>"},{"location":"commands/Export-Excel/#example-11","title":"EXAMPLE 11","text":"<pre><code>PS\\&gt; Get-Service | Export-Excel 'c:\\temp\\test.xlsx'  -Show -IncludePivotTable -PivotRows status -PivotData @{status='count'}\n</code></pre>"},{"location":"commands/Export-Excel/#example-12","title":"EXAMPLE 12","text":"<pre><code>PS\\&gt; $pt = [ordered]@{}\nPS\\&gt; $pt.pt1=@{\n    SourceWorkSheet   = 'Sheet1';\n    PivotRows         = 'Status'\n    PivotData         = @{'Status'='count'}\n    IncludePivotChart = $true\n    ChartType         = 'BarClustered3D'\n}\nPS\\&gt; $pt.pt2=@\n    SourceWorkSheet   = 'Sheet2';\n    PivotRows         = 'Company'\n    PivotData         = @{'Company'='count'}\n    IncludePivotChart = $true\n    ChartType         = 'PieExploded3D'\n}\nPS\\&gt; Remove-Item  -Path .\\test.xlsx\nPS\\&gt; Get-Service | Select-Object    -Property Status,Name,DisplayName,StartType | Export-Excel -Path .\\test.xlsx -AutoSize\nPS\\&gt; Get-Process | Select-Object    -Property Name,Company,Handles,CPU,VM       | Export-Excel -Path .\\test.xlsx -AutoSize -WorksheetName 'sheet2'\nPS\\&gt; Export-Excel -Path .\\test.xlsx -PivotTableDefinition $pt -Show\n</code></pre> <p>This example defines two PivotTables.</p> <p>Then it puts Service data on Sheet1 with one call to Export-Excel and Process Data on sheet2 with a second call to Export-Excel.</p> <p>The third and final call adds the two PivotTables and opens the spreadsheet in Excel.</p>"},{"location":"commands/Export-Excel/#example-13","title":"EXAMPLE 13","text":"<pre><code>PS\\&gt; Remove-Item  -Path .\\test.xlsx\nPS\\&gt; $excel = Get-Service | Select-Object -Property Status,Name,DisplayName,StartType | Export-Excel -Path .\\test.xlsx -PassThru\nPS\\&gt; $excel.Workbook.Worksheets [\"Sheet1\"].Row(1).style.font.bold = $true\nPS\\&gt; $excel.Workbook.Worksheets [\"Sheet1\"].Column(3 ).width = 29\nPS\\&gt; $excel.Workbook.Worksheets [\"Sheet1\"].Column(3 ).Style.wraptext = $true\nPS\\&gt; $excel.Save()\nPS\\&gt; $excel.Dispose()\nPS\\&gt; Start-Process .\\test.xlsx\n</code></pre> <p>This example uses -PassThru.</p> <p>It puts service information into sheet1 of the workbook and saves the ExcelPackage object in $Excel.</p> <p>It then uses the package object to apply formatting, and then saves the workbook and disposes of the object, before loading the document in Excel.</p> <p>Note: Other commands in the module remove the need to work directly with the package object in this way.</p>"},{"location":"commands/Export-Excel/#example-14","title":"EXAMPLE 14","text":"<pre><code>PS\\&gt; Remove-Item -Path .\\test.xlsx -ErrorAction Ignore\nPS\\&gt; $excel = Get-Process | Select-Object -Property Name,Company,Handles,CPU,PM,NPM,WS |\n        Export-Excel -Path .\\test.xlsx -ClearSheet -WorksheetName \"Processes\" -PassThru\nPS\\&gt; $sheet = $excel.Workbook.Worksheets [\"Processes\"]\nPS\\&gt; $sheet.Column(1) | Set-ExcelRange -Bold -AutoFit\nPS\\&gt; $sheet.Column(2) | Set-ExcelRange -Width 29 -WrapText\nPS\\&gt; $sheet.Column(3) | Set-ExcelRange -HorizontalAlignment Right -NFormat \"#,###\"\nPS\\&gt; Set-ExcelRange -Address $sheet.Cells [\"E1:H1048576\"]  -HorizontalAlignment Right -NFormat \"#,###\"\nPS\\&gt; Set-ExcelRange -Address $sheet.Column(4)  -HorizontalAlignment Right -NFormat \"#,##0.0\" -Bold\nPS\\&gt; Set-ExcelRange -Address $sheet.Row(1) -Bold -HorizontalAlignment Center\nPS\\&gt; Add-ConditionalFormatting -WorkSheet $sheet -Range \"D2:D1048576\" -DataBarColor Red\nPS\\&gt; Add-ConditionalFormatting -WorkSheet $sheet -Range \"G2:G1048576\" -RuleType GreaterThan -ConditionValue \"104857600\" -ForeGroundColor Red\nPS\\&gt; foreach ($c in 5..9) {Set-ExcelRange -Address $sheet.Column($c)  -AutoFit }\nPS\\&gt; Export-Excel -ExcelPackage $excel -WorksheetName \"Processes\" -IncludePivotChart -ChartType ColumnClustered -NoLegend -PivotRows company -PivotData @{'Name'='Count'}  -Show\n</code></pre> <p>This a more sophisticated version of the previous example showing different ways of using Set-ExcelRange, and also adding conditional formatting.</p> <p>In the final command a PivotChart is added and the workbook is opened in Excel.</p>"},{"location":"commands/Export-Excel/#example-15","title":"EXAMPLE 15","text":"<pre><code>PS\\&gt; 0..360 | ForEach-Object {[pscustomobject][ordered]@{X=$_; Sinx=\"=Sin(Radians(x)) \"} } |\n        Export-Excel -now -LineChart -AutoNameRange\n</code></pre> <p>Creates a line chart showing the value of Sine(x) for values of X between 0 and 360 degrees.</p>"},{"location":"commands/Export-Excel/#example-16","title":"EXAMPLE 16","text":"<pre><code>PS\\&gt; Invoke-Sqlcmd -ServerInstance localhost\\DEFAULT -Database AdventureWorks2014 -Query \"select *  from sys.tables\" -OutputAs DataRows |\n       Export-Excel -Path .\\SysTables_AdventureWorks2014.xlsx -WorksheetName Tables\n</code></pre> <p>Runs a query against a SQL Server database and outputs the resulting rows as DataRows using the -OutputAs parameter. The results are then piped to the Export-Excel function.</p> <p>NOTE: You need to install the SqlServer module from the PowerShell Gallery in order to get the -OutputAs parameter for the Invoke-Sqlcmd cmdlet.</p>"},{"location":"commands/Export-Excel/#parameters","title":"PARAMETERS","text":""},{"location":"commands/Export-Excel/#-activate","title":"-Activate","text":"<p>If there is already content in the workbook, a new sheet will not be active UNLESS Activate is specified; when a PivotTable is created its sheet will be activated by this switch.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Export-Excel/#-append","title":"-Append","text":"<p>If specified data will be added to the end of an existing sheet, using the same column headings.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Export-Excel/#-autofilter","title":"-AutoFilter","text":"<p>Enables the Excel filter on the complete header row, so users can easily sort, filter and/or search the data in the selected column.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Export-Excel/#-autonamerange","title":"-AutoNameRange","text":"<p>Makes each column a named range.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Export-Excel/#-autosize","title":"-AutoSize","text":"<p>Sizes the width of the Excel column to the maximum width needed to display all the containing data in that cell.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Export-Excel/#-barchart","title":"-BarChart","text":"<p>Creates a \"quick\" bar chart using the first text column as labels and the first numeric column as values.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Export-Excel/#-boldtoprow","title":"-BoldTopRow","text":"<p>Makes the top row boldface.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Export-Excel/#-calculate","title":"-Calculate","text":"<p>If specified, a recalculation of the worksheet will be requested before saving.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Export-Excel/#-cellstylesb","title":"-CellStyleSB","text":"<p>A script block which is run at the end of the export to apply styles to cells (although it can be used for other purposes). The script block is given three paramaters; an object containing the current worksheet, the Total number of Rows and the number of the last column.</p> <pre><code>Type: ScriptBlock\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Export-Excel/#-clearsheet","title":"-ClearSheet","text":"<p>If specified Export-Excel will remove any existing worksheet with the selected name.</p> <p>The default behaviour is to overwrite cells in this sheet as needed (but leaving non-overwritten ones in place).</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Export-Excel/#-columnchart","title":"-ColumnChart","text":"<p>Creates a \"quick\" column chart using the first text column as labels and the first numeric column as values.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Export-Excel/#-conditionalformat","title":"-ConditionalFormat","text":"<p>One or more conditional formatting rules defined with New-ConditionalFormattingIconSet.</p> <pre><code>Type: Object[]\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Export-Excel/#-conditionaltext","title":"-ConditionalText","text":"<p>Applies a Conditional formatting rule defined with New-ConditionalText. When specific conditions are met the format is applied.</p> <pre><code>Type: Object[]\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Export-Excel/#-displaypropertyset","title":"-DisplayPropertySet","text":"<p>Many (but not all) objects in PowerShell have a hidden property named psStandardmembers with a child property DefaultDisplayPropertySet ; this parameter reduces the properties exported to those in this set.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Export-Excel/#-excelchartdefinition","title":"-ExcelChartDefinition","text":"<p>A hash-table containing ChartType, Title, NoLegend, ShowCategory, ShowPercent, Yrange, Xrange and SeriesHeader for one or more [non-Pivot] charts. This can be created with the New-ExcelChartDefinition command.</p> <pre><code>Type: Object[]\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Export-Excel/#-excelpackage","title":"-ExcelPackage","text":"<p>An object representing an Excel Package - usually this is returned by specifying -PassThru allowing multiple commands to work on the same workbook without saving and reloading each time.</p> <pre><code>Type: ExcelPackage\nParameter Sets: Package\nAliases:\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Export-Excel/#-excludeproperty","title":"-ExcludeProperty","text":"<p>Specifies properties which may exist in the target data but should not be placed on the worksheet.</p> <pre><code>Type: String[]\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Export-Excel/#-freezefirstcolumn","title":"-FreezeFirstColumn","text":"<p>Freezes titles etc. in the left column.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Export-Excel/#-freezepane","title":"-FreezePane","text":"<p>Freezes panes at specified coordinates (in the form RowNumber, ColumnNumber).</p> <pre><code>Type: Int32[]\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Export-Excel/#-freezetoprow","title":"-FreezeTopRow","text":"<p>Freezes headers etc. in the top row.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Export-Excel/#-freezetoprowfirstcolumn","title":"-FreezeTopRowFirstColumn","text":"<p>Freezes top row and left column (equivalent to Freeze pane 2,2 ).</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Export-Excel/#-hidesheet","title":"-HideSheet","text":"<p>Name(s) of Sheet(s) to hide in the workbook, supports wildcards. If the selection would cause all sheets to be hidden, the sheet being worked on will be revealed.</p> <pre><code>Type: String[]\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Export-Excel/#-includepivotchart","title":"-IncludePivotChart","text":"<p>Include a chart with the PivotTable - implies -IncludePivotTable.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Export-Excel/#-inputobject","title":"-InputObject","text":"<p>Data is usually piped into Export-Excel, but it also accepts data through the InputObject parameter</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases: TargetData\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByValue)\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Export-Excel/#-killexcel","title":"-KillExcel","text":"<p>Closes Excel without stopping to ask if work should be saved - prevents errors writing to the file because Excel has it open.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Export-Excel/#-linechart","title":"-LineChart","text":"<p>Creates a \"quick\" line chart using the first text column as labels and the first numeric column as values.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Export-Excel/#-maxautosizerows","title":"-MaxAutoSizeRows","text":"<p>Autosizing can be time consuming, so this sets a maximum number of rows to look at for the Autosize operation. Default is 1000; If 0 is specified ALL rows will be checked</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: 1000\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Export-Excel/#-moveafter","title":"-MoveAfter","text":"<p>If specified, the worksheet will be moved after the nominated one (which can be a position starting from 1, or a name or *).</p> <p>If * is used, the worksheet names will be examined starting with the first one, and the sheet placed after the last sheet which comes before it alphabetically.</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Export-Excel/#-movebefore","title":"-MoveBefore","text":"<p>If specified, the worksheet will be moved before the nominated one (which can be a position starting from 1, or a name).</p> <p>-MoveBefore takes precedence over -MoveAfter if both are specified.</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Export-Excel/#-movetoend","title":"-MoveToEnd","text":"<p>If specified, the worksheet will be moved to the end of the workbook. (This is the default position for newly created sheets, but the option can be specified to move existing sheets.)</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Export-Excel/#-movetostart","title":"-MoveToStart","text":"<p>If specified, the worksheet will be moved to the start of the workbook.</p> <p>-MoveToStart takes precedence over -MoveToEnd, -Movebefore and -MoveAfter if more than one is specified.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Export-Excel/#-noaliasorscriptpropeties","title":"-NoAliasOrScriptPropeties","text":"<p>Some objects in PowerShell duplicate existing properties by adding aliases, or have Script properties which may take a long time to return a value and slow the export down, if specified this option removes these properties</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Export-Excel/#-noclobber","title":"-NoClobber","text":"<p>Not used. Left in to avoid problems with older scripts, it may be removed in future versions.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Export-Excel/#-noheader","title":"-NoHeader","text":"<p>Specifies that field names should not be put at the top of columns.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Export-Excel/#-nohyperlinkconversion","title":"-NoHyperLinkConversion","text":"<p>By default the command will convert all URIs to hyperlinks if possible, but this isn't always desirable. -NoHyperLinkConversion allows you to add exceptions for the conversion.</p> <p>The only Wildcard allowed is * for all properties</p> <pre><code>Type: String[]\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Export-Excel/#-nolegend","title":"-NoLegend","text":"<p>Exclude the legend from the PivotChart.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Export-Excel/#-nonumberconversion","title":"-NoNumberConversion","text":"<p>By default the command will convert all values to numbers if possible, but this isn't always desirable. -NoNumberConversion allows you to add exceptions for the conversion.</p> <p>The only Wildcard allowed is * for all properties</p> <pre><code>Type: String[]\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Export-Excel/#-nototalsinpivot","title":"-NoTotalsInPivot","text":"<p>In a PivotTable created from command line parameters, prevents the addition of totals to rows and columns.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Export-Excel/#-now","title":"-Now","text":"<p>The -Now switch is a shortcut that automatically creates a temporary file, enables \"AutoSize\", \"TableName\" and \"Show\", and opens the file immediately.</p> <pre><code>Type: SwitchParameter\nParameter Sets: Default\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Export-Excel/#-numberformat","title":"-Numberformat","text":"<p>Formats all values that can be converted to a number to the format specified. For examples:</p> <p>'0'         integer (not really needed unless you need to round numbers, Excel will use default cell properties). '#'         integer without displaying the number 0 in the cell. '0.0'       number with 1 decimal place. '0.00'      number with 2 decimal places. '#,##0.00'  number with 2 decimal places and thousand-separator. '\u20ac#,##0.00' number with 2 decimal places and thousand-separator and money-symbol. '0%'        number with 2 decimal places and thousand-separator and money-symbol. '[Blue]$#,##0.00;[Red]-$#,##0.00'             blue for positive numbers and red for negative numbers;  Both proceeded by a '$' sign</p> <pre><code>Type: String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: General\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Export-Excel/#-passthru","title":"-PassThru","text":"<p>If specified, Export-Excel returns an object representing the Excel package without saving the package first. To save, you must either use the Close-ExcelPackage command, or send the package object back to Export-Excel which will save and close the file, or use the object's .Save() or SaveAs() method.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases: PT\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Export-Excel/#-password","title":"-Password","text":"<p>Sets password protection on the workbook.</p> <pre><code>Type: String\nParameter Sets: (All)\nAliases: PW\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Export-Excel/#-path","title":"-Path","text":"<p>Path to a new or existing .XLSX file.</p> <pre><code>Type: String\nParameter Sets: Default\nAliases:\n\nRequired: False\nPosition: 0\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Export-Excel/#-piechart","title":"-PieChart","text":"<p>Creates a \"quick\" pie chart using the first text column as labels and the first numeric column as values.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Export-Excel/#-pivotcharttype","title":"-PivotChartType","text":"<p>{{ Fill PivotChartType Description }}</p> <pre><code>Type: eChartType\nParameter Sets: (All)\nAliases: ChartType\nAccepted values: Area, Line, Pie, Bubble, ColumnClustered, ColumnStacked, ColumnStacked100, ColumnClustered3D, ColumnStacked3D, ColumnStacked1003D, BarClustered, BarStacked, BarStacked100, BarClustered3D, BarStacked3D, BarStacked1003D, LineStacked, LineStacked100, LineMarkers, LineMarkersStacked, LineMarkersStacked100, PieOfPie, PieExploded, PieExploded3D, BarOfPie, XYScatterSmooth, XYScatterSmoothNoMarkers, XYScatterLines, XYScatterLinesNoMarkers, AreaStacked, AreaStacked100, AreaStacked3D, AreaStacked1003D, DoughnutExploded, RadarMarkers, RadarFilled, Surface, SurfaceWireframe, SurfaceTopView, SurfaceTopViewWireframe, Bubble3DEffect, StockHLC, StockOHLC, StockVHLC, StockVOHLC, CylinderColClustered, CylinderColStacked, CylinderColStacked100, CylinderBarClustered, CylinderBarStacked, CylinderBarStacked100, CylinderCol, ConeColClustered, ConeColStacked, ConeColStacked100, ConeBarClustered, ConeBarStacked, ConeBarStacked100, ConeCol, PyramidColClustered, PyramidColStacked, PyramidColStacked100, PyramidBarClustered, PyramidBarStacked, PyramidBarStacked100, PyramidCol, XYScatter, Radar, Doughnut, Pie3D, Line3D, Column3D, Area3D\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Export-Excel/#-pivotcolumns","title":"-PivotColumns","text":"<p>Name(s) of columns from the spreadsheet which will provide the Column name(s) in a PivotTable created from command line parameters.</p> <pre><code>Type: String[]\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Export-Excel/#-pivotdata","title":"-PivotData","text":"<p>In a PivotTable created from command line parameters, the fields to use in the table body are given as a Hash-table in the form</p> <p>ColumnName = Average|Count|CountNums|Max|Min|Product|None|StdDev|StdDevP|Sum|Var|VarP.</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Export-Excel/#-pivotdatatocolumn","title":"-PivotDataToColumn","text":"<p>If there are multiple datasets in a PivotTable, by default they are shown as separate rows under the given row heading; this switch makes them separate columns.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Export-Excel/#-pivotfilter","title":"-PivotFilter","text":"<p>Name(s) columns from the spreadsheet which will provide the Filter name(s) in a PivotTable created from command line parameters.</p> <pre><code>Type: String[]\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Export-Excel/#-pivotrows","title":"-PivotRows","text":"<p>Name(s) of column(s) from the spreadsheet which will provide the Row name(s) in a PivotTable created from command line parameters.</p> <pre><code>Type: String[]\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Export-Excel/#-pivottabledefinition","title":"-PivotTableDefinition","text":"<p>Instead of describing a single PivotTable with multiple command-line parameters; you can use a HashTable in the form PivotTableName = Definition;</p> <p>In this table Definition is itself a Hashtable with Sheet, PivotRows, PivotColumns, PivotData, IncludePivotChart and ChartType values. The New-PivotTableDefinition command will create the definition from a command line.</p> <pre><code>Type: Hashtable\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Export-Excel/#-pivottablename","title":"-PivotTableName","text":"<p>If a PivotTable is created from command line parameters, specifies the name of the new sheet holding the pivot. Defaults to \"WorksheetName-PivotTable\".</p> <pre><code>Type: String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Export-Excel/#-pivottotals","title":"-PivotTotals","text":"<p>By default, PivotTables have totals for each row (on the right) and for each column at the bottom. This allows just one or neither to be selected.</p> <pre><code>Type: String\nParameter Sets: (All)\nAliases:\nAccepted values: Both, Columns, Rows, None\n\nRequired: False\nPosition: Named\nDefault value: Both\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Export-Excel/#-rangename","title":"-RangeName","text":"<p>Makes the data in the worksheet a named range.</p> <pre><code>Type: String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Export-Excel/#-returnrange","title":"-ReturnRange","text":"<p>If specified, Export-Excel returns the range of added cells in the format \"A1:Z100\".</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Export-Excel/#-rezip","title":"-ReZip","text":"<p>If specified, Export-Excel will expand the contents of the .XLSX file (which is multiple files in a zip archive) and rebuild it.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Export-Excel/#-show","title":"-Show","text":"<p>Opens the Excel file immediately after creation; convenient for viewing the results instantly without having to search for the file first.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Export-Excel/#-showcategory","title":"-ShowCategory","text":"<p>Add category labels to the PivotChart.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Export-Excel/#-showpercent","title":"-ShowPercent","text":"<p>Add percentage labels to the PivotChart.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Export-Excel/#-startcolumn","title":"-StartColumn","text":"<p>Column to start adding data - 1 by default.</p> <pre><code>Type: Int32\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: 1\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Export-Excel/#-startrow","title":"-StartRow","text":"<p>Row to start adding data. 1 by default. Row 1 will contain the title, if any is specifed. Then headers will appear (Unless -No header is specified) then the data appears.</p> <pre><code>Type: Int32\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: 1\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Export-Excel/#-style","title":"-Style","text":"<p>Takes style settings as a hash-table (which may be built with the New-ExcelStyle command) and applies them to the worksheet. If the hash-table contains a range the settings apply to the range, otherewise they apply to the whole sheet.</p> <pre><code>Type: Object[]\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Export-Excel/#-tablename","title":"-TableName","text":"<p>Makes the data in the worksheet a table with a name, and applies a style to it. The name must not contain spaces. If the -Tablestyle parameter is specified without Tablename, \"table1\", \"table2\" etc. will be used.</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases: Table\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Export-Excel/#-tablestyle","title":"-TableStyle","text":"<p>Selects the style for the named table - if the Tablename parameter is specified without giving a style, 'Medium6' is used as a default.</p> <pre><code>Type: TableStyles\nParameter Sets: (All)\nAliases:\nAccepted values: None, Custom, Light1, Light2, Light3, Light4, Light5, Light6, Light7, Light8, Light9, Light10, Light11, Light12, Light13, Light14, Light15, Light16, Light17, Light18, Light19, Light20, Light21, Medium1, Medium2, Medium3, Medium4, Medium5, Medium6, Medium7, Medium8, Medium9, Medium10, Medium11, Medium12, Medium13, Medium14, Medium15, Medium16, Medium17, Medium18, Medium19, Medium20, Medium21, Medium22, Medium23, Medium24, Medium25, Medium26, Medium27, Medium28, Dark1, Dark2, Dark3, Dark4, Dark5, Dark6, Dark7, Dark8, Dark9, Dark10, Dark11\n\nRequired: False\nPosition: Named\nDefault value: Medium6\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Export-Excel/#-tabletotalsettings","title":"-TableTotalSettings","text":"<p>A HashTable in the form of either</p>"},{"location":"commands/Export-Excel/#-columnname-averagecountcountnumsmaxminnonestddevsumvarcustom-excel-function-starting-with","title":"- ColumnName = \"Average\"|\"Count\"|\"CountNums\"|\"Max\"|\"Min\"|\"None\"|\"StdDev\"|\"Sum\"|\"Var\"|\\&lt;Custom Excel function starting with \"=\"&gt;","text":"<p>ColumnName = @{       Function = \"Average\"|\"Count\"|\"CountNums\"|\"Max\"|\"Min\"|\"None\"|\"StdDev\"|\"Sum\"|\"Var\"|<pre><code>Type: Hashtable\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Export-Excel/#-title","title":"-Title","text":"<p>Text of a title to be placed in the top left cell.</p> <pre><code>Type: String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Export-Excel/#-titlebackgroundcolor","title":"-TitleBackgroundColor","text":"<p>Sets the cell background color for the title cell.</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Export-Excel/#-titlebold","title":"-TitleBold","text":"<p>Sets the title in boldface type.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Export-Excel/#-titlefillpattern","title":"-TitleFillPattern","text":"<p>Sets the fill pattern for the title cell.</p> <pre><code>Type: ExcelFillStyle\nParameter Sets: (All)\nAliases:\nAccepted values: None, Solid, DarkGray, MediumGray, LightGray, Gray125, Gray0625, DarkVertical, DarkHorizontal, DarkDown, DarkUp, DarkGrid, DarkTrellis, LightVertical, LightHorizontal, LightDown, LightUp, LightGrid, LightTrellis\n\nRequired: False\nPosition: Named\nDefault value: Solid\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Export-Excel/#-titlesize","title":"-TitleSize","text":"<p>Sets the point size for the title.</p> <pre><code>Type: Int32\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: 22\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Export-Excel/#-unhidesheet","title":"-UnHideSheet","text":"<p>Name(s) of Sheet(s) to reveal in the workbook, supports wildcards.</p> <pre><code>Type: String[]\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Export-Excel/#-worksheetname","title":"-WorksheetName","text":"<p>The name of a sheet within the workbook - \"Sheet1\" by default.</p> <pre><code>Type: String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: Sheet1\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Export-Excel/#commonparameters","title":"CommonParameters","text":"<p>This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters.</p>"},{"location":"commands/Export-Excel/#inputs","title":"INPUTS","text":""},{"location":"commands/Export-Excel/#outputs","title":"OUTPUTS","text":""},{"location":"commands/Export-Excel/#officeopenxmlexcelpackage","title":"OfficeOpenXml.ExcelPackage","text":""},{"location":"commands/Export-Excel/#notes","title":"NOTES","text":""},{"location":"commands/Export-Excel/#related-links","title":"RELATED LINKS","text":"<p>https://github.com/dfinke/ImportExcel</p>"},{"location":"commands/Get-ExcelColumnName/","title":"Get-ExcelColumnName","text":""},{"location":"commands/Get-ExcelColumnName/#synopsis","title":"SYNOPSIS","text":"<p>{{ Fill in the Synopsis }}</p>"},{"location":"commands/Get-ExcelColumnName/#syntax","title":"SYNTAX","text":"<pre><code>Get-ExcelColumnName [[-ColumnNumber] &lt;Object&gt;] [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"commands/Get-ExcelColumnName/#description","title":"DESCRIPTION","text":"<p>{{ Fill in the Description }}</p>"},{"location":"commands/Get-ExcelColumnName/#examples","title":"EXAMPLES","text":""},{"location":"commands/Get-ExcelColumnName/#example-1","title":"EXAMPLE 1","text":"<pre><code>PS C:\\&gt; {{ Add example code here }}\n</code></pre> <p>{{ Add example description here }}</p>"},{"location":"commands/Get-ExcelColumnName/#parameters","title":"PARAMETERS","text":""},{"location":"commands/Get-ExcelColumnName/#-columnnumber","title":"-ColumnNumber","text":"<p>{{ Fill ColumnNumber Description }}</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 0\nDefault value: None\nAccept pipeline input: True (ByValue)\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Get-ExcelColumnName/#commonparameters","title":"CommonParameters","text":"<p>This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters.</p>"},{"location":"commands/Get-ExcelColumnName/#inputs","title":"INPUTS","text":""},{"location":"commands/Get-ExcelColumnName/#systemobject","title":"System.Object","text":""},{"location":"commands/Get-ExcelColumnName/#outputs","title":"OUTPUTS","text":""},{"location":"commands/Get-ExcelColumnName/#systemobject_1","title":"System.Object","text":""},{"location":"commands/Get-ExcelColumnName/#notes","title":"NOTES","text":""},{"location":"commands/Get-ExcelColumnName/#related-links","title":"RELATED LINKS","text":""},{"location":"commands/Get-ExcelFileSchema/","title":"Get-ExcelFileSchema","text":""},{"location":"commands/Get-ExcelFileSchema/#synopsis","title":"SYNOPSIS","text":"<p>Gets the schema of an Excel file.</p>"},{"location":"commands/Get-ExcelFileSchema/#syntax","title":"SYNTAX","text":"<pre><code>Get-ExcelFileSchema [-Path] &lt;Object&gt; [-Compress] [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"commands/Get-ExcelFileSchema/#description","title":"DESCRIPTION","text":"<p>The Get-ExcelFileSchema function gets the schema of an Excel file by returning the property names of the first row of each worksheet in the file.</p>"},{"location":"commands/Get-ExcelFileSchema/#examples","title":"EXAMPLES","text":""},{"location":"commands/Get-ExcelFileSchema/#example-1","title":"EXAMPLE 1","text":"<pre><code>Get-ExcelFileSchema -Path .\\example.xlsx\n</code></pre>"},{"location":"commands/Get-ExcelFileSchema/#parameters","title":"PARAMETERS","text":""},{"location":"commands/Get-ExcelFileSchema/#-compress","title":"-Compress","text":"<p>Indicates whether to compress the json output.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Get-ExcelFileSchema/#-path","title":"-Path","text":"<p>Specifies the path to the Excel file.</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases: FullName\n\nRequired: True\nPosition: 1\nDefault value: None\nAccept pipeline input: True (ByPropertyName)\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Get-ExcelFileSchema/#commonparameters","title":"CommonParameters","text":"<p>This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters.</p>"},{"location":"commands/Get-ExcelFileSchema/#inputs","title":"INPUTS","text":""},{"location":"commands/Get-ExcelFileSchema/#outputs","title":"OUTPUTS","text":""},{"location":"commands/Get-ExcelFileSchema/#json","title":"Json","text":""},{"location":"commands/Get-ExcelFileSchema/#notes","title":"NOTES","text":""},{"location":"commands/Get-ExcelFileSchema/#related-links","title":"RELATED LINKS","text":""},{"location":"commands/Get-ExcelFileSummary/","title":"Get-ExcelFileSummary","text":""},{"location":"commands/Get-ExcelFileSummary/#synopsis","title":"SYNOPSIS","text":"<p>Gets summary information on an Excel file like number of rows, columns, and more</p>"},{"location":"commands/Get-ExcelFileSummary/#syntax","title":"SYNTAX","text":"<pre><code>Get-ExcelFileSummary [-Path] &lt;Object&gt; [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"commands/Get-ExcelFileSummary/#description","title":"DESCRIPTION","text":"<p>{{ Fill in the Description }}</p>"},{"location":"commands/Get-ExcelFileSummary/#examples","title":"EXAMPLES","text":""},{"location":"commands/Get-ExcelFileSummary/#example-1","title":"EXAMPLE 1","text":"<pre><code>PS C:\\&gt; {{ Add example code here }}\n</code></pre> <p>{{ Add example description here }}</p>"},{"location":"commands/Get-ExcelFileSummary/#parameters","title":"PARAMETERS","text":""},{"location":"commands/Get-ExcelFileSummary/#-path","title":"-Path","text":"<p>{{ Fill Path Description }}</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases: FullName\n\nRequired: True\nPosition: 1\nDefault value: None\nAccept pipeline input: True (ByPropertyName)\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Get-ExcelFileSummary/#commonparameters","title":"CommonParameters","text":"<p>This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters.</p>"},{"location":"commands/Get-ExcelFileSummary/#inputs","title":"INPUTS","text":""},{"location":"commands/Get-ExcelFileSummary/#outputs","title":"OUTPUTS","text":""},{"location":"commands/Get-ExcelFileSummary/#notes","title":"NOTES","text":""},{"location":"commands/Get-ExcelFileSummary/#related-links","title":"RELATED LINKS","text":""},{"location":"commands/Get-ExcelSheetDimensionAddress/","title":"Get-ExcelSheetDimensionAddress","text":""},{"location":"commands/Get-ExcelSheetDimensionAddress/#synopsis","title":"SYNOPSIS","text":"<p>Get the Excel address of the dimension of a sheet</p>"},{"location":"commands/Get-ExcelSheetDimensionAddress/#syntax","title":"SYNTAX","text":"<pre><code>Get-ExcelSheetDimensionAddress [-Worksheet] &lt;ExcelWorksheet&gt; [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"commands/Get-ExcelSheetDimensionAddress/#description","title":"DESCRIPTION","text":"<p>{{ Fill in the Description }}</p>"},{"location":"commands/Get-ExcelSheetDimensionAddress/#examples","title":"EXAMPLES","text":""},{"location":"commands/Get-ExcelSheetDimensionAddress/#example-1","title":"EXAMPLE 1","text":"<pre><code>Get-ExcelSheetDimensionAddress $excel.Sheet1\n</code></pre>"},{"location":"commands/Get-ExcelSheetDimensionAddress/#parameters","title":"PARAMETERS","text":""},{"location":"commands/Get-ExcelSheetDimensionAddress/#-worksheet","title":"-Worksheet","text":"<p>{{ Fill Worksheet Description }}</p> <pre><code>Type: ExcelWorksheet\nParameter Sets: (All)\nAliases:\n\nRequired: True\nPosition: 1\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Get-ExcelSheetDimensionAddress/#commonparameters","title":"CommonParameters","text":"<p>This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters.</p>"},{"location":"commands/Get-ExcelSheetDimensionAddress/#inputs","title":"INPUTS","text":""},{"location":"commands/Get-ExcelSheetDimensionAddress/#outputs","title":"OUTPUTS","text":""},{"location":"commands/Get-ExcelSheetDimensionAddress/#notes","title":"NOTES","text":""},{"location":"commands/Get-ExcelSheetDimensionAddress/#related-links","title":"RELATED LINKS","text":""},{"location":"commands/Get-ExcelSheetInfo/","title":"Get-ExcelSheetInfo","text":""},{"location":"commands/Get-ExcelSheetInfo/#synopsis","title":"SYNOPSIS","text":"<p>Get worksheet names and their indices of an Excel workbook.</p>"},{"location":"commands/Get-ExcelSheetInfo/#syntax","title":"SYNTAX","text":"<pre><code>Get-ExcelSheetInfo [-Path] &lt;Object&gt; [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"commands/Get-ExcelSheetInfo/#description","title":"DESCRIPTION","text":"<p>The Get-ExcelSheetInfo cmdlet gets worksheet names and their indices of an Excel workbook.</p>"},{"location":"commands/Get-ExcelSheetInfo/#examples","title":"EXAMPLES","text":""},{"location":"commands/Get-ExcelSheetInfo/#example-1","title":"EXAMPLE 1","text":"<pre><code>Get-ExcelSheetInfo .\\Test.xlsx\n</code></pre>"},{"location":"commands/Get-ExcelSheetInfo/#parameters","title":"PARAMETERS","text":""},{"location":"commands/Get-ExcelSheetInfo/#-path","title":"-Path","text":"<p>Specifies the path to the Excel file. (This parameter is required.)</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases: FullName\n\nRequired: True\nPosition: 0\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Get-ExcelSheetInfo/#commonparameters","title":"CommonParameters","text":"<p>This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters.</p>"},{"location":"commands/Get-ExcelSheetInfo/#inputs","title":"INPUTS","text":""},{"location":"commands/Get-ExcelSheetInfo/#outputs","title":"OUTPUTS","text":""},{"location":"commands/Get-ExcelSheetInfo/#notes","title":"NOTES","text":"<p>CHANGELOG 2016/01/07 Added Created by Johan Akerstrom (https://github.com/CosmosKey)</p>"},{"location":"commands/Get-ExcelSheetInfo/#related-links","title":"RELATED LINKS","text":"<p>https://github.com/dfinke/ImportExcel</p>"},{"location":"commands/Get-ExcelWorkbookInfo/","title":"Get-ExcelWorkbookInfo","text":""},{"location":"commands/Get-ExcelWorkbookInfo/#synopsis","title":"SYNOPSIS","text":"<p>Retrieve information of an Excel workbook.</p>"},{"location":"commands/Get-ExcelWorkbookInfo/#syntax","title":"SYNTAX","text":"<pre><code>Get-ExcelWorkbookInfo [-Path] &lt;String&gt; [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"commands/Get-ExcelWorkbookInfo/#description","title":"DESCRIPTION","text":"<p>The Get-ExcelWorkbookInfo cmdlet retrieves information (LastModifiedBy, LastPrinted, Created, Modified, ...) fron an Excel workbook. These are the same details that are visible in Windows Explorer when right clicking the Excel file, selecting Properties and check the Details tabpage.</p>"},{"location":"commands/Get-ExcelWorkbookInfo/#examples","title":"EXAMPLES","text":""},{"location":"commands/Get-ExcelWorkbookInfo/#example-1","title":"EXAMPLE 1","text":"<pre><code>Get-ExcelWorkbookInfo .\\Test.xlsx\n</code></pre> <p>CorePropertiesXml : #document Title : Subject : Author : Konica Minolta User Comments : Keywords : LastModifiedBy : Bond, James (London) GBR LastPrinted : 2017-01-21T12:36:11Z Created : 17/01/2017 13:51:32 Category : Status : ExtendedPropertiesXml : #document Application : Microsoft Excel HyperlinkBase : AppVersion : 14.0300 Company : Secret Service Manager : Modified : 10/02/2017 12:45:37 CustomPropertiesXml : #document</p>"},{"location":"commands/Get-ExcelWorkbookInfo/#parameters","title":"PARAMETERS","text":""},{"location":"commands/Get-ExcelWorkbookInfo/#-path","title":"-Path","text":"<p>Specifies the path to the Excel file. This parameter is required.</p> <pre><code>Type: String\nParameter Sets: (All)\nAliases: FullName\n\nRequired: True\nPosition: 0\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Get-ExcelWorkbookInfo/#commonparameters","title":"CommonParameters","text":"<p>This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters.</p>"},{"location":"commands/Get-ExcelWorkbookInfo/#inputs","title":"INPUTS","text":""},{"location":"commands/Get-ExcelWorkbookInfo/#outputs","title":"OUTPUTS","text":""},{"location":"commands/Get-ExcelWorkbookInfo/#notes","title":"NOTES","text":"<p>CHANGELOG 2016/01/07 Added Created by Johan Akerstrom (https://github.com/CosmosKey)</p>"},{"location":"commands/Get-ExcelWorkbookInfo/#related-links","title":"RELATED LINKS","text":"<p>https://github.com/dfinke/ImportExcel</p>"},{"location":"commands/Get-HtmlTable/","title":"Get-HtmlTable","text":""},{"location":"commands/Get-HtmlTable/#synopsis","title":"SYNOPSIS","text":"<p>{{ Fill in the Synopsis }}</p>"},{"location":"commands/Get-HtmlTable/#syntax","title":"SYNTAX","text":"<pre><code>Get-HtmlTable [-Url] &lt;Object&gt; [[-TableIndex] &lt;Object&gt;] [[-Header] &lt;Object&gt;] [[-FirstDataRow] &lt;Int32&gt;]\n [-UseDefaultCredentials] [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"commands/Get-HtmlTable/#description","title":"DESCRIPTION","text":"<p>{{ Fill in the Description }}</p>"},{"location":"commands/Get-HtmlTable/#examples","title":"EXAMPLES","text":""},{"location":"commands/Get-HtmlTable/#example-1","title":"EXAMPLE 1","text":"<pre><code>PS C:\\&gt; {{ Add example code here }}\n</code></pre> <p>{{ Add example description here }}</p>"},{"location":"commands/Get-HtmlTable/#parameters","title":"PARAMETERS","text":""},{"location":"commands/Get-HtmlTable/#-firstdatarow","title":"-FirstDataRow","text":"<p>{{ Fill FirstDataRow Description }}</p> <pre><code>Type: Int32\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 3\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Get-HtmlTable/#-header","title":"-Header","text":"<p>{{ Fill Header Description }}</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 2\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Get-HtmlTable/#-tableindex","title":"-TableIndex","text":"<p>{{ Fill TableIndex Description }}</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 1\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Get-HtmlTable/#-url","title":"-Url","text":"<p>{{ Fill Url Description }}</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: True\nPosition: 0\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Get-HtmlTable/#-usedefaultcredentials","title":"-UseDefaultCredentials","text":"<p>{{ Fill UseDefaultCredentials Description }}</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Get-HtmlTable/#commonparameters","title":"CommonParameters","text":"<p>This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters.</p>"},{"location":"commands/Get-HtmlTable/#inputs","title":"INPUTS","text":""},{"location":"commands/Get-HtmlTable/#none","title":"None","text":""},{"location":"commands/Get-HtmlTable/#outputs","title":"OUTPUTS","text":""},{"location":"commands/Get-HtmlTable/#systemobject","title":"System.Object","text":""},{"location":"commands/Get-HtmlTable/#notes","title":"NOTES","text":""},{"location":"commands/Get-HtmlTable/#related-links","title":"RELATED LINKS","text":""},{"location":"commands/Get-Range/","title":"Get-Range","text":""},{"location":"commands/Get-Range/#synopsis","title":"SYNOPSIS","text":"<p>{{ Fill in the Synopsis }}</p>"},{"location":"commands/Get-Range/#syntax","title":"SYNTAX","text":"<pre><code>Get-Range [[-Start] &lt;Object&gt;] [[-Stop] &lt;Object&gt;] [[-Step] &lt;Object&gt;] [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"commands/Get-Range/#description","title":"DESCRIPTION","text":"<p>{{ Fill in the Description }}</p>"},{"location":"commands/Get-Range/#examples","title":"EXAMPLES","text":""},{"location":"commands/Get-Range/#example-1","title":"EXAMPLE 1","text":"<pre><code>PS C:\\&gt; {{ Add example code here }}\n</code></pre> <p>{{ Add example description here }}</p>"},{"location":"commands/Get-Range/#parameters","title":"PARAMETERS","text":""},{"location":"commands/Get-Range/#-start","title":"-Start","text":"<p>{{ Fill Start Description }}</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 0\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Get-Range/#-step","title":"-Step","text":"<p>{{ Fill Step Description }}</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 2\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Get-Range/#-stop","title":"-Stop","text":"<p>{{ Fill Stop Description }}</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 1\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Get-Range/#commonparameters","title":"CommonParameters","text":"<p>This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters.</p>"},{"location":"commands/Get-Range/#inputs","title":"INPUTS","text":""},{"location":"commands/Get-Range/#none","title":"None","text":""},{"location":"commands/Get-Range/#outputs","title":"OUTPUTS","text":""},{"location":"commands/Get-Range/#systemobject","title":"System.Object","text":""},{"location":"commands/Get-Range/#notes","title":"NOTES","text":""},{"location":"commands/Get-Range/#related-links","title":"RELATED LINKS","text":""},{"location":"commands/Get-XYRange/","title":"Get-XYRange","text":""},{"location":"commands/Get-XYRange/#synopsis","title":"SYNOPSIS","text":"<p>{{ Fill in the Synopsis }}</p>"},{"location":"commands/Get-XYRange/#syntax","title":"SYNTAX","text":"<pre><code>Get-XYRange [[-TargetData] &lt;Object&gt;] [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"commands/Get-XYRange/#description","title":"DESCRIPTION","text":"<p>{{ Fill in the Description }}</p>"},{"location":"commands/Get-XYRange/#examples","title":"EXAMPLES","text":""},{"location":"commands/Get-XYRange/#example-1","title":"EXAMPLE 1","text":"<pre><code>PS C:\\&gt; {{ Add example code here }}\n</code></pre> <p>{{ Add example description here }}</p>"},{"location":"commands/Get-XYRange/#parameters","title":"PARAMETERS","text":""},{"location":"commands/Get-XYRange/#-targetdata","title":"-TargetData","text":"<p>{{ Fill TargetData Description }}</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 0\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Get-XYRange/#commonparameters","title":"CommonParameters","text":"<p>This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters.</p>"},{"location":"commands/Get-XYRange/#inputs","title":"INPUTS","text":""},{"location":"commands/Get-XYRange/#none","title":"None","text":""},{"location":"commands/Get-XYRange/#outputs","title":"OUTPUTS","text":""},{"location":"commands/Get-XYRange/#systemobject","title":"System.Object","text":""},{"location":"commands/Get-XYRange/#notes","title":"NOTES","text":""},{"location":"commands/Get-XYRange/#related-links","title":"RELATED LINKS","text":""},{"location":"commands/Import-Excel/","title":"Get-XYRange","text":""},{"location":"commands/Import-Excel/#synopsis","title":"SYNOPSIS","text":"<p>{{ Fill in the Synopsis }}</p>"},{"location":"commands/Import-Excel/#syntax","title":"SYNTAX","text":"<pre><code>Get-XYRange [[-TargetData] &lt;Object&gt;] [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"commands/Import-Excel/#description","title":"DESCRIPTION","text":"<p>{{ Fill in the Description }}</p>"},{"location":"commands/Import-Excel/#examples","title":"EXAMPLES","text":""},{"location":"commands/Import-Excel/#example-1","title":"EXAMPLE 1","text":"<pre><code>PS C:\\&gt; {{ Add example code here }}\n</code></pre> <p>{{ Add example description here }}</p>"},{"location":"commands/Import-Excel/#parameters","title":"PARAMETERS","text":""},{"location":"commands/Import-Excel/#-targetdata","title":"-TargetData","text":"<p>{{ Fill TargetData Description }}</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 0\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Import-Excel/#commonparameters","title":"CommonParameters","text":"<p>This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters.</p>"},{"location":"commands/Import-Excel/#inputs","title":"INPUTS","text":""},{"location":"commands/Import-Excel/#none","title":"None","text":""},{"location":"commands/Import-Excel/#outputs","title":"OUTPUTS","text":""},{"location":"commands/Import-Excel/#systemobject","title":"System.Object","text":""},{"location":"commands/Import-Excel/#notes","title":"NOTES","text":""},{"location":"commands/Import-Excel/#related-links","title":"RELATED LINKS","text":""},{"location":"commands/Import-Html/","title":"Import-Html","text":""},{"location":"commands/Import-Html/#synopsis","title":"SYNOPSIS","text":"<p>{{ Fill in the Synopsis }}</p>"},{"location":"commands/Import-Html/#syntax","title":"SYNTAX","text":"<pre><code>Import-Html [[-Url] &lt;Object&gt;] [[-Index] &lt;Int32&gt;] [[-Header] &lt;Object&gt;] [[-FirstDataRow] &lt;Int32&gt;]\n [-UseDefaultCredentials] [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"commands/Import-Html/#description","title":"DESCRIPTION","text":"<p>{{ Fill in the Description }}</p>"},{"location":"commands/Import-Html/#examples","title":"EXAMPLES","text":""},{"location":"commands/Import-Html/#example-1","title":"EXAMPLE 1","text":"<pre><code>PS C:\\&gt; {{ Add example code here }}\n</code></pre> <p>{{ Add example description here }}</p>"},{"location":"commands/Import-Html/#parameters","title":"PARAMETERS","text":""},{"location":"commands/Import-Html/#-firstdatarow","title":"-FirstDataRow","text":"<p>{{ Fill FirstDataRow Description }}</p> <pre><code>Type: Int32\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 3\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Import-Html/#-header","title":"-Header","text":"<p>{{ Fill Header Description }}</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 2\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Import-Html/#-index","title":"-Index","text":"<p>{{ Fill Index Description }}</p> <pre><code>Type: Int32\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 1\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Import-Html/#-url","title":"-Url","text":"<p>{{ Fill Url Description }}</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 0\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Import-Html/#-usedefaultcredentials","title":"-UseDefaultCredentials","text":"<p>{{ Fill UseDefaultCredentials Description }}</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Import-Html/#commonparameters","title":"CommonParameters","text":"<p>This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters.</p>"},{"location":"commands/Import-Html/#inputs","title":"INPUTS","text":""},{"location":"commands/Import-Html/#none","title":"None","text":""},{"location":"commands/Import-Html/#outputs","title":"OUTPUTS","text":""},{"location":"commands/Import-Html/#systemobject","title":"System.Object","text":""},{"location":"commands/Import-Html/#notes","title":"NOTES","text":""},{"location":"commands/Import-Html/#related-links","title":"RELATED LINKS","text":""},{"location":"commands/Import-UPS/","title":"Import-UPS","text":""},{"location":"commands/Import-UPS/#synopsis","title":"SYNOPSIS","text":"<p>{{ Fill in the Synopsis }}</p>"},{"location":"commands/Import-UPS/#syntax","title":"SYNTAX","text":"<pre><code>Import-UPS [[-TrackingNumber] &lt;Object&gt;] [-UseDefaultCredentials] [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"commands/Import-UPS/#description","title":"DESCRIPTION","text":"<p>{{ Fill in the Description }}</p>"},{"location":"commands/Import-UPS/#examples","title":"EXAMPLES","text":""},{"location":"commands/Import-UPS/#example-1","title":"EXAMPLE 1","text":"<pre><code>PS C:\\&gt; {{ Add example code here }}\n</code></pre> <p>{{ Add example description here }}</p>"},{"location":"commands/Import-UPS/#parameters","title":"PARAMETERS","text":""},{"location":"commands/Import-UPS/#-trackingnumber","title":"-TrackingNumber","text":"<p>{{ Fill TrackingNumber Description }}</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 0\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Import-UPS/#-usedefaultcredentials","title":"-UseDefaultCredentials","text":"<p>{{ Fill UseDefaultCredentials Description }}</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Import-UPS/#commonparameters","title":"CommonParameters","text":"<p>This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters.</p>"},{"location":"commands/Import-UPS/#inputs","title":"INPUTS","text":""},{"location":"commands/Import-UPS/#none","title":"None","text":""},{"location":"commands/Import-UPS/#outputs","title":"OUTPUTS","text":""},{"location":"commands/Import-UPS/#systemobject","title":"System.Object","text":""},{"location":"commands/Import-UPS/#notes","title":"NOTES","text":""},{"location":"commands/Import-UPS/#related-links","title":"RELATED LINKS","text":""},{"location":"commands/Import-USPS/","title":"Import-USPS","text":""},{"location":"commands/Import-USPS/#synopsis","title":"SYNOPSIS","text":"<p>{{ Fill in the Synopsis }}</p>"},{"location":"commands/Import-USPS/#syntax","title":"SYNTAX","text":"<pre><code>Import-USPS [[-TrackingNumber] &lt;Object&gt;] [-UseDefaultCredentials] [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"commands/Import-USPS/#description","title":"DESCRIPTION","text":"<p>{{ Fill in the Description }}</p>"},{"location":"commands/Import-USPS/#examples","title":"EXAMPLES","text":""},{"location":"commands/Import-USPS/#example-1","title":"EXAMPLE 1","text":"<pre><code>PS C:\\&gt; {{ Add example code here }}\n</code></pre> <p>{{ Add example description here }}</p>"},{"location":"commands/Import-USPS/#parameters","title":"PARAMETERS","text":""},{"location":"commands/Import-USPS/#-trackingnumber","title":"-TrackingNumber","text":"<p>{{ Fill TrackingNumber Description }}</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 0\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Import-USPS/#-usedefaultcredentials","title":"-UseDefaultCredentials","text":"<p>{{ Fill UseDefaultCredentials Description }}</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Import-USPS/#commonparameters","title":"CommonParameters","text":"<p>This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters.</p>"},{"location":"commands/Import-USPS/#inputs","title":"INPUTS","text":""},{"location":"commands/Import-USPS/#none","title":"None","text":""},{"location":"commands/Import-USPS/#outputs","title":"OUTPUTS","text":""},{"location":"commands/Import-USPS/#systemobject","title":"System.Object","text":""},{"location":"commands/Import-USPS/#notes","title":"NOTES","text":""},{"location":"commands/Import-USPS/#related-links","title":"RELATED LINKS","text":""},{"location":"commands/Invoke-ExcelQuery/","title":"Invoke-ExcelQuery","text":""},{"location":"commands/Invoke-ExcelQuery/#synopsis","title":"SYNOPSIS","text":"<p>Helper method for executing Read-OleDbData with some basic defaults.</p> <p>For additional help, see documentation for Read-OleDbData cmdlet.</p>"},{"location":"commands/Invoke-ExcelQuery/#syntax","title":"SYNTAX","text":"<pre><code>Invoke-ExcelQuery [-Path] &lt;String&gt; [-Query] &lt;String&gt; [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"commands/Invoke-ExcelQuery/#description","title":"DESCRIPTION","text":"<p>Uses Read-OleDbData to execute a sql statement against a xlsx file. For finer grained control over the interaction, you may use that cmdlet. This cmdlet assumes a file path will be passed in and the connection string will be built with no headers and treating all results as text.</p> <p>Running this command is equivalent to running the following:</p> <p>$FullName = (Get-ChildItem $Path).FullName Read-OleDbData `     -ConnectionString \"Provider=Microsoft.ACE.OLEDB.12.0;Data Source=$FullName;Extended Properties='Excel 12.0 Xml;HDR=NO;IMEX=1;'\" `     -SqlStatement $Query</p> <p>Note that this command uses the MICROSOFT.ACE.OLEDB provider and will not work without it.</p> <p>If needed, please download the appropriate package from https://www.microsoft.com/en-us/download/details.aspx?id=54920.</p>"},{"location":"commands/Invoke-ExcelQuery/#examples","title":"EXAMPLES","text":""},{"location":"commands/Invoke-ExcelQuery/#example-1","title":"EXAMPLE 1","text":"<pre><code>Invoke-ExcelQuery .\\test.xlsx 'select ROUND(F1) as [A1] from [sheet3$A1:A1]'\n</code></pre>"},{"location":"commands/Invoke-ExcelQuery/#example-2","title":"EXAMPLE 2","text":"<pre><code>$Path = (Get-ChildItem 'test.xlsx').FullName\n</code></pre> <p>$Query = \"select ROUND(F1) as [A] from [sheet1$A1:A1]\" Read-XlsxUsingOleDb -Path $Path -Query $Query</p>"},{"location":"commands/Invoke-ExcelQuery/#example-3","title":"EXAMPLE 3","text":"<pre><code>$ReadDataArgs = @{\n</code></pre> <p>Path = .\\test.xlsx     Query = Get-Content query.sql -Raw } $Results = Invoke-ExcelQuery @ReadDataArgs</p>"},{"location":"commands/Invoke-ExcelQuery/#parameters","title":"PARAMETERS","text":""},{"location":"commands/Invoke-ExcelQuery/#-path","title":"-Path","text":"<p>The path to the file to open.</p> <pre><code>Type: String\nParameter Sets: (All)\nAliases:\n\nRequired: True\nPosition: 1\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Invoke-ExcelQuery/#-query","title":"-Query","text":"<p>var name consistent with Import-Excel var name consistent with Invoke-Sqlcmd</p> <pre><code>Type: String\nParameter Sets: (All)\nAliases:\n\nRequired: True\nPosition: 2\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Invoke-ExcelQuery/#commonparameters","title":"CommonParameters","text":"<p>This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters.</p>"},{"location":"commands/Invoke-ExcelQuery/#inputs","title":"INPUTS","text":""},{"location":"commands/Invoke-ExcelQuery/#outputs","title":"OUTPUTS","text":""},{"location":"commands/Invoke-ExcelQuery/#notes","title":"NOTES","text":""},{"location":"commands/Invoke-ExcelQuery/#related-links","title":"RELATED LINKS","text":""},{"location":"commands/Invoke-Sum/","title":"Invoke-Sum","text":""},{"location":"commands/Invoke-Sum/#synopsis","title":"SYNOPSIS","text":"<p>{{ Fill in the Synopsis }}</p>"},{"location":"commands/Invoke-Sum/#syntax","title":"SYNTAX","text":"<pre><code>Invoke-Sum [[-Data] &lt;Object&gt;] [[-Dimension] &lt;Object&gt;] [[-Measure] &lt;Object&gt;] [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"commands/Invoke-Sum/#description","title":"DESCRIPTION","text":"<p>{{ Fill in the Description }}</p>"},{"location":"commands/Invoke-Sum/#examples","title":"EXAMPLES","text":""},{"location":"commands/Invoke-Sum/#example-1","title":"EXAMPLE 1","text":"<pre><code>PS C:\\&gt; {{ Add example code here }}\n</code></pre> <p>{{ Add example description here }}</p>"},{"location":"commands/Invoke-Sum/#parameters","title":"PARAMETERS","text":""},{"location":"commands/Invoke-Sum/#-data","title":"-Data","text":"<p>{{ Fill Data Description }}</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 0\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Invoke-Sum/#-dimension","title":"-Dimension","text":"<p>{{ Fill Dimension Description }}</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 1\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Invoke-Sum/#-measure","title":"-Measure","text":"<p>{{ Fill Measure Description }}</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 2\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Invoke-Sum/#commonparameters","title":"CommonParameters","text":"<p>This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters.</p>"},{"location":"commands/Invoke-Sum/#inputs","title":"INPUTS","text":""},{"location":"commands/Invoke-Sum/#none","title":"None","text":""},{"location":"commands/Invoke-Sum/#outputs","title":"OUTPUTS","text":""},{"location":"commands/Invoke-Sum/#systemobject","title":"System.Object","text":""},{"location":"commands/Invoke-Sum/#notes","title":"NOTES","text":""},{"location":"commands/Invoke-Sum/#related-links","title":"RELATED LINKS","text":""},{"location":"commands/Join-Worksheet/","title":"Join-Worksheet","text":""},{"location":"commands/Join-Worksheet/#synopsis","title":"SYNOPSIS","text":"<p>Combines data on all the sheets in an Excel worksheet onto a single sheet.</p>"},{"location":"commands/Join-Worksheet/#syntax","title":"SYNTAX","text":""},{"location":"commands/Join-Worksheet/#default-default","title":"Default (Default)","text":"<pre><code>Join-Worksheet [[-Path] &lt;String&gt;] [-WorksheetName &lt;Object&gt;] [-Clearsheet] [-NoHeader] [-FromLabel &lt;String&gt;]\n [-LabelBlocks] [-AutoSize] [-FreezeTopRow] [-FreezeFirstColumn] [-FreezeTopRowFirstColumn]\n [-FreezePane &lt;Int32[]&gt;] [-AutoFilter] [-BoldTopRow] [-HideSource] [-Title &lt;String&gt;]\n [-TitleFillPattern &lt;ExcelFillStyle&gt;] [-TitleBackgroundColor &lt;Object&gt;] [-TitleBold] [-TitleSize &lt;Int32&gt;]\n [-PivotTableDefinition &lt;Hashtable&gt;] [-ExcelChartDefinition &lt;Object[]&gt;] [-ConditionalFormat &lt;Object[]&gt;]\n [-ConditionalText &lt;Object[]&gt;] [-AutoNameRange] [-RangeName &lt;String&gt;] [-ReturnRange] [-Show] [-PassThru]\n [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"commands/Join-Worksheet/#table","title":"Table","text":"<pre><code>Join-Worksheet [[-Path] &lt;String&gt;] [-WorksheetName &lt;Object&gt;] [-Clearsheet] [-NoHeader] [-FromLabel &lt;String&gt;]\n [-LabelBlocks] [-AutoSize] [-FreezeTopRow] [-FreezeFirstColumn] [-FreezeTopRowFirstColumn]\n [-FreezePane &lt;Int32[]&gt;] [-BoldTopRow] [-HideSource] [-Title &lt;String&gt;] [-TitleFillPattern &lt;ExcelFillStyle&gt;]\n [-TitleBackgroundColor &lt;Object&gt;] [-TitleBold] [-TitleSize &lt;Int32&gt;] [-PivotTableDefinition &lt;Hashtable&gt;]\n [-ExcelChartDefinition &lt;Object[]&gt;] [-ConditionalFormat &lt;Object[]&gt;] [-ConditionalText &lt;Object[]&gt;]\n [-AutoNameRange] [-RangeName &lt;String&gt;] -TableName &lt;String&gt; [-TableStyle &lt;TableStyles&gt;] [-ReturnRange] [-Show]\n [-PassThru] [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"commands/Join-Worksheet/#packagetable","title":"PackageTable","text":"<pre><code>Join-Worksheet -ExcelPackage &lt;ExcelPackage&gt; [-WorksheetName &lt;Object&gt;] [-Clearsheet] [-NoHeader]\n [-FromLabel &lt;String&gt;] [-LabelBlocks] [-AutoSize] [-FreezeTopRow] [-FreezeFirstColumn]\n [-FreezeTopRowFirstColumn] [-FreezePane &lt;Int32[]&gt;] [-BoldTopRow] [-HideSource] [-Title &lt;String&gt;]\n [-TitleFillPattern &lt;ExcelFillStyle&gt;] [-TitleBackgroundColor &lt;Object&gt;] [-TitleBold] [-TitleSize &lt;Int32&gt;]\n [-PivotTableDefinition &lt;Hashtable&gt;] [-ExcelChartDefinition &lt;Object[]&gt;] [-ConditionalFormat &lt;Object[]&gt;]\n [-ConditionalText &lt;Object[]&gt;] [-AutoNameRange] [-RangeName &lt;String&gt;] -TableName &lt;String&gt;\n [-TableStyle &lt;TableStyles&gt;] [-ReturnRange] [-Show] [-PassThru] [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"commands/Join-Worksheet/#packagedefault","title":"PackageDefault","text":"<pre><code>Join-Worksheet -ExcelPackage &lt;ExcelPackage&gt; [-WorksheetName &lt;Object&gt;] [-Clearsheet] [-NoHeader]\n [-FromLabel &lt;String&gt;] [-LabelBlocks] [-AutoSize] [-FreezeTopRow] [-FreezeFirstColumn]\n [-FreezeTopRowFirstColumn] [-FreezePane &lt;Int32[]&gt;] [-AutoFilter] [-BoldTopRow] [-HideSource] [-Title &lt;String&gt;]\n [-TitleFillPattern &lt;ExcelFillStyle&gt;] [-TitleBackgroundColor &lt;Object&gt;] [-TitleBold] [-TitleSize &lt;Int32&gt;]\n [-PivotTableDefinition &lt;Hashtable&gt;] [-ExcelChartDefinition &lt;Object[]&gt;] [-ConditionalFormat &lt;Object[]&gt;]\n [-ConditionalText &lt;Object[]&gt;] [-AutoNameRange] [-RangeName &lt;String&gt;] [-ReturnRange] [-Show] [-PassThru]\n [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"commands/Join-Worksheet/#description","title":"DESCRIPTION","text":"<p>Join-Worksheet can work in two main ways, either</p> <p>Combining data which has the same layout from many pages into one, or Combining pages which have nothing in common. In the former case the header row is copied from the first sheet and, by default, each row of data is labelled with the name of the sheet it came from.</p> <p>In the latter case -NoHeader is specified, and each copied block can have the sheet it came from placed above it as a title.</p>"},{"location":"commands/Join-Worksheet/#examples","title":"EXAMPLES","text":""},{"location":"commands/Join-Worksheet/#example-1","title":"EXAMPLE 1","text":"<pre><code>PS\\&gt; foreach ($computerName in @('Server1', 'Server2', 'Server3', 'Server4')) {\n    Get-Service -ComputerName $computerName |\n        Select-Object -Property Status, Name, DisplayName, StartType |\n            Export-Excel -Path .\\test.xlsx -WorkSheetname $computerName -AutoSize\n}\nPS\\&gt; $ptDef = New-PivotTableDefinition -PivotTableName \"Pivot1\" -SourceWorkSheet \"Combined\" -PivotRows \"Status\" -PivotFilter \"MachineName\" -PivotData @{Status='Count'} -IncludePivotChart -ChartType BarClustered3D\nPS\\&gt; Join-Worksheet -Path .\\test.xlsx -WorkSheetName combined -FromLabel \"MachineName\" -HideSource-AutoSize -FreezeTopRow -BoldTopRow -PivotTableDefinition $pt -Show\n</code></pre> <p>The foreach command gets a list of services running on four servers and exports each list to its own page in Test.xlsx. And $PtDef=... creates a definition for a PivotTable.</p> <p>The Join-Worksheet command uses the same file and merges the results into a sheet named \"Combined\". It sets a column header of \"Machinename\", this column will contain the name of the sheet the data was copied from; after copying the data to the sheet \"Combined\", the other sheets will be hidden. Join-Worksheet finishes by calling Export-Excel to AutoSize cells, freeze the top row and make it bold and add thePivotTable.</p>"},{"location":"commands/Join-Worksheet/#example-2","title":"EXAMPLE 2","text":"<pre><code>PS\\&gt; Get-CimInstance -ClassName win32_logicaldisk |\n        Select-Object -Property DeviceId,VolumeName, Size,Freespace |\n            Export-Excel -Path \"$env:computerName.xlsx\" -WorkSheetname Volumes -NumberFormat \"0,000\"\nPS\\&gt; Get-NetAdapter| Select-Object Name,InterfaceDescription,MacAddress,LinkSpeed |\n          Export-Excel -Path \"$env:COMPUTERNAME.xlsx\" -WorkSheetname NetAdapter\nPS\\&gt; Join-Worksheet -Path \"$env:COMPUTERNAME.xlsx\"-WorkSheetName Summary -Title \"Summary\" -TitleBold -TitleSize 22 -NoHeader -LabelBlocks -AutoSize -HideSource -show\n</code></pre> <p>The first two commands get logical-disk and network-card information; each type is exported to its own sheet in a workbook.</p> <p>The Join-Worksheet command copies both onto a page named \"Summary\".Because the data is dissimilar, -NoHeader is specified, ensuring the whole of each page is copied. Specifying -LabelBlocks causes each sheet's name to become a title on the summary page above the copied data. The source data is hidden, a title is added in 22 point boldface and the columns are sized to fit the data.</p>"},{"location":"commands/Join-Worksheet/#parameters","title":"PARAMETERS","text":""},{"location":"commands/Join-Worksheet/#-autofilter","title":"-AutoFilter","text":"<p>Enables the Excel filter on the headers of the combined sheet.</p> <pre><code>Type: SwitchParameter\nParameter Sets: Default, PackageDefault\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Join-Worksheet/#-autonamerange","title":"-AutoNameRange","text":"<p>Makes each column a named range.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Join-Worksheet/#-autosize","title":"-AutoSize","text":"<p>Sets the width of the Excel columns to display all the data in their cells.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Join-Worksheet/#-boldtoprow","title":"-BoldTopRow","text":"<p>Makes the top row boldface.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Join-Worksheet/#-clearsheet","title":"-Clearsheet","text":"<p>If specified ,any pre-existing target for the joined data will be deleted and re-created; otherwise data will be appended on this sheet.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Join-Worksheet/#-conditionalformat","title":"-ConditionalFormat","text":"<p>One or more conditional formatting rules defined with New-ConditionalFormattingIconSet.</p> <pre><code>Type: Object[]\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Join-Worksheet/#-conditionaltext","title":"-ConditionalText","text":"<p>Applies a Conditional formatting rule defined with New-ConditionalText.</p> <pre><code>Type: Object[]\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Join-Worksheet/#-excelchartdefinition","title":"-ExcelChartDefinition","text":"<p>A hashtable containing ChartType, Title, NoLegend, ShowCategory, ShowPercent, Yrange, Xrange and SeriesHeader for one or more [non-pivot] charts.</p> <pre><code>Type: Object[]\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Join-Worksheet/#-excelpackage","title":"-ExcelPackage","text":"<p>An object representing an Excel Package - either from Open-ExcelPackage or specifying -PassThru to Export-Excel.</p> <pre><code>Type: ExcelPackage\nParameter Sets: PackageTable, PackageDefault\nAliases:\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Join-Worksheet/#-freezefirstcolumn","title":"-FreezeFirstColumn","text":"<p>Freezes titles etc. in the left column.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Join-Worksheet/#-freezepane","title":"-FreezePane","text":"<p>Freezes panes at specified coordinates (in the formRowNumber , ColumnNumber).</p> <pre><code>Type: Int32[]\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Join-Worksheet/#-freezetoprow","title":"-FreezeTopRow","text":"<p>Freezes headers etc. in the top row.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Join-Worksheet/#-freezetoprowfirstcolumn","title":"-FreezeTopRowFirstColumn","text":"<p>Freezes top row and left column (equivalent to Freeze pane 2,2 ).</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Join-Worksheet/#-fromlabel","title":"-FromLabel","text":"<p>If -NoHeader is NOT specified, then rows of data will be labeled with the name of the sheet they came from. FromLabel is the header for this column. If it is null or empty, the labels will be omitted.</p> <pre><code>Type: String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: From\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Join-Worksheet/#-hidesource","title":"-HideSource","text":"<p>If specified, hides the sheets that the data is copied from.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Join-Worksheet/#-labelblocks","title":"-LabelBlocks","text":"<p>If specified, the copied blocks of data will have the name of the sheet they were copied from inserted above them as a title.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Join-Worksheet/#-noheader","title":"-NoHeader","text":"<p>Join-Worksheet assumes each sheet has identical headers and the headers should be copied to the target sheet, unless -NoHeader is specified.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Join-Worksheet/#-passthru","title":"-PassThru","text":"<p>If specified, an object representing the unsaved Excel package will be returned, it then needs to be saved.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Join-Worksheet/#-path","title":"-Path","text":"<p>Path to a new or existing .XLSX file.</p> <pre><code>Type: String\nParameter Sets: Default, Table\nAliases:\n\nRequired: False\nPosition: 0\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Join-Worksheet/#-pivottabledefinition","title":"-PivotTableDefinition","text":"<p>Hashtable(s) with Sheet PivotRows, PivotColumns, PivotData, IncludePivotChart and ChartType values to specify a definition for one or morePivotTable(s).</p> <pre><code>Type: Hashtable\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Join-Worksheet/#-rangename","title":"-RangeName","text":"<p>Makes the data in the worksheet a named range.</p> <pre><code>Type: String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Join-Worksheet/#-returnrange","title":"-ReturnRange","text":"<p>If specified, returns the range of cells in the combined sheet, in the format \"A1:Z100\".</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Join-Worksheet/#-show","title":"-Show","text":"<p>Opens the Excel file immediately after creation. Convenient for viewing the results instantly without having to search for the file first.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Join-Worksheet/#-tablename","title":"-TableName","text":"<p>Makes the data in the worksheet a table with a name and applies a style to it. Name must not contain spaces.</p> <pre><code>Type: String\nParameter Sets: Table, PackageTable\nAliases:\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Join-Worksheet/#-tablestyle","title":"-TableStyle","text":"<p>Selects the style for the named table - defaults to \"Medium6\".</p> <pre><code>Type: TableStyles\nParameter Sets: Table, PackageTable\nAliases:\nAccepted values: None, Custom, Light1, Light2, Light3, Light4, Light5, Light6, Light7, Light8, Light9, Light10, Light11, Light12, Light13, Light14, Light15, Light16, Light17, Light18, Light19, Light20, Light21, Medium1, Medium2, Medium3, Medium4, Medium5, Medium6, Medium7, Medium8, Medium9, Medium10, Medium11, Medium12, Medium13, Medium14, Medium15, Medium16, Medium17, Medium18, Medium19, Medium20, Medium21, Medium22, Medium23, Medium24, Medium25, Medium26, Medium27, Medium28, Dark1, Dark2, Dark3, Dark4, Dark5, Dark6, Dark7, Dark8, Dark9, Dark10, Dark11\n\nRequired: False\nPosition: Named\nDefault value: Medium6\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Join-Worksheet/#-title","title":"-Title","text":"<p>Text of a title to be placed in Cell A1.</p> <pre><code>Type: String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Join-Worksheet/#-titlebackgroundcolor","title":"-TitleBackgroundColor","text":"<p>Sets the cell background color for the title cell.</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Join-Worksheet/#-titlebold","title":"-TitleBold","text":"<p>Sets the title in boldface type.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Join-Worksheet/#-titlefillpattern","title":"-TitleFillPattern","text":"<p>Sets the fill pattern for the title cell.</p> <pre><code>Type: ExcelFillStyle\nParameter Sets: (All)\nAliases:\nAccepted values: None, Solid, DarkGray, MediumGray, LightGray, Gray125, Gray0625, DarkVertical, DarkHorizontal, DarkDown, DarkUp, DarkGrid, DarkTrellis, LightVertical, LightHorizontal, LightDown, LightUp, LightGrid, LightTrellis\n\nRequired: False\nPosition: Named\nDefault value: Solid\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Join-Worksheet/#-titlesize","title":"-TitleSize","text":"<p>Sets the point size for the title.</p> <pre><code>Type: Int32\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: 22\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Join-Worksheet/#-worksheetname","title":"-WorksheetName","text":"<p>The name of a sheet within the workbook where the other sheets will be joined together - \"Combined\" by default.</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: Combined\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Join-Worksheet/#commonparameters","title":"CommonParameters","text":"<p>This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters.</p>"},{"location":"commands/Join-Worksheet/#inputs","title":"INPUTS","text":""},{"location":"commands/Join-Worksheet/#outputs","title":"OUTPUTS","text":""},{"location":"commands/Join-Worksheet/#notes","title":"NOTES","text":""},{"location":"commands/Join-Worksheet/#related-links","title":"RELATED LINKS","text":""},{"location":"commands/LineChart/","title":"LineChart","text":""},{"location":"commands/LineChart/#synopsis","title":"SYNOPSIS","text":"<p>{{ Fill in the Synopsis }}</p>"},{"location":"commands/LineChart/#syntax","title":"SYNTAX","text":"<pre><code>LineChart [[-targetData] &lt;Object&gt;] [[-title] &lt;Object&gt;] [[-ChartType] &lt;eChartType&gt;] [-NoLegend] [-ShowCategory]\n [-ShowPercent] [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"commands/LineChart/#description","title":"DESCRIPTION","text":"<p>{{ Fill in the Description }}</p>"},{"location":"commands/LineChart/#examples","title":"EXAMPLES","text":""},{"location":"commands/LineChart/#example-1","title":"EXAMPLE 1","text":"<pre><code>PS C:\\&gt; {{ Add example code here }}\n</code></pre> <p>{{ Add example description here }}</p>"},{"location":"commands/LineChart/#parameters","title":"PARAMETERS","text":""},{"location":"commands/LineChart/#-charttype","title":"-ChartType","text":"<p>{{ Fill ChartType Description }}</p> <pre><code>Type: eChartType\nParameter Sets: (All)\nAliases:\nAccepted values: Area, Line, Pie, Bubble, ColumnClustered, ColumnStacked, ColumnStacked100, ColumnClustered3D, ColumnStacked3D, ColumnStacked1003D, BarClustered, BarStacked, BarStacked100, BarClustered3D, BarStacked3D, BarStacked1003D, LineStacked, LineStacked100, LineMarkers, LineMarkersStacked, LineMarkersStacked100, PieOfPie, PieExploded, PieExploded3D, BarOfPie, XYScatterSmooth, XYScatterSmoothNoMarkers, XYScatterLines, XYScatterLinesNoMarkers, AreaStacked, AreaStacked100, AreaStacked3D, AreaStacked1003D, DoughnutExploded, RadarMarkers, RadarFilled, Surface, SurfaceWireframe, SurfaceTopView, SurfaceTopViewWireframe, Bubble3DEffect, StockHLC, StockOHLC, StockVHLC, StockVOHLC, CylinderColClustered, CylinderColStacked, CylinderColStacked100, CylinderBarClustered, CylinderBarStacked, CylinderBarStacked100, CylinderCol, ConeColClustered, ConeColStacked, ConeColStacked100, ConeBarClustered, ConeBarStacked, ConeBarStacked100, ConeCol, PyramidColClustered, PyramidColStacked, PyramidColStacked100, PyramidBarClustered, PyramidBarStacked, PyramidBarStacked100, PyramidCol, XYScatter, Radar, Doughnut, Pie3D, Line3D, Column3D, Area3D\n\nRequired: False\nPosition: 2\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/LineChart/#-nolegend","title":"-NoLegend","text":"<p>{{ Fill NoLegend Description }}</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/LineChart/#-showcategory","title":"-ShowCategory","text":"<p>{{ Fill ShowCategory Description }}</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/LineChart/#-showpercent","title":"-ShowPercent","text":"<p>{{ Fill ShowPercent Description }}</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/LineChart/#-targetdata","title":"-targetData","text":"<p>{{ Fill targetData Description }}</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 0\nDefault value: None\nAccept pipeline input: True (ByValue)\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/LineChart/#-title","title":"-title","text":"<p>{{ Fill title Description }}</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 1\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/LineChart/#commonparameters","title":"CommonParameters","text":"<p>This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters.</p>"},{"location":"commands/LineChart/#inputs","title":"INPUTS","text":""},{"location":"commands/LineChart/#systemobject","title":"System.Object","text":""},{"location":"commands/LineChart/#outputs","title":"OUTPUTS","text":""},{"location":"commands/LineChart/#systemobject_1","title":"System.Object","text":""},{"location":"commands/LineChart/#notes","title":"NOTES","text":""},{"location":"commands/LineChart/#related-links","title":"RELATED LINKS","text":""},{"location":"commands/Merge-MultipleSheets/","title":"Merge-MultipleSheets","text":""},{"location":"commands/Merge-MultipleSheets/#synopsis","title":"SYNOPSIS","text":"<p>Merges Worksheets into a single Worksheet with differences marked up.</p>"},{"location":"commands/Merge-MultipleSheets/#syntax","title":"SYNTAX","text":"<pre><code>Merge-MultipleSheets [-Path] &lt;Object&gt; [[-Startrow] &lt;Int32&gt;] [[-Headername] &lt;String[]&gt;] [-NoHeader]\n [[-WorksheetName] &lt;Object&gt;] [[-OutputFile] &lt;Object&gt;] [[-OutputSheetName] &lt;Object&gt;] [[-Property] &lt;Object&gt;]\n [[-ExcludeProperty] &lt;Object&gt;] [[-Key] &lt;Object&gt;] [[-KeyFontColor] &lt;Object&gt;] [[-ChangeBackgroundColor] &lt;Object&gt;]\n [[-DeleteBackgroundColor] &lt;Object&gt;] [[-AddBackgroundColor] &lt;Object&gt;] [-HideRowNumbers] [-Passthru] [-Show]\n [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"commands/Merge-MultipleSheets/#description","title":"DESCRIPTION","text":"<p>The Merge Worksheet command combines two sheets. Merge-MultipleSheets is designed to merge more than two.</p> <p>If asked to merge sheets A,B,C which contain Services, with a Name, Displayname and Start mode, where \"Name\" is treated as the key, Merge-MultipleSheets:</p> <ul> <li>Calls Merge-Worksheet to merge \"Name\", \"Displayname\" and \"Startmode\" from sheets A and C;  the result has column headings  \"_Row\", \"Name\", \"DisplayName\", \"Startmode\", \"C-DisplayName\", \"C-StartMode\", \"C-Is\" and \"C-Row\".</li> <li>Calls Merge-Worksheet again passing it the intermediate result and sheet B, comparing \"Name\", \"Displayname\" and \"Start mode\" columns on each side, and gets a result with columns \"_Row\", \"Name\", \"DisplayName\", \"Startmode\", \"B-DisplayName\",  \"B-StartMode\", \"B-Is\", \"B-Row\", \"C-DisplayName\", \"C-StartMode\", \"C-Is\" and \"C-Row\".</li> </ul> <p>Any columns on the \"reference\" side which are not used in the comparison are added on the right, which is why we compare the sheets in reverse order.</p> <p>The \"Is\" columns hold \"Same\", \"Added\", \"Removed\" or \"Changed\" and is used for conditional formatting in the output sheet (these columns are hidden by default), and when the data is written to Excel the \"reference\" columns, in this case \"DisplayName\" and \"Start\" are renamed to reflect their source, so they become \"A-DisplayName\" and \"A-Start\".</p> <p>Conditional formatting is also applied to the Key column (\"Name\" in this case) so the view can be filtered to rows with changes by filtering this column on color.</p> <p>Note: the processing order can affect what is seen as a change.For example, if there is an extra item in sheet B in the example above, Sheet C will be processed first and that row and will not be seen to be missing. When sheet B is processed it is marked as an addition, and the conditional formatting marks the entries from sheet A to show that a values were added in at least one sheet.</p> <p>However if Sheet B is the reference sheet, A and C will be seen to have an item removed; and if B is processed before C, the extra item is known when C is processed and so C is considered to be missing that item.</p>"},{"location":"commands/Merge-MultipleSheets/#examples","title":"EXAMPLES","text":""},{"location":"commands/Merge-MultipleSheets/#example-1","title":"EXAMPLE 1","text":"<pre><code>PS\\&gt; dir Server*.xlsx | Merge-MulipleSheets -WorksheetName Services -OutputFile Test2.xlsx -OutputSheetName Services -Show\n</code></pre> <p>Here we are auditing servers and each one has a workbook in the current directory which contains a \"Services\" Worksheet (the result of Get-WmiObject -Class win32_service | Select-Object -Property Name, Displayname, Startmode). No key is specified so the key is assumed to be the \"Name\" column. The files are merged and the result is opened on completion.</p>"},{"location":"commands/Merge-MultipleSheets/#example-2","title":"EXAMPLE 2","text":"<pre><code>PS\\&gt; dir Serv*.xlsx |  Merge-MulipleSheets  -WorksheetName Software -Key \"*\" -ExcludeProperty Install* -OutputFile Test2.xlsx -OutputSheetName Software -Show\n</code></pre> <p>The server audit files in the previous example also have \"Software\" worksheet, but no single field on that sheet works as a key. Specifying \"*\" for the key produces a compound key using all non-excluded fields (and the installation date and file location are excluded).</p>"},{"location":"commands/Merge-MultipleSheets/#example-3","title":"EXAMPLE 3","text":"<pre><code>Merge-MulipleSheets -Path hotfixes.xlsx -WorksheetName Serv* -Key hotfixid -OutputFile test2.xlsx -OutputSheetName hotfixes  -HideRowNumbers -Show\n</code></pre> <p>This time all the servers have written their hotfix information to their own worksheets in a shared Excel workbook named \"Hotfixes.xlsx\" (the information was obtained by running Get-Hotfix | Sort-Object -Property description,hotfixid | Select-Object -Property Description,HotfixID) This ignores any sheets which are not named \"Serv*\", and uses the HotfixID as the key; in this version the row numbers are hidden.</p>"},{"location":"commands/Merge-MultipleSheets/#parameters","title":"PARAMETERS","text":""},{"location":"commands/Merge-MultipleSheets/#-addbackgroundcolor","title":"-AddBackgroundColor","text":"<p>Sets the background color for rows not in the reference but added to the difference sheet.</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 12\nDefault value: [System.Drawing.Color]::Orange\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Merge-MultipleSheets/#-changebackgroundcolor","title":"-ChangeBackgroundColor","text":"<p>Sets the background color for changed rows.</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 10\nDefault value: [System.Drawing.Color]::Orange\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Merge-MultipleSheets/#-deletebackgroundcolor","title":"-DeleteBackgroundColor","text":"<p>Sets the background color for rows in the reference but deleted from the difference sheet.</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 11\nDefault value: [System.Drawing.Color]::LightPink\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Merge-MultipleSheets/#-excludeproperty","title":"-ExcludeProperty","text":"<p>Properties to exclude from the the comparison - supports wildcards.</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 7\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Merge-MultipleSheets/#-headername","title":"-Headername","text":"<p>Specifies custom property names to use, instead of the values defined in the column headers of the Start row.</p> <pre><code>Type: String[]\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 2\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Merge-MultipleSheets/#-hiderownumbers","title":"-HideRowNumbers","text":"<p>If specified, hides the columns in the spreadsheet that contain the row numbers.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Merge-MultipleSheets/#-key","title":"-Key","text":"<p>Name of a column which is unique used to pair up rows from the reference and difference sides, default is \"Name\".</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 8\nDefault value: Name\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Merge-MultipleSheets/#-keyfontcolor","title":"-KeyFontColor","text":"<p>Sets the font color for the Key field; this means you can filter by color to get only changed rows.</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 9\nDefault value: [System.Drawing.Color]::Red\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Merge-MultipleSheets/#-noheader","title":"-NoHeader","text":"<p>If specified, property names will be automatically generated (P1, P2, P3, ..) instead of using the values from the start row.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Merge-MultipleSheets/#-outputfile","title":"-OutputFile","text":"<p>File to write output to.</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases: OutFile\n\nRequired: False\nPosition: 4\nDefault value: .\\temp.xlsx\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Merge-MultipleSheets/#-outputsheetname","title":"-OutputSheetName","text":"<p>Name of Worksheet to output - if none specified will use the reference Worksheet name.</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases: OutSheet\n\nRequired: False\nPosition: 5\nDefault value: Sheet1\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Merge-MultipleSheets/#-passthru","title":"-Passthru","text":"<p>If specified, outputs the data to the pipeline (you can add -whatif so it the command only outputs to the pipeline).</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Merge-MultipleSheets/#-path","title":"-Path","text":"<p>Paths to the files to be merged. Files are also accepted</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: True\nPosition: 0\nDefault value: None\nAccept pipeline input: True (ByValue)\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Merge-MultipleSheets/#-property","title":"-Property","text":"<p>Properties to include in the comparison - supports wildcards, default is \"*\".</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 6\nDefault value: *\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Merge-MultipleSheets/#-show","title":"-Show","text":"<p>If specified, opens the output workbook.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Merge-MultipleSheets/#-startrow","title":"-Startrow","text":"<p>The row from where we start to import data, all rows above the Start row are disregarded. By default this is the first row.</p> <pre><code>Type: Int32\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 1\nDefault value: 1\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Merge-MultipleSheets/#-worksheetname","title":"-WorksheetName","text":"<p>Name(s) of Worksheets to compare.</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 3\nDefault value: Sheet1\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Merge-MultipleSheets/#commonparameters","title":"CommonParameters","text":"<p>This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters.</p>"},{"location":"commands/Merge-MultipleSheets/#inputs","title":"INPUTS","text":""},{"location":"commands/Merge-MultipleSheets/#outputs","title":"OUTPUTS","text":""},{"location":"commands/Merge-MultipleSheets/#notes","title":"NOTES","text":""},{"location":"commands/Merge-MultipleSheets/#related-links","title":"RELATED LINKS","text":""},{"location":"commands/Merge-Worksheet/","title":"Merge-Worksheet","text":""},{"location":"commands/Merge-Worksheet/#synopsis","title":"SYNOPSIS","text":"<p>Merges two Worksheets (or other objects) into a single Worksheet with differences marked up.</p>"},{"location":"commands/Merge-Worksheet/#syntax","title":"SYNTAX","text":""},{"location":"commands/Merge-Worksheet/#c","title":"C","text":"<pre><code>Merge-Worksheet [-Referencefile] &lt;Object&gt; [-Differencefile] &lt;Object&gt; [[-WorksheetName] &lt;Object&gt;]\n [-Startrow &lt;Int32&gt;] [-NoHeader] [[-OutputFile] &lt;Object&gt;] [[-OutputSheetName] &lt;Object&gt;] [-Property &lt;Object&gt;]\n [-ExcludeProperty &lt;Object&gt;] [-Key &lt;Object&gt;] [-KeyFontColor &lt;Object&gt;] [-ChangeBackgroundColor &lt;Object&gt;]\n [-DeleteBackgroundColor &lt;Object&gt;] [-AddBackgroundColor &lt;Object&gt;] [-HideEqual] [-Passthru] [-Show] [-WhatIf]\n [-Confirm] [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"commands/Merge-Worksheet/#b","title":"B","text":"<pre><code>Merge-Worksheet [-Referencefile] &lt;Object&gt; [-Differencefile] &lt;Object&gt; [[-WorksheetName] &lt;Object&gt;]\n [-Startrow &lt;Int32&gt;] -Headername &lt;String[]&gt; [[-OutputFile] &lt;Object&gt;] [[-OutputSheetName] &lt;Object&gt;]\n [-Property &lt;Object&gt;] [-ExcludeProperty &lt;Object&gt;] [-Key &lt;Object&gt;] [-KeyFontColor &lt;Object&gt;]\n [-ChangeBackgroundColor &lt;Object&gt;] [-DeleteBackgroundColor &lt;Object&gt;] [-AddBackgroundColor &lt;Object&gt;]\n [-HideEqual] [-Passthru] [-Show] [-WhatIf] [-Confirm] [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"commands/Merge-Worksheet/#a","title":"A","text":"<pre><code>Merge-Worksheet [-Referencefile] &lt;Object&gt; [-Differencefile] &lt;Object&gt; [[-WorksheetName] &lt;Object&gt;]\n [-Startrow &lt;Int32&gt;] [[-OutputFile] &lt;Object&gt;] [[-OutputSheetName] &lt;Object&gt;] [-Property &lt;Object&gt;]\n [-ExcludeProperty &lt;Object&gt;] [-Key &lt;Object&gt;] [-KeyFontColor &lt;Object&gt;] [-ChangeBackgroundColor &lt;Object&gt;]\n [-DeleteBackgroundColor &lt;Object&gt;] [-AddBackgroundColor &lt;Object&gt;] [-HideEqual] [-Passthru] [-Show] [-WhatIf]\n [-Confirm] [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"commands/Merge-Worksheet/#g","title":"G","text":"<pre><code>Merge-Worksheet [-Differencefile] &lt;Object&gt; [[-WorksheetName] &lt;Object&gt;] [-Startrow &lt;Int32&gt;] [-NoHeader]\n -ReferenceObject &lt;Object&gt; [[-DiffPrefix] &lt;Object&gt;] [[-OutputFile] &lt;Object&gt;] [[-OutputSheetName] &lt;Object&gt;]\n [-Property &lt;Object&gt;] [-ExcludeProperty &lt;Object&gt;] [-Key &lt;Object&gt;] [-KeyFontColor &lt;Object&gt;]\n [-ChangeBackgroundColor &lt;Object&gt;] [-DeleteBackgroundColor &lt;Object&gt;] [-AddBackgroundColor &lt;Object&gt;]\n [-HideEqual] [-Passthru] [-Show] [-WhatIf] [-Confirm] [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"commands/Merge-Worksheet/#f","title":"F","text":"<pre><code>Merge-Worksheet [-Differencefile] &lt;Object&gt; [[-WorksheetName] &lt;Object&gt;] [-Startrow &lt;Int32&gt;]\n -Headername &lt;String[]&gt; -ReferenceObject &lt;Object&gt; [[-DiffPrefix] &lt;Object&gt;] [[-OutputFile] &lt;Object&gt;]\n [[-OutputSheetName] &lt;Object&gt;] [-Property &lt;Object&gt;] [-ExcludeProperty &lt;Object&gt;] [-Key &lt;Object&gt;]\n [-KeyFontColor &lt;Object&gt;] [-ChangeBackgroundColor &lt;Object&gt;] [-DeleteBackgroundColor &lt;Object&gt;]\n [-AddBackgroundColor &lt;Object&gt;] [-HideEqual] [-Passthru] [-Show] [-WhatIf] [-Confirm] [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"commands/Merge-Worksheet/#e","title":"E","text":"<pre><code>Merge-Worksheet [-Differencefile] &lt;Object&gt; [[-WorksheetName] &lt;Object&gt;] [-Startrow &lt;Int32&gt;]\n -ReferenceObject &lt;Object&gt; [[-DiffPrefix] &lt;Object&gt;] [[-OutputFile] &lt;Object&gt;] [[-OutputSheetName] &lt;Object&gt;]\n [-Property &lt;Object&gt;] [-ExcludeProperty &lt;Object&gt;] [-Key &lt;Object&gt;] [-KeyFontColor &lt;Object&gt;]\n [-ChangeBackgroundColor &lt;Object&gt;] [-DeleteBackgroundColor &lt;Object&gt;] [-AddBackgroundColor &lt;Object&gt;]\n [-HideEqual] [-Passthru] [-Show] [-WhatIf] [-Confirm] [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"commands/Merge-Worksheet/#d","title":"D","text":"<pre><code>Merge-Worksheet -ReferenceObject &lt;Object&gt; [-DifferenceObject] &lt;Object&gt; [[-DiffPrefix] &lt;Object&gt;]\n [[-OutputFile] &lt;Object&gt;] [[-OutputSheetName] &lt;Object&gt;] [-Property &lt;Object&gt;] [-ExcludeProperty &lt;Object&gt;]\n [-Key &lt;Object&gt;] [-KeyFontColor &lt;Object&gt;] [-ChangeBackgroundColor &lt;Object&gt;] [-DeleteBackgroundColor &lt;Object&gt;]\n [-AddBackgroundColor &lt;Object&gt;] [-HideEqual] [-Passthru] [-Show] [-WhatIf] [-Confirm] [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"commands/Merge-Worksheet/#description","title":"DESCRIPTION","text":"<p>The Compare-Worksheet command takes two Worksheets and marks differences in the source document, and optionally outputs a grid showing the changes.</p> <p>By contrast the Merge-Worksheet command takes the Worksheets and combines them into a single sheet showing the old and new data side by side. Although it is designed to work with Excel data it can work with arrays of any kind of object; so it can be a merge of Worksheets, or a merge to a Worksheet.</p>"},{"location":"commands/Merge-Worksheet/#examples","title":"EXAMPLES","text":""},{"location":"commands/Merge-Worksheet/#example-1","title":"EXAMPLE 1","text":"<pre><code>PS\\&gt; Merge-Worksheet \"Server54.xlsx\" \"Server55.xlsx\" -WorksheetName services -OutputFile Services.xlsx -OutputSheetName 54-55 -show\n</code></pre> <p>The workbooks contain audit information for two servers, one sheet contains a list of services.</p> <p>This command creates a worksheet named \"54-55\" in a workbook named \"services.xlsx\" which shows all the services and their differences, and opens the new workbook in Excel.</p>"},{"location":"commands/Merge-Worksheet/#example-2","title":"EXAMPLE 2","text":"<pre><code>PS\\&gt; Merge-Worksheet \"Server54.xlsx\" \"Server55.xlsx\" -WorksheetName services -OutputFile Services.xlsx -OutputSheetName 54-55 -HideEqual -AddBackgroundColor LightBlue -show\n</code></pre> <p>This modifies the previous command to hide the equal rows in the output sheet and changes the color used to mark rows added to the second file.</p>"},{"location":"commands/Merge-Worksheet/#example-3","title":"EXAMPLE 3","text":"<pre><code>PS\\&gt;  Merge-Worksheet -OutputFile .\\j1.xlsx -OutputSheetName test11 -ReferenceObject (dir .\\ImportExcel\\4.0.7) -DifferenceObject (dir .\\ImportExcel\\4.0.8) -Property Length -Show\n</code></pre> <p>This version compares two directories, and marks what has changed. Because no \"Key\" property is given, \"Name\" is assumed to be the key and the only other property examined is length. Files which are added or deleted or have changed size will be highlighed in the output sheet. Changes to dates or other attributes will be ignored.</p>"},{"location":"commands/Merge-Worksheet/#example-4","title":"EXAMPLE 4","text":"<pre><code>PS\\&gt; Merge-Worksheet   -RefO (dir .\\ImportExcel\\4.0.7) -DiffO (dir .\\ImportExcel\\4.0.8) -Pr Length  | Out-GridView\n</code></pre> <p>This time no file is written and the results - which include all properties, not just length, are output and sent to Out-Gridview.</p> <p>This version uses aliases to shorten the parameters, (OutputFileName can be \"outFile\" and the Sheet can be\"OutSheet\"; DifferenceObject &amp; ReferenceObject can be DiffObject &amp; RefObject respectively).</p>"},{"location":"commands/Merge-Worksheet/#parameters","title":"PARAMETERS","text":""},{"location":"commands/Merge-Worksheet/#-addbackgroundcolor","title":"-AddBackgroundColor","text":"<p>{{ Fill AddBackgroundColor Description }}</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Merge-Worksheet/#-changebackgroundcolor","title":"-ChangeBackgroundColor","text":"<p>{{ Fill ChangeBackgroundColor Description }}</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Merge-Worksheet/#-deletebackgroundcolor","title":"-DeleteBackgroundColor","text":"<p>{{ Fill DeleteBackgroundColor Description }}</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Merge-Worksheet/#-differencefile","title":"-Differencefile","text":"<p>Second Excel file to compare. Works with paramter sets A,B,C as well as the following</p> <ul> <li>D = Compare two objects;</li> <li>E = Compare one object one file that uses default headers</li> <li>F = Compare one object one file that uses user supplied headers</li> <li>G = Compare one object one file that uses headers P1, P2, P3 etc</li> </ul> <pre><code>Type: Object\nParameter Sets: C, B, A, G, F, E\nAliases:\n\nRequired: True\nPosition: 1\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Merge-Worksheet/#-differenceobject","title":"-DifferenceObject","text":"<p>{{ Fill DifferenceObject Description }}</p> <pre><code>Type: Object\nParameter Sets: D\nAliases: DiffObject\n\nRequired: True\nPosition: 1\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Merge-Worksheet/#-diffprefix","title":"-DiffPrefix","text":"<p>{{ Fill DiffPrefix Description }}</p> <pre><code>Type: Object\nParameter Sets: G, F, E, D\nAliases:\n\nRequired: False\nPosition: 2\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Merge-Worksheet/#-excludeproperty","title":"-ExcludeProperty","text":"<p>{{ Fill ExcludeProperty Description }}</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Merge-Worksheet/#-headername","title":"-Headername","text":"<p>Specifies custom property names to use, instead of the values defined in the column headers of the Start Row. Works with the following parameter sets:</p> <ul> <li>B 2 sheets with user supplied headers</li> <li>F Compare  object + sheet</li> </ul> <p>```yaml</p> <p>Type: String[]</p> <p>Parameter Sets: B, F</p> <p>Aliases:</p> <p>Required: True Position: Named Default value: None Accept pipeline input: False Accept wildcard characters: False</p> <pre><code>Type: String[]\nParameter Sets: B, F\nAliases:\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Merge-Worksheet/#-hideequal","title":"-HideEqual","text":"<p>if specified, hides the rows in the spreadsheet that are equal and only shows changes, added or deleted rows.</p> <p>yaml Type: SwitchParameter Parameter Sets: (All) Aliases:</p> <p>Required: False Position: Named Default value: False Accept pipeline input: False Accept wildcard characters: False</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Merge-Worksheet/#-key","title":"-Key","text":"<p>Name of a column which is unique used to pair up rows from the refence and difference side, default is \"Name\".</p> <p>yaml Type: Object Parameter Sets: (All) Aliases:</p> <p>Required: False Position: Named Default value: Name Accept pipeline input: False Accept wildcard characters: False</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Merge-Worksheet/#-keyfontcolor","title":"-KeyFontColor","text":"<p>Sets the font color for the \"key\" field; this means you can filter by color to get only changed rows.</p> <p>yaml Type: Object Parameter Sets: (All) Aliases:</p> <p>Required: False Position: Named Default value: [System.Drawing.Color]::DarkRed Accept pipeline input: False Accept wildcard characters: False</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Merge-Worksheet/#-noheader","title":"-NoHeader","text":"<p>Automatically generate property names (P1, P2, P3, ..) instead of using the values the top row of the sheet. Works with parameter sets</p> <ul> <li>C 2 sheets with headers of P1, P2, P3 ...</li> <li>G Compare  object + sheet</li> </ul> <p>yaml Type: SwitchParameter Parameter Sets: C, G Aliases:</p> <p>Required: True Position: Named Default value: False Accept pipeline input: False Accept wildcard characters: False</p> <pre><code>Type: SwitchParameter\nParameter Sets: C, G\nAliases:\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Merge-Worksheet/#-outputfile","title":"-OutputFile","text":"<p>File to hold merged data.</p> <p>yaml Type: Object Parameter Sets: (All) Aliases: OutFile</p> <p>Required: False Position: 4 Default value: None Accept pipeline input: False Accept wildcard characters: False</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases: OutFile\n\nRequired: False\nPosition: 3\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Merge-Worksheet/#-outputsheetname","title":"-OutputSheetName","text":"<p>Name of Worksheet to output - if none specified will use the reference Worksheet name.</p> <p>yaml Type: Object Parameter Sets: (All) Aliases: OutSheet</p> <p>Required: False Position: 5 Default value: Sheet1 Accept pipeline input: False Accept wildcard characters: False</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases: OutSheet\n\nRequired: False\nPosition: 4\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Merge-Worksheet/#-passthru","title":"-Passthru","text":"<p>If specified, outputs the data to the pipeline (you can add -WhatIf so the command only outputs to the pipeline).</p> <p>yaml Type: SwitchParameter Parameter Sets: (All) Aliases:</p> <p>Required: False Position: Named Default value: False Accept pipeline input: False Accept wildcard characters: False</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Merge-Worksheet/#-property","title":"-Property","text":"<p>Properties to include in the DIFF - supports wildcards, default is \"*\".</p> <p>yaml Type: Object Parameter Sets: (All) Aliases:</p> <p>Required: False Position: Named Default value: * Accept pipeline input: False Accept wildcard characters: False</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Merge-Worksheet/#-referencefile","title":"-Referencefile","text":"<p>{{ Fill Referencefile Description }}</p> <pre><code>Type: Object\nParameter Sets: C, B, A\nAliases:\n\nRequired: True\nPosition: 0\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Merge-Worksheet/#-referenceobject","title":"-ReferenceObject","text":"<p>Reference object to compare if a Worksheet is NOT being used. Reference object can combine with a difference sheet or difference object</p> <p>yaml Type: Object Parameter Sets: G, F, E, D Aliases: RefObject</p> <p>Required: True Position: Named Default value: None Accept pipeline input: False Accept wildcard characters: False</p> <pre><code>Type: Object\nParameter Sets: G, F, E, D\nAliases: RefObject\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Merge-Worksheet/#-show","title":"-Show","text":"<p>If specified, opens the output workbook.</p> <p>yaml Type: SwitchParameter Parameter Sets: (All) Aliases:</p> <p>Required: False Position: Named Default value: False Accept pipeline input: False Accept wildcard characters: False</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Merge-Worksheet/#-startrow","title":"-Startrow","text":"<p>{{ Fill Startrow Description }}</p> <pre><code>Type: Int32\nParameter Sets: C, B, A, G, F, E\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Merge-Worksheet/#-worksheetname","title":"-WorksheetName","text":"<p>{{ Fill WorksheetName Description }}</p> <pre><code>Type: Object\nParameter Sets: C, B, A, G, F, E\nAliases:\n\nRequired: False\nPosition: 2\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Merge-Worksheet/#-confirm","title":"-Confirm","text":"<p>Prompts you for confirmation before running the cmdlet.</p> <p>yaml Type: SwitchParameter Parameter Sets: (All) Aliases: cf</p> <p>Required: False Position: Named Default value: None Accept pipeline input: False Accept wildcard characters: False</p> <p>yaml Type: String[] Parameter Sets: B, F Aliases:</p> <p>Required: True Position: Named Default value: None Accept pipeline input: False Accept wildcard characters: False</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases: cf\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Merge-Worksheet/#-whatif","title":"-WhatIf","text":"<p>Shows what would happen if the cmdlet runs. The cmdlet is not run.</p> <p>yaml Type: SwitchParameter Parameter Sets: (All) Aliases: wi</p> <p>Required: False Position: Named Default value: None Accept pipeline input: False Accept wildcard characters: False</p> <p>yaml Type: SwitchParameter Parameter Sets: (All) Aliases: cf</p> <p>Required: False Position: Named Default value: None Accept pipeline input: False Accept wildcard characters: False</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases: wi\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Merge-Worksheet/#commonparameters","title":"CommonParameters","text":"<p>This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters.</p>"},{"location":"commands/Merge-Worksheet/#inputs","title":"INPUTS","text":""},{"location":"commands/Merge-Worksheet/#outputs","title":"OUTPUTS","text":""},{"location":"commands/Merge-Worksheet/#notes","title":"NOTES","text":""},{"location":"commands/Merge-Worksheet/#related-links","title":"RELATED LINKS","text":""},{"location":"commands/New-ConditionalFormattingIconSet/","title":"New-ConditionalFormattingIconSet","text":""},{"location":"commands/New-ConditionalFormattingIconSet/#synopsis","title":"SYNOPSIS","text":"<p>Creates an object which describes a conditional formatting rule a for 3,4 or 5 icon set.</p>"},{"location":"commands/New-ConditionalFormattingIconSet/#syntax","title":"SYNTAX","text":"<pre><code>New-ConditionalFormattingIconSet [-Range] &lt;Object&gt; [[-ConditionalFormat] &lt;Object&gt;] [-Reverse] [-ShowIconOnly]\n [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"commands/New-ConditionalFormattingIconSet/#description","title":"DESCRIPTION","text":"<p>Export-Excel takes a -ConditionalFormat parameter which can hold one or more descriptions for conditional formats; this command builds the defintion of a Conditional formatting rule for an icon set.</p>"},{"location":"commands/New-ConditionalFormattingIconSet/#examples","title":"EXAMPLES","text":""},{"location":"commands/New-ConditionalFormattingIconSet/#example-1","title":"EXAMPLE 1","text":"<pre><code>PS\\&gt; $cfRange = [OfficeOpenXml.ExcelAddress]::new($topRow, $column, $lastDataRow, $column)\nPS\\&gt; $cfdef = New-ConditionalFormattingIconSet -Range $cfrange -ConditionalFormat ThreeIconSet -IconType Arrows\nPS\\&gt; Export-Excel -ExcelPackage $excel -ConditionalFormat $cfdef -show\n</code></pre> <p>The first line creates a range - one column wide in the column $column, running from $topRow to $lastDataRow. The second line creates a definition object using this range and the third uses Export-Excel with an open package to apply the format and save and open the file.</p>"},{"location":"commands/New-ConditionalFormattingIconSet/#parameters","title":"PARAMETERS","text":""},{"location":"commands/New-ConditionalFormattingIconSet/#-conditionalformat","title":"-ConditionalFormat","text":"<p>The type of rule: one of \"ThreeIconSet\",\"FourIconSet\" or \"FiveIconSet\"</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\nAccepted values: ThreeIconSet, FourIconSet, FiveIconSet\n\nRequired: False\nPosition: 1\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/New-ConditionalFormattingIconSet/#-range","title":"-Range","text":"<p>The range of cells that the conditional format applies to.</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: True\nPosition: 0\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/New-ConditionalFormattingIconSet/#-reverse","title":"-Reverse","text":"<p>Use the icons in the reverse order.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/New-ConditionalFormattingIconSet/#-showicononly","title":"-ShowIconOnly","text":"<p>{{ Fill ShowIconOnly Description }}</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/New-ConditionalFormattingIconSet/#commonparameters","title":"CommonParameters","text":"<p>This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters.</p>"},{"location":"commands/New-ConditionalFormattingIconSet/#inputs","title":"INPUTS","text":""},{"location":"commands/New-ConditionalFormattingIconSet/#outputs","title":"OUTPUTS","text":""},{"location":"commands/New-ConditionalFormattingIconSet/#notes","title":"NOTES","text":""},{"location":"commands/New-ConditionalFormattingIconSet/#related-links","title":"RELATED LINKS","text":"<p>Add-ConditionalFormatting New-ConditionalText New-ConditionalFormattingIconSet</p>"},{"location":"commands/New-ConditionalText/","title":"New-ConditionalText","text":""},{"location":"commands/New-ConditionalText/#synopsis","title":"SYNOPSIS","text":"<p>Creates an object which describes a conditional formatting rule for single valued rules.</p>"},{"location":"commands/New-ConditionalText/#syntax","title":"SYNTAX","text":"<pre><code>New-ConditionalText [[-Text] &lt;Object&gt;] [[-ConditionalTextColor] &lt;Object&gt;] [[-BackgroundColor] &lt;Object&gt;]\n [[-Range] &lt;String&gt;] [[-PatternType] &lt;ExcelFillStyle&gt;] [[-ConditionalType] &lt;Object&gt;] [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"commands/New-ConditionalText/#description","title":"DESCRIPTION","text":"<p>Some Conditional formatting rules don't apply styles to a cell (IconSets and Databars); some take two parameters (Between); some take none (ThisWeek, ContainsErrors, AboveAverage etc).The others take a single parameter (Top, BottomPercent, GreaterThan, Contains etc).</p> <p>This command creates an object to describe the last two categories, which can then be passed to Export-Excel.</p>"},{"location":"commands/New-ConditionalText/#examples","title":"EXAMPLES","text":""},{"location":"commands/New-ConditionalText/#example-1","title":"EXAMPLE 1","text":"<pre><code>PS\\&gt; $ct = New-ConditionalText -Text  'Ferrari'\nPS\\&gt; Export-Excel -ExcelPackage $excel -ConditionalTest $ct -show\n</code></pre> <p>The first line creates a definition object which will highlight the word \"Ferrari\" in any cell. and the second uses Export-Excel with an open package to apply the format and save and open the file.</p>"},{"location":"commands/New-ConditionalText/#example-2","title":"EXAMPLE 2","text":"<pre><code>PS\\&gt; $ct  = New-ConditionalText -Text \"Ferrari\"\nPS\\&gt; $ct2 = New-ConditionalText -Range $worksheet.Names\\[\"FinishPosition\"\\].Address -ConditionalType LessThanOrEqual -Text 3 -ConditionalTextColor Red -BackgroundColor White\nPS\\&gt; Export-Excel -ExcelPackage $excel -ConditionalText $ct,$ct2 -show\n</code></pre> <p>This builds on the previous example, and specifies a condition of \\&lt;=3 with a format of red text on a white background; this applies to a named range \"Finish Position\".</p> <p>The range could be written -Range \"C:C\" to specify a named column, or -Range \"C2:C102\" to specify certain cells in the column.</p>"},{"location":"commands/New-ConditionalText/#parameters","title":"PARAMETERS","text":""},{"location":"commands/New-ConditionalText/#-backgroundcolor","title":"-BackgroundColor","text":"<p>The fill color for the cell - by default: \"LightPink\".</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 2\nDefault value: [System.Drawing.Color]::LightPink\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/New-ConditionalText/#-conditionaltextcolor","title":"-ConditionalTextColor","text":"<p>The font color for the cell - by default: \"DarkRed\".</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases: ForeGroundColor\n\nRequired: False\nPosition: 1\nDefault value: [System.Drawing.Color]::DarkRed\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/New-ConditionalText/#-conditionaltype","title":"-ConditionalType","text":"<p>One of the supported rules; by default \"ContainsText\" is selected.</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases: RuleType\nAccepted values: LessThan, LessThanOrEqual, GreaterThan, GreaterThanOrEqual, Equal, NotEqual, Top, TopPercent, Bottom, BottomPercent, ContainsText, NotContainsText, BeginsWith, EndsWith, ContainsBlanks, NotContainsBlanks, ContainsErrors, NotContainsErrors, DuplicateValues, UniqueValues, Tomorrow, Today, Yesterday, Last7Days, NextWeek, ThisWeek, LastWeek, NextMonth, ThisMonth, LastMonth, AboveAverage, AboveOrEqualAverage, BelowAverage, BelowOrEqualAverage, Expression\n\nRequired: False\nPosition: 5\nDefault value: ContainsText\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/New-ConditionalText/#-patterntype","title":"-PatternType","text":"<p>The background pattern for the cell - by default: \"Solid\"</p> <pre><code>Type: ExcelFillStyle\nParameter Sets: (All)\nAliases:\nAccepted values: None, Solid, DarkGray, MediumGray, LightGray, Gray125, Gray0625, DarkVertical, DarkHorizontal, DarkDown, DarkUp, DarkGrid, DarkTrellis, LightVertical, LightHorizontal, LightDown, LightUp, LightGrid, LightTrellis\n\nRequired: False\nPosition: 4\nDefault value: Solid\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/New-ConditionalText/#-range","title":"-Range","text":"<p>The range of cells that the conditional format applies to; if none is specified the range will be apply to all the data in the sheet.</p> <pre><code>Type: String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 3\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/New-ConditionalText/#-text","title":"-Text","text":"<p>The text (or other value) to use in the rule. Note that Equals, GreaterThan/LessThan rules require text to wrapped in double quotes.</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases: ConditionValue\n\nRequired: False\nPosition: 0\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/New-ConditionalText/#commonparameters","title":"CommonParameters","text":"<p>This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters.</p>"},{"location":"commands/New-ConditionalText/#inputs","title":"INPUTS","text":""},{"location":"commands/New-ConditionalText/#outputs","title":"OUTPUTS","text":""},{"location":"commands/New-ConditionalText/#notes","title":"NOTES","text":""},{"location":"commands/New-ConditionalText/#related-links","title":"RELATED LINKS","text":"<p>Add-ConditionalFormatting New-ConditionalFormattingIconSet</p>"},{"location":"commands/New-ExcelChartDefinition/","title":"New-ExcelChartDefinition","text":""},{"location":"commands/New-ExcelChartDefinition/#synopsis","title":"SYNOPSIS","text":"<p>Creates a Definition of a chart which can be added using Export-Excel, or Add-PivotTable</p>"},{"location":"commands/New-ExcelChartDefinition/#syntax","title":"SYNTAX","text":"<pre><code>New-ExcelChartDefinition [[-Title] &lt;Object&gt;] [[-Header] &lt;Object&gt;] [[-ChartType] &lt;eChartType&gt;]\n [[-ChartTrendLine] &lt;eTrendLine[]&gt;] [[-XRange] &lt;Object&gt;] [[-YRange] &lt;Object&gt;] [[-Width] &lt;Object&gt;]\n [[-Height] &lt;Object&gt;] [[-Row] &lt;Object&gt;] [[-RowOffSetPixels] &lt;Object&gt;] [[-Column] &lt;Object&gt;]\n [[-ColumnOffSetPixels] &lt;Object&gt;] [[-LegendPosition] &lt;eLegendPosition&gt;] [[-LegendSize] &lt;Object&gt;] [-LegendBold]\n [-NoLegend] [-ShowCategory] [-ShowPercent] [[-SeriesHeader] &lt;Object&gt;] [-TitleBold] [[-TitleSize] &lt;Int32&gt;]\n [[-XAxisTitleText] &lt;String&gt;] [-XAxisTitleBold] [[-XAxisTitleSize] &lt;Object&gt;] [[-XAxisNumberformat] &lt;String&gt;]\n [[-XMajorUnit] &lt;Object&gt;] [[-XMinorUnit] &lt;Object&gt;] [[-XMaxValue] &lt;Object&gt;] [[-XMinValue] &lt;Object&gt;]\n [[-XAxisPosition] &lt;eAxisPosition&gt;] [[-YAxisTitleText] &lt;String&gt;] [-YAxisTitleBold] [[-YAxisTitleSize] &lt;Object&gt;]\n [[-YAxisNumberformat] &lt;String&gt;] [[-YMajorUnit] &lt;Object&gt;] [[-YMinorUnit] &lt;Object&gt;] [[-YMaxValue] &lt;Object&gt;]\n [[-YMinValue] &lt;Object&gt;] [[-YAxisPosition] &lt;eAxisPosition&gt;] [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"commands/New-ExcelChartDefinition/#description","title":"DESCRIPTION","text":"<p>All the parameters which are passed to Add-ExcelChart can be added to a chart-definition object and passed to Export-Excel with the -ExcelChartDefinition parameter, or to Add-PivotTable with the -PivotChartDefinition parameter. This command sets up those definition objects.</p>"},{"location":"commands/New-ExcelChartDefinition/#examples","title":"EXAMPLES","text":""},{"location":"commands/New-ExcelChartDefinition/#example-1","title":"EXAMPLE 1","text":"<pre><code>PS\\&gt; $cDef = New-ExcelChartDefinition  -ChartType line -XRange \"X\" -YRange \"Sinx\"  -Title \"Graph of Sine X\" -TitleBold -TitleSize 14 -Column 2 -ColumnOffSetPixels 35 -Width 800 -XAxisTitleText \"Degrees\" -XAxisTitleBold -XAxisTitleSize 12 -XMajorUnit 30 -XMinorUnit 10 -XMinValue 0 -XMaxValue 361  -XAxisNumberformat \"000\" -YMinValue -1.25 -YMaxValue 1.25 -YMajorUnit 0.25 -YAxisNumberformat \"0.00\" -YAxisTitleText \"Sine\" -YAxisTitleBold -YAxisTitleSize 12  -SeriesHeader \"Sin(x)\" -LegendSize 8 -legendBold  -LegendPosition Bottom\nPS\\&gt; 0..360 | ForEach-Object {[pscustomobject][ordered]@{x = $_; Sinx = \"=Sin(Radians(x)) \"}} | Export-Excel -AutoNameRange -now -WorkSheetname SinX -ExcelChartDefinition $cDef -Show\n</code></pre> <p>This reworks an example from Add-Excel-Chart but here the chart is defined and the defintion stored in $cDef and then Export-Excel uses $cDef .</p>"},{"location":"commands/New-ExcelChartDefinition/#parameters","title":"PARAMETERS","text":""},{"location":"commands/New-ExcelChartDefinition/#-charttrendline","title":"-ChartTrendLine","text":"<p>Superimposes one of Excel's trenline types on the chart.</p> <pre><code>Type: eTrendLine[]\nParameter Sets: (All)\nAliases:\nAccepted values: Exponential, Linear, Logarithmic, MovingAvgerage, Polynomial, Power\n\nRequired: False\nPosition: 3\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/New-ExcelChartDefinition/#-charttype","title":"-ChartType","text":"<p>One of the built-in chart types, such as Pie, ClusteredColumn, Line etc. Defaults to \"ColumnStacked\".</p> <pre><code>Type: eChartType\nParameter Sets: (All)\nAliases:\nAccepted values: Area, Line, Pie, Bubble, ColumnClustered, ColumnStacked, ColumnStacked100, ColumnClustered3D, ColumnStacked3D, ColumnStacked1003D, BarClustered, BarStacked, BarStacked100, BarClustered3D, BarStacked3D, BarStacked1003D, LineStacked, LineStacked100, LineMarkers, LineMarkersStacked, LineMarkersStacked100, PieOfPie, PieExploded, PieExploded3D, BarOfPie, XYScatterSmooth, XYScatterSmoothNoMarkers, XYScatterLines, XYScatterLinesNoMarkers, AreaStacked, AreaStacked100, AreaStacked3D, AreaStacked1003D, DoughnutExploded, RadarMarkers, RadarFilled, Surface, SurfaceWireframe, SurfaceTopView, SurfaceTopViewWireframe, Bubble3DEffect, StockHLC, StockOHLC, StockVHLC, StockVOHLC, CylinderColClustered, CylinderColStacked, CylinderColStacked100, CylinderBarClustered, CylinderBarStacked, CylinderBarStacked100, CylinderCol, ConeColClustered, ConeColStacked, ConeColStacked100, ConeBarClustered, ConeBarStacked, ConeBarStacked100, ConeCol, PyramidColClustered, PyramidColStacked, PyramidColStacked100, PyramidBarClustered, PyramidBarStacked, PyramidBarStacked100, PyramidCol, XYScatter, Radar, Doughnut, Pie3D, Line3D, Column3D, Area3D\n\nRequired: False\nPosition: 2\nDefault value: ColumnStacked\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/New-ExcelChartDefinition/#-column","title":"-Column","text":"<p>Column position of the top left corner of the chart. 0 places it at the edge of the sheet, 1 to the right of column A and so on.</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 10\nDefault value: 6\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/New-ExcelChartDefinition/#-columnoffsetpixels","title":"-ColumnOffSetPixels","text":"<p>Offset to position the chart by a fraction of a column.</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 11\nDefault value: 5\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/New-ExcelChartDefinition/#-header","title":"-Header","text":"<p>No longer used. This may be removed in future versions.</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 1\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/New-ExcelChartDefinition/#-height","title":"-Height","text":"<p>Height of the chart in pixels. Defaults to 350.</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 7\nDefault value: 350\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/New-ExcelChartDefinition/#-legendbold","title":"-LegendBold","text":"<p>Sets the key in bold type.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/New-ExcelChartDefinition/#-legendposition","title":"-LegendPosition","text":"<p>Location of the key, either \"Left\", \"Right\", \"Top\", \"Bottom\" or \"TopRight\".</p> <pre><code>Type: eLegendPosition\nParameter Sets: (All)\nAliases:\nAccepted values: Top, Left, Right, Bottom, TopRight\n\nRequired: False\nPosition: 12\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/New-ExcelChartDefinition/#-legendsize","title":"-LegendSize","text":"<p>Font size for the key.</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 13\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/New-ExcelChartDefinition/#-nolegend","title":"-NoLegend","text":"<p>If specified, turns off display of the key. If you only have one data series it may be preferable to use the title to say what the chart is.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/New-ExcelChartDefinition/#-row","title":"-Row","text":"<p>Row position of the top left corner of the chart. 0 places it at the top of the sheet, 1 below row 1 and so on.</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 8\nDefault value: 0\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/New-ExcelChartDefinition/#-rowoffsetpixels","title":"-RowOffSetPixels","text":"<p>Offset to position the chart by a fraction of a row.</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 9\nDefault value: 10\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/New-ExcelChartDefinition/#-seriesheader","title":"-SeriesHeader","text":"<p>Specifies explicit name(s) for the data series, which will appear in the legend/key</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 14\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/New-ExcelChartDefinition/#-showcategory","title":"-ShowCategory","text":"<p>Attaches a category label in charts which support this.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/New-ExcelChartDefinition/#-showpercent","title":"-ShowPercent","text":"<p>Attaches a percentage label in charts which support this.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/New-ExcelChartDefinition/#-title","title":"-Title","text":"<p>The title for the chart.</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 0\nDefault value: Chart Title\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/New-ExcelChartDefinition/#-titlebold","title":"-TitleBold","text":"<p>Sets the title in bold face.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/New-ExcelChartDefinition/#-titlesize","title":"-TitleSize","text":"<p>Sets the point size for the title.</p> <pre><code>Type: Int32\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 15\nDefault value: 0\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/New-ExcelChartDefinition/#-width","title":"-Width","text":"<p>Width of the chart in pixels. Defaults to 500.</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 6\nDefault value: 500\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/New-ExcelChartDefinition/#-xaxisnumberformat","title":"-XAxisNumberformat","text":"<p>A number formatting string, like \"#,##0.00\", for numbers along the X-axis.</p> <pre><code>Type: String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 18\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/New-ExcelChartDefinition/#-xaxisposition","title":"-XAxisPosition","text":"<p>Position for the X-axis (\"Top\" or\" Bottom\").</p> <pre><code>Type: eAxisPosition\nParameter Sets: (All)\nAliases:\nAccepted values: Left, Bottom, Right, Top\n\nRequired: False\nPosition: 23\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/New-ExcelChartDefinition/#-xaxistitlebold","title":"-XAxisTitleBold","text":"<p>Sets the X-axis title in bold face.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/New-ExcelChartDefinition/#-xaxistitlesize","title":"-XAxisTitleSize","text":"<p>Sets the font size for the axis title.</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 17\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/New-ExcelChartDefinition/#-xaxistitletext","title":"-XAxisTitleText","text":"<p>Specifies a title for the X-axis.</p> <pre><code>Type: String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 16\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/New-ExcelChartDefinition/#-xmajorunit","title":"-XMajorUnit","text":"<p>Spacing for the major gridlines / tick marks along the X-axis.</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 19\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/New-ExcelChartDefinition/#-xmaxvalue","title":"-XMaxValue","text":"<p>Maximum value for the scale along the X-axis.</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 21\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/New-ExcelChartDefinition/#-xminorunit","title":"-XMinorUnit","text":"<p>Spacing for the minor gridlines / tick marks along the X-axis.</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 20\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/New-ExcelChartDefinition/#-xminvalue","title":"-XMinValue","text":"<p>Minimum value for the scale along the X-axis.</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 22\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/New-ExcelChartDefinition/#-xrange","title":"-XRange","text":"<p>The range of cells containing values for the X-Axis - usually labels.</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 4\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/New-ExcelChartDefinition/#-yaxisnumberformat","title":"-YAxisNumberformat","text":"<p>A number formatting string, like \"#,##0.00\", for numbers on the Y-axis</p> <pre><code>Type: String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 26\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/New-ExcelChartDefinition/#-yaxisposition","title":"-YAxisPosition","text":"<p>Position for the Y-axis (\"Left\" or \"Right\").</p> <pre><code>Type: eAxisPosition\nParameter Sets: (All)\nAliases:\nAccepted values: Left, Bottom, Right, Top\n\nRequired: False\nPosition: 31\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/New-ExcelChartDefinition/#-yaxistitlebold","title":"-YAxisTitleBold","text":"<p>Sets the Y-axis title in bold face.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/New-ExcelChartDefinition/#-yaxistitlesize","title":"-YAxisTitleSize","text":"<p>Sets the font size for the Y-axis title.</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 25\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/New-ExcelChartDefinition/#-yaxistitletext","title":"-YAxisTitleText","text":"<p>Specifies a title for the Y-axis.</p> <pre><code>Type: String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 24\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/New-ExcelChartDefinition/#-ymajorunit","title":"-YMajorUnit","text":"<p>Spacing for the major gridlines / tick marks on the Y-axis.</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 27\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/New-ExcelChartDefinition/#-ymaxvalue","title":"-YMaxValue","text":"<p>Maximum value on the Y-axis.</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 29\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/New-ExcelChartDefinition/#-yminorunit","title":"-YMinorUnit","text":"<p>Spacing for the minor gridlines / tick marks on the Y-axis.</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 28\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/New-ExcelChartDefinition/#-yminvalue","title":"-YMinValue","text":"<p>Minimum value on the Y-axis.</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 30\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/New-ExcelChartDefinition/#-yrange","title":"-YRange","text":"<p>The range(s) of cells holding values for the Y-Axis - usually \"data\".</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 5\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/New-ExcelChartDefinition/#commonparameters","title":"CommonParameters","text":"<p>This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters.</p>"},{"location":"commands/New-ExcelChartDefinition/#inputs","title":"INPUTS","text":""},{"location":"commands/New-ExcelChartDefinition/#outputs","title":"OUTPUTS","text":""},{"location":"commands/New-ExcelChartDefinition/#notes","title":"NOTES","text":""},{"location":"commands/New-ExcelChartDefinition/#related-links","title":"RELATED LINKS","text":""},{"location":"commands/New-ExcelStyle/","title":"New-ExcelStyle","text":""},{"location":"commands/New-ExcelStyle/#synopsis","title":"SYNOPSIS","text":"<p>{{ Fill in the Synopsis }}</p>"},{"location":"commands/New-ExcelStyle/#syntax","title":"SYNTAX","text":"<pre><code>New-ExcelStyle [[-Range] &lt;Object&gt;] [[-NumberFormat] &lt;Object&gt;] [[-BorderAround] &lt;ExcelBorderStyle&gt;]\n [[-BorderColor] &lt;Object&gt;] [[-BorderBottom] &lt;ExcelBorderStyle&gt;] [[-BorderTop] &lt;ExcelBorderStyle&gt;]\n [[-BorderLeft] &lt;ExcelBorderStyle&gt;] [[-BorderRight] &lt;ExcelBorderStyle&gt;] [[-FontColor] &lt;Object&gt;]\n [[-Value] &lt;Object&gt;] [[-Formula] &lt;Object&gt;] [-ArrayFormula] [-ResetFont] [-Bold] [-Italic] [-Underline]\n [[-UnderLineType] &lt;ExcelUnderLineType&gt;] [-StrikeThru] [[-FontShift] &lt;ExcelVerticalAlignmentFont&gt;]\n [[-FontName] &lt;String&gt;] [[-FontSize] &lt;Single&gt;] [[-BackgroundColor] &lt;Object&gt;]\n [[-BackgroundPattern] &lt;ExcelFillStyle&gt;] [[-PatternColor] &lt;Object&gt;] [-WrapText]\n [[-HorizontalAlignment] &lt;ExcelHorizontalAlignment&gt;] [[-VerticalAlignment] &lt;ExcelVerticalAlignment&gt;]\n [[-TextRotation] &lt;Int32&gt;] [-AutoSize] [[-Width] &lt;Single&gt;] [[-Height] &lt;Single&gt;] [-Hidden] [-Locked] [-Merge]\n [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"commands/New-ExcelStyle/#description","title":"DESCRIPTION","text":"<p>{{ Fill in the Description }}</p>"},{"location":"commands/New-ExcelStyle/#examples","title":"EXAMPLES","text":""},{"location":"commands/New-ExcelStyle/#example-1","title":"EXAMPLE 1","text":"<pre><code>PS C:\\&gt; {{ Add example code here }}\n</code></pre> <p>{{ Add example description here }}</p>"},{"location":"commands/New-ExcelStyle/#parameters","title":"PARAMETERS","text":""},{"location":"commands/New-ExcelStyle/#-arrayformula","title":"-ArrayFormula","text":"<p>{{ Fill ArrayFormula Description }}</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/New-ExcelStyle/#-autosize","title":"-AutoSize","text":"<p>{{ Fill AutoSize Description }}</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases: AutoFit\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/New-ExcelStyle/#-backgroundcolor","title":"-BackgroundColor","text":"<p>{{ Fill BackgroundColor Description }}</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 15\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/New-ExcelStyle/#-backgroundpattern","title":"-BackgroundPattern","text":"<p>{{ Fill BackgroundPattern Description }}</p> <pre><code>Type: ExcelFillStyle\nParameter Sets: (All)\nAliases:\nAccepted values: None, Solid, DarkGray, MediumGray, LightGray, Gray125, Gray0625, DarkVertical, DarkHorizontal, DarkDown, DarkUp, DarkGrid, DarkTrellis, LightVertical, LightHorizontal, LightDown, LightUp, LightGrid, LightTrellis\n\nRequired: False\nPosition: 16\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/New-ExcelStyle/#-bold","title":"-Bold","text":"<p>{{ Fill Bold Description }}</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/New-ExcelStyle/#-borderaround","title":"-BorderAround","text":"<p>{{ Fill BorderAround Description }}</p> <pre><code>Type: ExcelBorderStyle\nParameter Sets: (All)\nAliases:\nAccepted values: None, Hair, Dotted, DashDot, Thin, DashDotDot, Dashed, MediumDashDotDot, MediumDashed, MediumDashDot, Thick, Medium, Double\n\nRequired: False\nPosition: 2\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/New-ExcelStyle/#-borderbottom","title":"-BorderBottom","text":"<p>{{ Fill BorderBottom Description }}</p> <pre><code>Type: ExcelBorderStyle\nParameter Sets: (All)\nAliases:\nAccepted values: None, Hair, Dotted, DashDot, Thin, DashDotDot, Dashed, MediumDashDotDot, MediumDashed, MediumDashDot, Thick, Medium, Double\n\nRequired: False\nPosition: 4\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/New-ExcelStyle/#-bordercolor","title":"-BorderColor","text":"<p>{{ Fill BorderColor Description }}</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 3\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/New-ExcelStyle/#-borderleft","title":"-BorderLeft","text":"<p>{{ Fill BorderLeft Description }}</p> <pre><code>Type: ExcelBorderStyle\nParameter Sets: (All)\nAliases:\nAccepted values: None, Hair, Dotted, DashDot, Thin, DashDotDot, Dashed, MediumDashDotDot, MediumDashed, MediumDashDot, Thick, Medium, Double\n\nRequired: False\nPosition: 6\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/New-ExcelStyle/#-borderright","title":"-BorderRight","text":"<p>{{ Fill BorderRight Description }}</p> <pre><code>Type: ExcelBorderStyle\nParameter Sets: (All)\nAliases:\nAccepted values: None, Hair, Dotted, DashDot, Thin, DashDotDot, Dashed, MediumDashDotDot, MediumDashed, MediumDashDot, Thick, Medium, Double\n\nRequired: False\nPosition: 7\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/New-ExcelStyle/#-bordertop","title":"-BorderTop","text":"<p>{{ Fill BorderTop Description }}</p> <pre><code>Type: ExcelBorderStyle\nParameter Sets: (All)\nAliases:\nAccepted values: None, Hair, Dotted, DashDot, Thin, DashDotDot, Dashed, MediumDashDotDot, MediumDashed, MediumDashDot, Thick, Medium, Double\n\nRequired: False\nPosition: 5\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/New-ExcelStyle/#-fontcolor","title":"-FontColor","text":"<p>{{ Fill FontColor Description }}</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases: ForegroundColor\n\nRequired: False\nPosition: 8\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/New-ExcelStyle/#-fontname","title":"-FontName","text":"<p>{{ Fill FontName Description }}</p> <pre><code>Type: String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 13\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/New-ExcelStyle/#-fontshift","title":"-FontShift","text":"<p>{{ Fill FontShift Description }}</p> <pre><code>Type: ExcelVerticalAlignmentFont\nParameter Sets: (All)\nAliases:\nAccepted values: None, Baseline, Subscript, Superscript\n\nRequired: False\nPosition: 12\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/New-ExcelStyle/#-fontsize","title":"-FontSize","text":"<p>{{ Fill FontSize Description }}</p> <pre><code>Type: Single\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 14\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/New-ExcelStyle/#-formula","title":"-Formula","text":"<p>{{ Fill Formula Description }}</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 10\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/New-ExcelStyle/#-height","title":"-Height","text":"<p>{{ Fill Height Description }}</p> <pre><code>Type: Single\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 22\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/New-ExcelStyle/#-hidden","title":"-Hidden","text":"<p>{{ Fill Hidden Description }}</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases: Hide\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/New-ExcelStyle/#-horizontalalignment","title":"-HorizontalAlignment","text":"<p>{{ Fill HorizontalAlignment Description }}</p> <pre><code>Type: ExcelHorizontalAlignment\nParameter Sets: (All)\nAliases:\nAccepted values: General, Left, Center, CenterContinuous, Right, Fill, Distributed, Justify\n\nRequired: False\nPosition: 18\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/New-ExcelStyle/#-italic","title":"-Italic","text":"<p>{{ Fill Italic Description }}</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/New-ExcelStyle/#-locked","title":"-Locked","text":"<p>{{ Fill Locked Description }}</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/New-ExcelStyle/#-merge","title":"-Merge","text":"<p>{{ Fill Merge Description }}</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/New-ExcelStyle/#-numberformat","title":"-NumberFormat","text":"<p>{{ Fill NumberFormat Description }}</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases: NFormat\n\nRequired: False\nPosition: 1\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/New-ExcelStyle/#-patterncolor","title":"-PatternColor","text":"<p>{{ Fill PatternColor Description }}</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases: PatternColour\n\nRequired: False\nPosition: 17\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/New-ExcelStyle/#-range","title":"-Range","text":"<p>{{ Fill Range Description }}</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases: Address\n\nRequired: False\nPosition: 0\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/New-ExcelStyle/#-resetfont","title":"-ResetFont","text":"<p>{{ Fill ResetFont Description }}</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/New-ExcelStyle/#-strikethru","title":"-StrikeThru","text":"<p>{{ Fill StrikeThru Description }}</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/New-ExcelStyle/#-textrotation","title":"-TextRotation","text":"<p>{{ Fill TextRotation Description }}</p> <pre><code>Type: Int32\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 20\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/New-ExcelStyle/#-underline","title":"-Underline","text":"<p>{{ Fill Underline Description }}</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/New-ExcelStyle/#-underlinetype","title":"-UnderLineType","text":"<p>{{ Fill UnderLineType Description }}</p> <pre><code>Type: ExcelUnderLineType\nParameter Sets: (All)\nAliases:\nAccepted values: None, Single, Double, SingleAccounting, DoubleAccounting\n\nRequired: False\nPosition: 11\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/New-ExcelStyle/#-value","title":"-Value","text":"<p>{{ Fill Value Description }}</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 9\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/New-ExcelStyle/#-verticalalignment","title":"-VerticalAlignment","text":"<p>{{ Fill VerticalAlignment Description }}</p> <pre><code>Type: ExcelVerticalAlignment\nParameter Sets: (All)\nAliases:\nAccepted values: Top, Center, Bottom, Distributed, Justify\n\nRequired: False\nPosition: 19\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/New-ExcelStyle/#-width","title":"-Width","text":"<p>{{ Fill Width Description }}</p> <pre><code>Type: Single\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 21\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/New-ExcelStyle/#-wraptext","title":"-WrapText","text":"<p>{{ Fill WrapText Description }}</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/New-ExcelStyle/#commonparameters","title":"CommonParameters","text":"<p>This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters.</p>"},{"location":"commands/New-ExcelStyle/#inputs","title":"INPUTS","text":""},{"location":"commands/New-ExcelStyle/#none","title":"None","text":""},{"location":"commands/New-ExcelStyle/#outputs","title":"OUTPUTS","text":""},{"location":"commands/New-ExcelStyle/#systemobject","title":"System.Object","text":""},{"location":"commands/New-ExcelStyle/#notes","title":"NOTES","text":""},{"location":"commands/New-ExcelStyle/#related-links","title":"RELATED LINKS","text":""},{"location":"commands/New-PSItem/","title":"New-PSItem","text":""},{"location":"commands/New-PSItem/#synopsis","title":"SYNOPSIS","text":"<p>{{ Fill in the Synopsis }}</p>"},{"location":"commands/New-PSItem/#syntax","title":"SYNTAX","text":"<pre><code>New-PSItem [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"commands/New-PSItem/#description","title":"DESCRIPTION","text":"<p>{{ Fill in the Description }}</p>"},{"location":"commands/New-PSItem/#examples","title":"EXAMPLES","text":""},{"location":"commands/New-PSItem/#example-1","title":"EXAMPLE 1","text":"<pre><code>PS C:\\&gt; {{ Add example code here }}\n</code></pre> <p>{{ Add example description here }}</p>"},{"location":"commands/New-PSItem/#parameters","title":"PARAMETERS","text":""},{"location":"commands/New-PSItem/#commonparameters","title":"CommonParameters","text":"<p>This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters.</p>"},{"location":"commands/New-PSItem/#inputs","title":"INPUTS","text":""},{"location":"commands/New-PSItem/#none","title":"None","text":""},{"location":"commands/New-PSItem/#outputs","title":"OUTPUTS","text":""},{"location":"commands/New-PSItem/#systemobject","title":"System.Object","text":""},{"location":"commands/New-PSItem/#notes","title":"NOTES","text":""},{"location":"commands/New-PSItem/#related-links","title":"RELATED LINKS","text":""},{"location":"commands/New-PivotTableDefinition/","title":"New-PivotTableDefinition","text":""},{"location":"commands/New-PivotTableDefinition/#synopsis","title":"SYNOPSIS","text":"<p>Creates PivotTable definitons for Export-Excel</p>"},{"location":"commands/New-PivotTableDefinition/#syntax","title":"SYNTAX","text":""},{"location":"commands/New-PivotTableDefinition/#chartbydef","title":"ChartbyDef","text":"<pre><code>New-PivotTableDefinition -PivotTableName &lt;Object&gt; [-SourceWorksheet &lt;Object&gt;] [-SourceRange &lt;Object&gt;]\n [-PivotRows &lt;Object&gt;] [-PivotData &lt;Hashtable&gt;] [-PivotColumns &lt;Object&gt;] [-PivotFilter &lt;Object&gt;]\n [-PivotDataToColumn] [-PivotTotals &lt;String&gt;] [-NoTotalsInPivot] [-GroupDateRow &lt;String&gt;]\n [-GroupDateColumn &lt;String&gt;] [-GroupDatePart &lt;eDateGroupBy[]&gt;] [-GroupNumericRow &lt;String&gt;]\n [-GroupNumericColumn &lt;String&gt;] [-GroupNumericMin &lt;Double&gt;] [-GroupNumericMax &lt;Double&gt;]\n [-GroupNumericInterval &lt;Double&gt;] [-PivotNumberFormat &lt;String&gt;] [-PivotTableStyle &lt;TableStyles&gt;]\n -PivotChartDefinition &lt;Object&gt; [-Activate] [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"commands/New-PivotTableDefinition/#chartbyparams","title":"ChartbyParams","text":"<pre><code>New-PivotTableDefinition -PivotTableName &lt;Object&gt; [-SourceWorksheet &lt;Object&gt;] [-SourceRange &lt;Object&gt;]\n [-PivotRows &lt;Object&gt;] [-PivotData &lt;Hashtable&gt;] [-PivotColumns &lt;Object&gt;] [-PivotFilter &lt;Object&gt;]\n [-PivotDataToColumn] [-PivotTotals &lt;String&gt;] [-NoTotalsInPivot] [-GroupDateRow &lt;String&gt;]\n [-GroupDateColumn &lt;String&gt;] [-GroupDatePart &lt;eDateGroupBy[]&gt;] [-GroupNumericRow &lt;String&gt;]\n [-GroupNumericColumn &lt;String&gt;] [-GroupNumericMin &lt;Double&gt;] [-GroupNumericMax &lt;Double&gt;]\n [-GroupNumericInterval &lt;Double&gt;] [-PivotNumberFormat &lt;String&gt;] [-PivotTableStyle &lt;TableStyles&gt;]\n [-IncludePivotChart] [-ChartTitle &lt;String&gt;] [-ChartHeight &lt;Int32&gt;] [-ChartWidth &lt;Int32&gt;] [-ChartRow &lt;Int32&gt;]\n [-ChartColumn &lt;Int32&gt;] [-ChartRowOffSetPixels &lt;Int32&gt;] [-ChartColumnOffSetPixels &lt;Int32&gt;]\n [-ChartType &lt;eChartType&gt;] [-NoLegend] [-ShowCategory] [-ShowPercent] [-Activate] [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"commands/New-PivotTableDefinition/#description","title":"DESCRIPTION","text":"<p>Export-Excel allows a single PivotTable to be defined using the parameters -IncludePivotTable, -PivotColumns, -PivotRows, -PivotData, -PivotFilter, -PivotTotals, -PivotDataToColumn, -IncludePivotChart and -ChartType.</p> <p>Its -PivotTableDefintion paramater allows multiple PivotTables to be defined, with additional parameters. New-PivotTableDefinition is a convenient way to build these definitions.</p>"},{"location":"commands/New-PivotTableDefinition/#examples","title":"EXAMPLES","text":""},{"location":"commands/New-PivotTableDefinition/#example-1","title":"EXAMPLE 1","text":"<pre><code>PS\\&gt; $pt = New-PivotTableDefinition -PivotTableName \"PT1\" -SourceWorkSheet \"Sheet1\" -PivotRows \"Status\" -PivotData @{Status='Count'} -PivotFilter 'StartType' -IncludePivotChart -ChartType BarClustered3D\nPS\\&gt; $Pt += New-PivotTableDefinition -PivotTableName \"PT2\" -SourceWorkSheet \"Sheet2\" -PivotRows \"Company\" -PivotData @{Company='Count'} -IncludePivotChart -ChartType PieExploded3D -ShowPercent -ChartTitle \"Breakdown of processes by company\"\nPS\\&gt; Get-Service | Select-Object -Property Status,Name,DisplayName,StartType | Export-Excel -Path .\\test.xlsx -AutoSize\nPS\\&gt; Get-Process | Select-Object -Property Name,Company,Handles,CPU,VM | Export-Excel -Path .\\test.xlsx -AutoSize -WorksheetName 'sheet2'\nPS\\&gt; $excel = Export-Excel -Path .\\test.xlsx -PivotTableDefinition $pt -Show\n</code></pre> <p>This is a re-work of one of the examples in Export-Excel - instead of writing out the pivot definition hash-table, it is built by calling New-PivotTableDefinition.</p>"},{"location":"commands/New-PivotTableDefinition/#parameters","title":"PARAMETERS","text":""},{"location":"commands/New-PivotTableDefinition/#-activate","title":"-Activate","text":"<p>If there is already content in the workbook the sheet with the PivotTable will not be active UNLESS Activate is specified</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/New-PivotTableDefinition/#-chartcolumn","title":"-ChartColumn","text":"<p>Cell position of the top left corner of the chart, there will be this number of cells to the left of the chart (default is 4, chart starts at left edge of column E)</p> <pre><code>Type: Int32\nParameter Sets: ChartbyParams\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: 4\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/New-PivotTableDefinition/#-chartcolumnoffsetpixels","title":"-ChartColumnOffSetPixels","text":"<p>Horizontal offset of the chart from the cell corner.</p> <pre><code>Type: Int32\nParameter Sets: ChartbyParams\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: 0\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/New-PivotTableDefinition/#-chartheight","title":"-ChartHeight","text":"<p>Height of the chart in Pixels (400 by default)</p> <pre><code>Type: Int32\nParameter Sets: ChartbyParams\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: 400\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/New-PivotTableDefinition/#-chartrow","title":"-ChartRow","text":"<p>Cell position of the top left corner of the chart, there will be this number of rows above the top edge of the chart (default is 0, chart starts at top edge of row 1).</p> <pre><code>Type: Int32\nParameter Sets: ChartbyParams\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: 0\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/New-PivotTableDefinition/#-chartrowoffsetpixels","title":"-ChartRowOffSetPixels","text":"<p>Vertical offset of the chart from the cell corner.</p> <pre><code>Type: Int32\nParameter Sets: ChartbyParams\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: 0\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/New-PivotTableDefinition/#-charttitle","title":"-ChartTitle","text":"<p>Optional title for the pivot chart, by default the title omitted.</p> <pre><code>Type: String\nParameter Sets: ChartbyParams\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/New-PivotTableDefinition/#-charttype","title":"-ChartType","text":"<p>Type of chart</p> <pre><code>Type: eChartType\nParameter Sets: ChartbyParams\nAliases:\nAccepted values: Area, Line, Pie, Bubble, ColumnClustered, ColumnStacked, ColumnStacked100, ColumnClustered3D, ColumnStacked3D, ColumnStacked1003D, BarClustered, BarStacked, BarStacked100, BarClustered3D, BarStacked3D, BarStacked1003D, LineStacked, LineStacked100, LineMarkers, LineMarkersStacked, LineMarkersStacked100, PieOfPie, PieExploded, PieExploded3D, BarOfPie, XYScatterSmooth, XYScatterSmoothNoMarkers, XYScatterLines, XYScatterLinesNoMarkers, AreaStacked, AreaStacked100, AreaStacked3D, AreaStacked1003D, DoughnutExploded, RadarMarkers, RadarFilled, Surface, SurfaceWireframe, SurfaceTopView, SurfaceTopViewWireframe, Bubble3DEffect, StockHLC, StockOHLC, StockVHLC, StockVOHLC, CylinderColClustered, CylinderColStacked, CylinderColStacked100, CylinderBarClustered, CylinderBarStacked, CylinderBarStacked100, CylinderCol, ConeColClustered, ConeColStacked, ConeColStacked100, ConeBarClustered, ConeBarStacked, ConeBarStacked100, ConeCol, PyramidColClustered, PyramidColStacked, PyramidColStacked100, PyramidBarClustered, PyramidBarStacked, PyramidBarStacked100, PyramidCol, XYScatter, Radar, Doughnut, Pie3D, Line3D, Column3D, Area3D\n\nRequired: False\nPosition: Named\nDefault value: Pie\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/New-PivotTableDefinition/#-chartwidth","title":"-ChartWidth","text":"<p>Width of the chart in Pixels (600 by default)</p> <pre><code>Type: Int32\nParameter Sets: ChartbyParams\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: 600\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/New-PivotTableDefinition/#-groupdatecolumn","title":"-GroupDateColumn","text":"<p>The name of a column field which should be grouped by parts of the date/time (ignored if GroupDatePart is not specified)</p> <pre><code>Type: String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/New-PivotTableDefinition/#-groupdatepart","title":"-GroupDatePart","text":"<p>The Part(s) of the date to use in the grouping (ignored if GroupDateRow is not specified)</p> <pre><code>Type: eDateGroupBy[]\nParameter Sets: (All)\nAliases:\nAccepted values: Years, Quarters, Months, Days, Hours, Minutes, Seconds\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/New-PivotTableDefinition/#-groupdaterow","title":"-GroupDateRow","text":"<p>The name of a row field which should be grouped by parts of the date/time (ignored if GroupDatePart is not specified)</p> <pre><code>Type: String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/New-PivotTableDefinition/#-groupnumericcolumn","title":"-GroupNumericColumn","text":"<p>The name of a column field which should be grouped by Number (e.g 0-99, 100-199, 200-299 )</p> <pre><code>Type: String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/New-PivotTableDefinition/#-groupnumericinterval","title":"-GroupNumericInterval","text":"<p>The interval for grouping</p> <pre><code>Type: Double\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: 100\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/New-PivotTableDefinition/#-groupnumericmax","title":"-GroupNumericMax","text":"<p>The endpoint for grouping</p> <pre><code>Type: Double\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: 1.79769313486232E+308\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/New-PivotTableDefinition/#-groupnumericmin","title":"-GroupNumericMin","text":"<p>The starting point for grouping</p> <pre><code>Type: Double\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: 0\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/New-PivotTableDefinition/#-groupnumericrow","title":"-GroupNumericRow","text":"<p>The name of a row field which should be grouped by Number (e.g 0-99, 100-199, 200-299 )</p> <pre><code>Type: String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/New-PivotTableDefinition/#-includepivotchart","title":"-IncludePivotChart","text":"<p>If specified a chart Will be included.</p> <pre><code>Type: SwitchParameter\nParameter Sets: ChartbyParams\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/New-PivotTableDefinition/#-nolegend","title":"-NoLegend","text":"<p>If specified hides the chart legend</p> <pre><code>Type: SwitchParameter\nParameter Sets: ChartbyParams\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/New-PivotTableDefinition/#-nototalsinpivot","title":"-NoTotalsInPivot","text":"<p>Included for compatibility - equivalent to -PivotTotals \"None\"</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/New-PivotTableDefinition/#-pivotchartdefinition","title":"-PivotChartDefinition","text":"<p>Use a chart definition instead of specifying chart settings one by one</p> <pre><code>Type: Object\nParameter Sets: ChartbyDef\nAliases:\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName)\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/New-PivotTableDefinition/#-pivotcolumns","title":"-PivotColumns","text":"<p>Fields to set as columns in the PivotTable</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/New-PivotTableDefinition/#-pivotdata","title":"-PivotData","text":"<p>A hash-table in form \"FieldName\"=\"Function\", where function is one of Average, Count, CountNums, Max, Min, Product, None, StdDev, StdDevP, Sum, Var, VarP</p> <pre><code>Type: Hashtable\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/New-PivotTableDefinition/#-pivotdatatocolumn","title":"-PivotDataToColumn","text":"<p>If there are multiple datasets in a PivotTable, by default they are shown seperatate rows under the given row heading; this switch makes them seperate columns.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/New-PivotTableDefinition/#-pivotfilter","title":"-PivotFilter","text":"<p>Fields to use to filter in the PivotTable</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/New-PivotTableDefinition/#-pivotnumberformat","title":"-PivotNumberFormat","text":"<p>Number format to apply to the data cells in the PivotTable</p> <pre><code>Type: String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/New-PivotTableDefinition/#-pivotrows","title":"-PivotRows","text":"<p>Fields to set as rows in the PivotTable</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/New-PivotTableDefinition/#-pivottablename","title":"-PivotTableName","text":"<p>Name for the new pivot table</p> <p>This command previously had a typo - and has an alias to avoid breaking scripts This will be removed in a future release</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases: PivtoTableName\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/New-PivotTableDefinition/#-pivottablestyle","title":"-PivotTableStyle","text":"<p>Apply a table style to the PivotTable</p> <pre><code>Type: TableStyles\nParameter Sets: (All)\nAliases:\nAccepted values: None, Custom, Light1, Light2, Light3, Light4, Light5, Light6, Light7, Light8, Light9, Light10, Light11, Light12, Light13, Light14, Light15, Light16, Light17, Light18, Light19, Light20, Light21, Medium1, Medium2, Medium3, Medium4, Medium5, Medium6, Medium7, Medium8, Medium9, Medium10, Medium11, Medium12, Medium13, Medium14, Medium15, Medium16, Medium17, Medium18, Medium19, Medium20, Medium21, Medium22, Medium23, Medium24, Medium25, Medium26, Medium27, Medium28, Dark1, Dark2, Dark3, Dark4, Dark5, Dark6, Dark7, Dark8, Dark9, Dark10, Dark11\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/New-PivotTableDefinition/#-pivottotals","title":"-PivotTotals","text":"<p>By default PivotTables have Totals for each Row (on the right) and for each column at the bottom. This allows just one or neither to be selected.</p> <pre><code>Type: String\nParameter Sets: (All)\nAliases:\nAccepted values: Both, Columns, Rows, None\n\nRequired: False\nPosition: Named\nDefault value: Both\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/New-PivotTableDefinition/#-showcategory","title":"-ShowCategory","text":"<p>if specified attaches the category to slices in a pie chart : not supported on all chart types, this may give errors if applied to an unsupported type.</p> <pre><code>Type: SwitchParameter\nParameter Sets: ChartbyParams\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/New-PivotTableDefinition/#-showpercent","title":"-ShowPercent","text":"<p>If specified attaches percentages to slices in a pie chart.</p> <pre><code>Type: SwitchParameter\nParameter Sets: ChartbyParams\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/New-PivotTableDefinition/#-sourcerange","title":"-SourceRange","text":"<p>Address range in the worksheet e.g \"A10:F20\" - the first row must contain the column names to pivot by: if the range is not specified the whole source sheet will be used.</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/New-PivotTableDefinition/#-sourceworksheet","title":"-SourceWorksheet","text":"<p>Worksheet where the data is found</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/New-PivotTableDefinition/#commonparameters","title":"CommonParameters","text":"<p>This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters.</p>"},{"location":"commands/New-PivotTableDefinition/#inputs","title":"INPUTS","text":""},{"location":"commands/New-PivotTableDefinition/#outputs","title":"OUTPUTS","text":""},{"location":"commands/New-PivotTableDefinition/#notes","title":"NOTES","text":""},{"location":"commands/New-PivotTableDefinition/#related-links","title":"RELATED LINKS","text":""},{"location":"commands/New-Plot/","title":"New-Plot","text":""},{"location":"commands/New-Plot/#synopsis","title":"SYNOPSIS","text":"<p>{{ Fill in the Synopsis }}</p>"},{"location":"commands/New-Plot/#syntax","title":"SYNTAX","text":"<pre><code>New-Plot [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"commands/New-Plot/#description","title":"DESCRIPTION","text":"<p>{{ Fill in the Description }}</p>"},{"location":"commands/New-Plot/#examples","title":"EXAMPLES","text":""},{"location":"commands/New-Plot/#example-1","title":"EXAMPLE 1","text":"<pre><code>PS C:\\&gt; {{ Add example code here }}\n</code></pre> <p>{{ Add example description here }}</p>"},{"location":"commands/New-Plot/#parameters","title":"PARAMETERS","text":""},{"location":"commands/New-Plot/#commonparameters","title":"CommonParameters","text":"<p>This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters.</p>"},{"location":"commands/New-Plot/#inputs","title":"INPUTS","text":""},{"location":"commands/New-Plot/#none","title":"None","text":""},{"location":"commands/New-Plot/#outputs","title":"OUTPUTS","text":""},{"location":"commands/New-Plot/#systemobject","title":"System.Object","text":""},{"location":"commands/New-Plot/#notes","title":"NOTES","text":""},{"location":"commands/New-Plot/#related-links","title":"RELATED LINKS","text":""},{"location":"commands/Open-ExcelPackage/","title":"Open-ExcelPackage","text":""},{"location":"commands/Open-ExcelPackage/#synopsis","title":"SYNOPSIS","text":"<p>Returns an ExcelPackage object for the specified XLSX file.</p>"},{"location":"commands/Open-ExcelPackage/#syntax","title":"SYNTAX","text":"<pre><code>Open-ExcelPackage [-Path] &lt;Object&gt; [-KillExcel] [[-Password] &lt;String&gt;] [-Create] [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"commands/Open-ExcelPackage/#description","title":"DESCRIPTION","text":"<p>Import-Excel and Export-Excel open an Excel file, carry out their tasks and close it again.</p> <p>Sometimes it is necessary to open a file and do other work on it. Open-ExcelPackage allows the file to be opened for these tasks.</p> <p>It takes a -KillExcel switch to make sure Excel is not holding the file open; a -Password parameter for existing protected files, and a -Create switch to set-up a new file if no file already exists.</p>"},{"location":"commands/Open-ExcelPackage/#examples","title":"EXAMPLES","text":""},{"location":"commands/Open-ExcelPackage/#example-1","title":"EXAMPLE 1","text":"<pre><code>PS\\&gt; $excel = Open-ExcelPackage -Path \"$env:TEMP\\test99.xlsx\" -Create\nPS\\&gt; $ws = Add-WorkSheet -ExcelPackage $excel\n</code></pre> <p>This will create a new file in the temp folder if it doesn't already exist. It then adds a worksheet - because no name is specified it will use the default name of \"Sheet1\"</p>"},{"location":"commands/Open-ExcelPackage/#example-2","title":"EXAMPLE 2","text":"<pre><code>PS\\&gt; $excel= Open-ExcelPackage -path \"$xlPath\" -Password $password\nPS\\&gt; $sheet1 = $excel.Workbook.Worksheets[\"sheet1\"]\nPS\\&gt; Set-ExcelRange -Range $sheet1.Cells [\"E1:S1048576\" ], $sheet1.Cells [\"V1:V1048576\" ] -NFormat ( [cultureinfo ]::CurrentCulture.DateTimeFormat.ShortDatePattern)\nPS\\&gt; Close-ExcelPackage $excel -Show\n</code></pre> <p>This will open the password protected file at $xlPath using the password stored in $Password. Sheet1 is selected and formatting applied to two blocks of the sheet; then the file is saved and loaded into Excel.</p>"},{"location":"commands/Open-ExcelPackage/#parameters","title":"PARAMETERS","text":""},{"location":"commands/Open-ExcelPackage/#-create","title":"-Create","text":"<p>By default Open-ExcelPackage will only open an existing file; -Create instructs it to create a new file if required.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Open-ExcelPackage/#-killexcel","title":"-KillExcel","text":"<p>If specified, any running instances of Excel will be terminated before opening the file. This may result in lost work, so should be used with caution.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Open-ExcelPackage/#-password","title":"-Password","text":"<p>The password for a protected worksheet, as a [normal] string (not a secure string).</p> <pre><code>Type: String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 1\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Open-ExcelPackage/#-path","title":"-Path","text":"<p>The path to the file to open.</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: True\nPosition: 0\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Open-ExcelPackage/#commonparameters","title":"CommonParameters","text":"<p>This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters.</p>"},{"location":"commands/Open-ExcelPackage/#inputs","title":"INPUTS","text":""},{"location":"commands/Open-ExcelPackage/#outputs","title":"OUTPUTS","text":""},{"location":"commands/Open-ExcelPackage/#officeopenxmlexcelpackage","title":"OfficeOpenXml.ExcelPackage","text":""},{"location":"commands/Open-ExcelPackage/#notes","title":"NOTES","text":""},{"location":"commands/Open-ExcelPackage/#related-links","title":"RELATED LINKS","text":""},{"location":"commands/PieChart/","title":"PieChart","text":""},{"location":"commands/PieChart/#synopsis","title":"SYNOPSIS","text":"<p>{{ Fill in the Synopsis }}</p>"},{"location":"commands/PieChart/#syntax","title":"SYNTAX","text":"<pre><code>PieChart [[-targetData] &lt;Object&gt;] [[-title] &lt;Object&gt;] [[-ChartType] &lt;eChartType&gt;] [-NoLegend] [-ShowCategory]\n [-ShowPercent] [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"commands/PieChart/#description","title":"DESCRIPTION","text":"<p>{{ Fill in the Description }}</p>"},{"location":"commands/PieChart/#examples","title":"EXAMPLES","text":""},{"location":"commands/PieChart/#example-1","title":"EXAMPLE 1","text":"<pre><code>PS C:\\&gt; {{ Add example code here }}\n</code></pre> <p>{{ Add example description here }}</p>"},{"location":"commands/PieChart/#parameters","title":"PARAMETERS","text":""},{"location":"commands/PieChart/#-charttype","title":"-ChartType","text":"<p>{{ Fill ChartType Description }}</p> <pre><code>Type: eChartType\nParameter Sets: (All)\nAliases:\nAccepted values: Area, Line, Pie, Bubble, ColumnClustered, ColumnStacked, ColumnStacked100, ColumnClustered3D, ColumnStacked3D, ColumnStacked1003D, BarClustered, BarStacked, BarStacked100, BarClustered3D, BarStacked3D, BarStacked1003D, LineStacked, LineStacked100, LineMarkers, LineMarkersStacked, LineMarkersStacked100, PieOfPie, PieExploded, PieExploded3D, BarOfPie, XYScatterSmooth, XYScatterSmoothNoMarkers, XYScatterLines, XYScatterLinesNoMarkers, AreaStacked, AreaStacked100, AreaStacked3D, AreaStacked1003D, DoughnutExploded, RadarMarkers, RadarFilled, Surface, SurfaceWireframe, SurfaceTopView, SurfaceTopViewWireframe, Bubble3DEffect, StockHLC, StockOHLC, StockVHLC, StockVOHLC, CylinderColClustered, CylinderColStacked, CylinderColStacked100, CylinderBarClustered, CylinderBarStacked, CylinderBarStacked100, CylinderCol, ConeColClustered, ConeColStacked, ConeColStacked100, ConeBarClustered, ConeBarStacked, ConeBarStacked100, ConeCol, PyramidColClustered, PyramidColStacked, PyramidColStacked100, PyramidBarClustered, PyramidBarStacked, PyramidBarStacked100, PyramidCol, XYScatter, Radar, Doughnut, Pie3D, Line3D, Column3D, Area3D\n\nRequired: False\nPosition: 2\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/PieChart/#-nolegend","title":"-NoLegend","text":"<p>{{ Fill NoLegend Description }}</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/PieChart/#-showcategory","title":"-ShowCategory","text":"<p>{{ Fill ShowCategory Description }}</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/PieChart/#-showpercent","title":"-ShowPercent","text":"<p>{{ Fill ShowPercent Description }}</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/PieChart/#-targetdata","title":"-targetData","text":"<p>{{ Fill targetData Description }}</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 0\nDefault value: None\nAccept pipeline input: True (ByValue)\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/PieChart/#-title","title":"-title","text":"<p>{{ Fill title Description }}</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 1\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/PieChart/#commonparameters","title":"CommonParameters","text":"<p>This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters.</p>"},{"location":"commands/PieChart/#inputs","title":"INPUTS","text":""},{"location":"commands/PieChart/#systemobject","title":"System.Object","text":""},{"location":"commands/PieChart/#outputs","title":"OUTPUTS","text":""},{"location":"commands/PieChart/#systemobject_1","title":"System.Object","text":""},{"location":"commands/PieChart/#notes","title":"NOTES","text":""},{"location":"commands/PieChart/#related-links","title":"RELATED LINKS","text":""},{"location":"commands/Pivot/","title":"Pivot","text":""},{"location":"commands/Pivot/#synopsis","title":"SYNOPSIS","text":"<p>{{ Fill in the Synopsis }}</p>"},{"location":"commands/Pivot/#syntax","title":"SYNTAX","text":"<pre><code>Pivot [[-targetData] &lt;Object&gt;] [[-pivotRows] &lt;Object&gt;] [[-pivotData] &lt;Object&gt;] [[-ChartType] &lt;eChartType&gt;]\n [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"commands/Pivot/#description","title":"DESCRIPTION","text":"<p>{{ Fill in the Description }}</p>"},{"location":"commands/Pivot/#examples","title":"EXAMPLES","text":""},{"location":"commands/Pivot/#example-1","title":"EXAMPLE 1","text":"<pre><code>PS C:\\&gt; {{ Add example code here }}\n</code></pre> <p>{{ Add example description here }}</p>"},{"location":"commands/Pivot/#parameters","title":"PARAMETERS","text":""},{"location":"commands/Pivot/#-charttype","title":"-ChartType","text":"<p>{{ Fill ChartType Description }}</p> <pre><code>Type: eChartType\nParameter Sets: (All)\nAliases:\nAccepted values: Area, Line, Pie, Bubble, ColumnClustered, ColumnStacked, ColumnStacked100, ColumnClustered3D, ColumnStacked3D, ColumnStacked1003D, BarClustered, BarStacked, BarStacked100, BarClustered3D, BarStacked3D, BarStacked1003D, LineStacked, LineStacked100, LineMarkers, LineMarkersStacked, LineMarkersStacked100, PieOfPie, PieExploded, PieExploded3D, BarOfPie, XYScatterSmooth, XYScatterSmoothNoMarkers, XYScatterLines, XYScatterLinesNoMarkers, AreaStacked, AreaStacked100, AreaStacked3D, AreaStacked1003D, DoughnutExploded, RadarMarkers, RadarFilled, Surface, SurfaceWireframe, SurfaceTopView, SurfaceTopViewWireframe, Bubble3DEffect, StockHLC, StockOHLC, StockVHLC, StockVOHLC, CylinderColClustered, CylinderColStacked, CylinderColStacked100, CylinderBarClustered, CylinderBarStacked, CylinderBarStacked100, CylinderCol, ConeColClustered, ConeColStacked, ConeColStacked100, ConeBarClustered, ConeBarStacked, ConeBarStacked100, ConeCol, PyramidColClustered, PyramidColStacked, PyramidColStacked100, PyramidBarClustered, PyramidBarStacked, PyramidBarStacked100, PyramidCol, XYScatter, Radar, Doughnut, Pie3D, Line3D, Column3D, Area3D\n\nRequired: False\nPosition: 3\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Pivot/#-pivotdata","title":"-pivotData","text":"<p>{{ Fill pivotData Description }}</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 2\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Pivot/#-pivotrows","title":"-pivotRows","text":"<p>{{ Fill pivotRows Description }}</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 1\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Pivot/#-targetdata","title":"-targetData","text":"<p>{{ Fill targetData Description }}</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 0\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Pivot/#commonparameters","title":"CommonParameters","text":"<p>This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters.</p>"},{"location":"commands/Pivot/#inputs","title":"INPUTS","text":""},{"location":"commands/Pivot/#none","title":"None","text":""},{"location":"commands/Pivot/#outputs","title":"OUTPUTS","text":""},{"location":"commands/Pivot/#systemobject","title":"System.Object","text":""},{"location":"commands/Pivot/#notes","title":"NOTES","text":""},{"location":"commands/Pivot/#related-links","title":"RELATED LINKS","text":""},{"location":"commands/Read-Clipboard/","title":"Read-Clipboard","text":""},{"location":"commands/Read-Clipboard/#synopsis","title":"SYNOPSIS","text":"<p>Read text from clipboard and pass to either ConvertFrom-Csv or ConvertFrom-Json. Check out the how to video - https://youtu.be/dv2GOH5sbpA</p>"},{"location":"commands/Read-Clipboard/#syntax","title":"SYNTAX","text":"<pre><code>Read-Clipboard [[-Delimiter] &lt;Object&gt;] [[-Header] &lt;Object&gt;] [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"commands/Read-Clipboard/#description","title":"DESCRIPTION","text":"<p>Read text from clipboard. It can read CSV or JSON. Plus, you can specify the delimiter and headers.</p>"},{"location":"commands/Read-Clipboard/#examples","title":"EXAMPLES","text":""},{"location":"commands/Read-Clipboard/#example-1","title":"EXAMPLE 1","text":"<pre><code>Read-Clipboard # Detects if the clipboard contains CSV, JSON, or Tab delimited data.\n</code></pre>"},{"location":"commands/Read-Clipboard/#example-2","title":"EXAMPLE 2","text":"<pre><code>Read-Clipboard -Delimiter '|' # Converts data using a pipe delimiter\n</code></pre>"},{"location":"commands/Read-Clipboard/#example-3","title":"EXAMPLE 3","text":"<pre><code>Read-Clipboard -Header 'P1', 'P2', 'P3' # Specify the header columns to be used\n</code></pre>"},{"location":"commands/Read-Clipboard/#parameters","title":"PARAMETERS","text":""},{"location":"commands/Read-Clipboard/#-delimiter","title":"-Delimiter","text":"<p>{{ Fill Delimiter Description }}</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 1\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Read-Clipboard/#-header","title":"-Header","text":"<p>{{ Fill Header Description }}</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 2\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Read-Clipboard/#commonparameters","title":"CommonParameters","text":"<p>This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters.</p>"},{"location":"commands/Read-Clipboard/#inputs","title":"INPUTS","text":""},{"location":"commands/Read-Clipboard/#outputs","title":"OUTPUTS","text":""},{"location":"commands/Read-Clipboard/#notes","title":"NOTES","text":""},{"location":"commands/Read-Clipboard/#related-links","title":"RELATED LINKS","text":""},{"location":"commands/Read-OleDbData/","title":"Read-OleDbData","text":""},{"location":"commands/Read-OleDbData/#synopsis","title":"SYNOPSIS","text":"<p>Read data from an OleDb source using dotnet classes. This allows for OleDb queries against excel spreadsheets. Examples will only be for querying xlsx files.</p> <p>For additional documentation, see Microsoft's documentation on the System.Data OleDb namespace here: https://docs.microsoft.com/en-us/dotnet/api/system.data.oledb</p>"},{"location":"commands/Read-OleDbData/#syntax","title":"SYNTAX","text":"<pre><code>Read-OleDbData [-ConnectionString] &lt;String&gt; [-SqlStatement] &lt;String&gt; [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"commands/Read-OleDbData/#description","title":"DESCRIPTION","text":"<p>Read data from an OleDb source using dotnet classes. This allows for OleDb queries against excel spreadsheets. Examples will only be for querying xlsx files using ACE.</p>"},{"location":"commands/Read-OleDbData/#examples","title":"EXAMPLES","text":""},{"location":"commands/Read-OleDbData/#example-1","title":"EXAMPLE 1","text":"<pre><code>Read-OleDbData `\n</code></pre> <p>-ConnectionString \"Provider=Microsoft.ACE.OLEDB.12.0;Data Source=file.xlsx;Extended Properties='Excel 12.0 Xml;HDR=NO;IMEX=1;'\" `     -SqlStatement \"select ROUND(F1) as [A] from [sheet1$A1:A1]\"</p>"},{"location":"commands/Read-OleDbData/#example-2","title":"EXAMPLE 2","text":"<pre><code>$ConnectionString = \"Provider=Microsoft.ACE.OLEDB.12.0;Data Source=file.xlsx;Extended Properties='Excel 12.0 Xml;HDR=NO;IMEX=1;'\"\n</code></pre> <p>$SqlStatement = \"select ROUND(F1) as [A] from [sheet1$A1:A1]\" Read-OleDbData -ConnectionString $ConnectionString -SqlStatement $SqlStatement</p>"},{"location":"commands/Read-OleDbData/#example-3","title":"EXAMPLE 3","text":"<pre><code>$ReadDataArgs = @{\n</code></pre> <p>SqlStatement = Get-Content query.sql -Raw     ConnectionString = \"Provider=Microsoft.ACE.OLEDB.12.0;Data Source=file.xlsx;Extended Properties='Excel 12.0 Xml;HDR=NO;IMEX=1;'\" } $Results = Read-OleDbData @ReadDataArgs</p>"},{"location":"commands/Read-OleDbData/#parameters","title":"PARAMETERS","text":""},{"location":"commands/Read-OleDbData/#-connectionstring","title":"-ConnectionString","text":"<p>{{ Fill ConnectionString Description }}</p> <pre><code>Type: String\nParameter Sets: (All)\nAliases:\n\nRequired: True\nPosition: 1\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Read-OleDbData/#-sqlstatement","title":"-SqlStatement","text":"<p>{{ Fill SqlStatement Description }}</p> <pre><code>Type: String\nParameter Sets: (All)\nAliases:\n\nRequired: True\nPosition: 2\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Read-OleDbData/#commonparameters","title":"CommonParameters","text":"<p>This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters.</p>"},{"location":"commands/Read-OleDbData/#inputs","title":"INPUTS","text":""},{"location":"commands/Read-OleDbData/#outputs","title":"OUTPUTS","text":""},{"location":"commands/Read-OleDbData/#notes","title":"NOTES","text":""},{"location":"commands/Read-OleDbData/#related-links","title":"RELATED LINKS","text":""},{"location":"commands/ReadClipboardImpl/","title":"ReadClipboardImpl","text":""},{"location":"commands/ReadClipboardImpl/#synopsis","title":"SYNOPSIS","text":"<p>{{ Fill in the Synopsis }}</p>"},{"location":"commands/ReadClipboardImpl/#syntax","title":"SYNTAX","text":"<pre><code>ReadClipboardImpl [-data] &lt;String&gt; [[-Delimiter] &lt;Object&gt;] [[-Header] &lt;Object&gt;] [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"commands/ReadClipboardImpl/#description","title":"DESCRIPTION","text":"<p>{{ Fill in the Description }}</p>"},{"location":"commands/ReadClipboardImpl/#examples","title":"EXAMPLES","text":""},{"location":"commands/ReadClipboardImpl/#example-1","title":"EXAMPLE 1","text":"<pre><code>PS C:\\&gt; {{ Add example code here }}\n</code></pre> <p>{{ Add example description here }}</p>"},{"location":"commands/ReadClipboardImpl/#parameters","title":"PARAMETERS","text":""},{"location":"commands/ReadClipboardImpl/#-data","title":"-data","text":"<p>{{ Fill data Description }}</p> <pre><code>Type: String\nParameter Sets: (All)\nAliases:\n\nRequired: True\nPosition: 0\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/ReadClipboardImpl/#-delimiter","title":"-Delimiter","text":"<p>{{ Fill Delimiter Description }}</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 1\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/ReadClipboardImpl/#-header","title":"-Header","text":"<p>{{ Fill Header Description }}</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 2\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/ReadClipboardImpl/#commonparameters","title":"CommonParameters","text":"<p>This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters.</p>"},{"location":"commands/ReadClipboardImpl/#inputs","title":"INPUTS","text":""},{"location":"commands/ReadClipboardImpl/#none","title":"None","text":""},{"location":"commands/ReadClipboardImpl/#outputs","title":"OUTPUTS","text":""},{"location":"commands/ReadClipboardImpl/#systemobject","title":"System.Object","text":""},{"location":"commands/ReadClipboardImpl/#notes","title":"NOTES","text":""},{"location":"commands/ReadClipboardImpl/#related-links","title":"RELATED LINKS","text":""},{"location":"commands/Remove-Worksheet/","title":"Remove-Worksheet","text":""},{"location":"commands/Remove-Worksheet/#synopsis","title":"SYNOPSIS","text":"<p>Removes one or more worksheets from one or more workbooks</p>"},{"location":"commands/Remove-Worksheet/#syntax","title":"SYNTAX","text":"<pre><code>Remove-Worksheet [[-FullName] &lt;Object&gt;] [[-WorksheetName] &lt;String[]&gt;] [-Show] [-WhatIf] [-Confirm]\n [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"commands/Remove-Worksheet/#description","title":"DESCRIPTION","text":""},{"location":"commands/Remove-Worksheet/#examples","title":"EXAMPLES","text":""},{"location":"commands/Remove-Worksheet/#example-1","title":"EXAMPLE 1","text":"<pre><code>PS\\&gt; Remove-WorkSheet -Path Test1.xlsx -WorksheetName Sheet1\n</code></pre> <p>Removes the worksheet named 'Sheet1' from 'Test1.xlsx'</p>"},{"location":"commands/Remove-Worksheet/#example-2","title":"EXAMPLE 2","text":"<pre><code>PS\\&gt; Remove-WorkSheet -Path Test1.xlsx -WorksheetName Sheet1,Target1\n</code></pre> <p>Removes the worksheet named 'Sheet1' and 'Target1' from 'Test1.xlsx'</p>"},{"location":"commands/Remove-Worksheet/#example-3","title":"EXAMPLE 3","text":"<pre><code>PS\\&gt; Remove-WorkSheet -Path Test1.xlsx -WorksheetName Sheet1,Target1 -Show\n</code></pre> <p>Removes the worksheets and then launches the xlsx in Excel</p>"},{"location":"commands/Remove-Worksheet/#example-1_1","title":"EXAMPLE 1","text":"<pre><code>PS\\&gt;  dir c:\\reports\\*.xlsx | Remove-WorkSheet\n</code></pre> <p>Removes 'Sheet1' from all the xlsx files in the c:\\reports directory</p>"},{"location":"commands/Remove-Worksheet/#parameters","title":"PARAMETERS","text":""},{"location":"commands/Remove-Worksheet/#-fullname","title":"-FullName","text":"<p>The fully qualified path to the XLSX file(s)</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases: Path\n\nRequired: False\nPosition: 0\nDefault value: None\nAccept pipeline input: True (ByPropertyName)\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Remove-Worksheet/#-show","title":"-Show","text":"<p>If specified the file will be opened in excel after the sheet is removed.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Remove-Worksheet/#-worksheetname","title":"-WorksheetName","text":"<p>The worksheet to be removed (sheet1 by default)</p> <pre><code>Type: String[]\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 1\nDefault value: Sheet1\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Remove-Worksheet/#-confirm","title":"-Confirm","text":"<p>Prompts you for confirmation before running the cmdlet.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases: cf\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Remove-Worksheet/#-whatif","title":"-WhatIf","text":"<p>Shows what would happen if the cmdlet runs. The cmdlet is not run.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases: wi\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Remove-Worksheet/#commonparameters","title":"CommonParameters","text":"<p>This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters.</p>"},{"location":"commands/Remove-Worksheet/#inputs","title":"INPUTS","text":""},{"location":"commands/Remove-Worksheet/#outputs","title":"OUTPUTS","text":""},{"location":"commands/Remove-Worksheet/#notes","title":"NOTES","text":""},{"location":"commands/Remove-Worksheet/#related-links","title":"RELATED LINKS","text":""},{"location":"commands/Select-Worksheet/","title":"Select-Worksheet","text":""},{"location":"commands/Select-Worksheet/#synopsis","title":"SYNOPSIS","text":"<p>Sets the selected tab in an Excel workbook to be the chosen sheet and unselects all the others.</p>"},{"location":"commands/Select-Worksheet/#syntax","title":"SYNTAX","text":""},{"location":"commands/Select-Worksheet/#package","title":"Package","text":"<pre><code>Select-Worksheet [-ExcelPackage] &lt;ExcelPackage&gt; [-WorksheetName &lt;String&gt;] [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"commands/Select-Worksheet/#workbook","title":"Workbook","text":"<pre><code>Select-Worksheet -ExcelWorkbook &lt;ExcelWorkbook&gt; [-WorksheetName &lt;String&gt;] [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"commands/Select-Worksheet/#sheet","title":"Sheet","text":"<pre><code>Select-Worksheet -ExcelWorksheet &lt;ExcelWorksheet&gt; [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"commands/Select-Worksheet/#description","title":"DESCRIPTION","text":"<p>Sometimes when a sheet is added we want it to be the active sheet, sometimes we want the active sheet to be left as it was. Select-Worksheet exists to change which sheet is the selected tab when Excel opens the file.</p>"},{"location":"commands/Select-Worksheet/#examples","title":"EXAMPLES","text":""},{"location":"commands/Select-Worksheet/#example-1","title":"EXAMPLE 1","text":"<pre><code>PS\\&gt; Select-Worksheet -ExcelWorkbook $ExcelWorkbook -WorksheetName \"NewSheet\"\n</code></pre> <p>$ExcelWorkbook holds a workbook object containing a sheet named \"NewSheet\"; This sheet will become the [only] active sheet in the workbook</p>"},{"location":"commands/Select-Worksheet/#example-2","title":"EXAMPLE 2","text":"<pre><code>PS\\&gt;  Select-Worksheet -ExcelPackage $Pkg -WorksheetName \"NewSheet2\"\n</code></pre> <p>$pkg holds an Excel Package, whose workbook contains a sheet named \"NewSheet2\" This sheet will become the [only] active sheet in the workbook.</p>"},{"location":"commands/Select-Worksheet/#example-3","title":"EXAMPLE 3","text":"<pre><code>PS\\&gt; Select-Worksheet -ExcelWorksheet $ws\n</code></pre> <p>$ws holds an Excel worksheet which will become the [only] active sheet in its workbook.</p>"},{"location":"commands/Select-Worksheet/#parameters","title":"PARAMETERS","text":""},{"location":"commands/Select-Worksheet/#-excelpackage","title":"-ExcelPackage","text":"<p>An object representing an ExcelPackage.</p> <pre><code>Type: ExcelPackage\nParameter Sets: Package\nAliases:\n\nRequired: True\nPosition: 0\nDefault value: None\nAccept pipeline input: True (ByValue)\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Select-Worksheet/#-excelworkbook","title":"-ExcelWorkbook","text":"<p>An Excel workbook to which the Worksheet will be added - a package contains one Workbook so you can use workbook or package as it suits.</p> <pre><code>Type: ExcelWorkbook\nParameter Sets: Workbook\nAliases:\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Select-Worksheet/#-excelworksheet","title":"-ExcelWorksheet","text":"<p>An object representing an Excel worksheet.</p> <pre><code>Type: ExcelWorksheet\nParameter Sets: Sheet\nAliases:\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Select-Worksheet/#-worksheetname","title":"-WorksheetName","text":"<p>The name of the worksheet \"Sheet1\" by default.</p> <pre><code>Type: String\nParameter Sets: Package, Workbook\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Select-Worksheet/#commonparameters","title":"CommonParameters","text":"<p>This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters.</p>"},{"location":"commands/Select-Worksheet/#inputs","title":"INPUTS","text":""},{"location":"commands/Select-Worksheet/#outputs","title":"OUTPUTS","text":""},{"location":"commands/Select-Worksheet/#notes","title":"NOTES","text":""},{"location":"commands/Select-Worksheet/#related-links","title":"RELATED LINKS","text":""},{"location":"commands/Send-SQLDataToExcel/","title":"Send-SQLDataToExcel","text":""},{"location":"commands/Send-SQLDataToExcel/#synopsis","title":"SYNOPSIS","text":"<p>Inserts a DataTable - returned by a SQL query - into an ExcelSheet</p>"},{"location":"commands/Send-SQLDataToExcel/#syntax","title":"SYNTAX","text":""},{"location":"commands/Send-SQLDataToExcel/#none-default","title":"none (Default)","text":"<pre><code>Send-SQLDataToExcel [-QueryTimeout &lt;Int32&gt;] [-Force] [-Path &lt;String&gt;] [-ExcelPackage &lt;ExcelPackage&gt;]\n [-Calculate] [-Show] [-WorksheetName &lt;String&gt;] [-Password &lt;String&gt;] [-ClearSheet] [-Append] [-Title &lt;String&gt;]\n [-TitleFillPattern &lt;ExcelFillStyle&gt;] [-TitleBold] [-TitleSize &lt;Int32&gt;] [-TitleBackgroundColor &lt;Object&gt;]\n [-IncludePivotTable] [-PivotTableName &lt;String&gt;] [-PivotRows &lt;String[]&gt;] [-PivotColumns &lt;String[]&gt;]\n [-PivotData &lt;Object&gt;] [-PivotFilter &lt;String[]&gt;] [-PivotDataToColumn] [-PivotTableDefinition &lt;Hashtable&gt;]\n [-IncludePivotChart] [-PivotChartType &lt;eChartType&gt;] [-NoLegend] [-ShowCategory] [-ShowPercent] [-AutoSize]\n [-MaxAutoSizeRows &lt;Object&gt;] [-NoClobber] [-FreezeTopRow] [-FreezeFirstColumn] [-FreezeTopRowFirstColumn]\n [-FreezePane &lt;Int32[]&gt;] [-AutoFilter] [-BoldTopRow] [-NoHeader] [-RangeName &lt;String&gt;] [-TableName &lt;Object&gt;]\n [-TableStyle &lt;TableStyles&gt;] [-TableTotalSettings &lt;Hashtable&gt;] [-BarChart] [-PieChart] [-LineChart]\n [-ColumnChart] [-ExcelChartDefinition &lt;Object[]&gt;] [-HideSheet &lt;String[]&gt;] [-UnHideSheet &lt;String[]&gt;]\n [-MoveToStart] [-MoveToEnd] [-MoveBefore &lt;Object&gt;] [-MoveAfter &lt;Object&gt;] [-KillExcel] [-AutoNameRange]\n [-StartRow &lt;Int32&gt;] [-StartColumn &lt;Int32&gt;] [-PassThru] [-Numberformat &lt;String&gt;] [-ExcludeProperty &lt;String[]&gt;]\n [-NoAliasOrScriptPropeties] [-DisplayPropertySet] [-NoNumberConversion &lt;String[]&gt;]\n [-NoHyperLinkConversion &lt;String[]&gt;] [-ConditionalFormat &lt;Object[]&gt;] [-ConditionalText &lt;Object[]&gt;]\n [-Style &lt;Object[]&gt;] [-CellStyleSB &lt;ScriptBlock&gt;] [-Activate] [-Now] [-ReturnRange] [-PivotTotals &lt;String&gt;]\n [-NoTotalsInPivot] [-ReZip] [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"commands/Send-SQLDataToExcel/#odbcconnection","title":"ODBCConnection","text":"<pre><code>Send-SQLDataToExcel -Connection &lt;Object&gt; -SQL &lt;String&gt; [-QueryTimeout &lt;Int32&gt;] [-Force] [-Path &lt;String&gt;]\n [-ExcelPackage &lt;ExcelPackage&gt;] [-Calculate] [-Show] [-WorksheetName &lt;String&gt;] [-Password &lt;String&gt;]\n [-ClearSheet] [-Append] [-Title &lt;String&gt;] [-TitleFillPattern &lt;ExcelFillStyle&gt;] [-TitleBold]\n [-TitleSize &lt;Int32&gt;] [-TitleBackgroundColor &lt;Object&gt;] [-IncludePivotTable] [-PivotTableName &lt;String&gt;]\n [-PivotRows &lt;String[]&gt;] [-PivotColumns &lt;String[]&gt;] [-PivotData &lt;Object&gt;] [-PivotFilter &lt;String[]&gt;]\n [-PivotDataToColumn] [-PivotTableDefinition &lt;Hashtable&gt;] [-IncludePivotChart] [-PivotChartType &lt;eChartType&gt;]\n [-NoLegend] [-ShowCategory] [-ShowPercent] [-AutoSize] [-MaxAutoSizeRows &lt;Object&gt;] [-NoClobber]\n [-FreezeTopRow] [-FreezeFirstColumn] [-FreezeTopRowFirstColumn] [-FreezePane &lt;Int32[]&gt;] [-AutoFilter]\n [-BoldTopRow] [-NoHeader] [-RangeName &lt;String&gt;] [-TableName &lt;Object&gt;] [-TableStyle &lt;TableStyles&gt;]\n [-TableTotalSettings &lt;Hashtable&gt;] [-BarChart] [-PieChart] [-LineChart] [-ColumnChart]\n [-ExcelChartDefinition &lt;Object[]&gt;] [-HideSheet &lt;String[]&gt;] [-UnHideSheet &lt;String[]&gt;] [-MoveToStart]\n [-MoveToEnd] [-MoveBefore &lt;Object&gt;] [-MoveAfter &lt;Object&gt;] [-KillExcel] [-AutoNameRange] [-StartRow &lt;Int32&gt;]\n [-StartColumn &lt;Int32&gt;] [-PassThru] [-Numberformat &lt;String&gt;] [-ExcludeProperty &lt;String[]&gt;]\n [-NoAliasOrScriptPropeties] [-DisplayPropertySet] [-NoNumberConversion &lt;String[]&gt;]\n [-NoHyperLinkConversion &lt;String[]&gt;] [-ConditionalFormat &lt;Object[]&gt;] [-ConditionalText &lt;Object[]&gt;]\n [-Style &lt;Object[]&gt;] [-CellStyleSB &lt;ScriptBlock&gt;] [-Activate] [-Now] [-ReturnRange] [-PivotTotals &lt;String&gt;]\n [-NoTotalsInPivot] [-ReZip] [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"commands/Send-SQLDataToExcel/#sqlconnection","title":"SQLConnection","text":"<pre><code>Send-SQLDataToExcel -Connection &lt;Object&gt; [-MsSqlServer] [-DataBase &lt;String&gt;] -SQL &lt;String&gt;\n [-QueryTimeout &lt;Int32&gt;] [-Force] [-Path &lt;String&gt;] [-ExcelPackage &lt;ExcelPackage&gt;] [-Calculate] [-Show]\n [-WorksheetName &lt;String&gt;] [-Password &lt;String&gt;] [-ClearSheet] [-Append] [-Title &lt;String&gt;]\n [-TitleFillPattern &lt;ExcelFillStyle&gt;] [-TitleBold] [-TitleSize &lt;Int32&gt;] [-TitleBackgroundColor &lt;Object&gt;]\n [-IncludePivotTable] [-PivotTableName &lt;String&gt;] [-PivotRows &lt;String[]&gt;] [-PivotColumns &lt;String[]&gt;]\n [-PivotData &lt;Object&gt;] [-PivotFilter &lt;String[]&gt;] [-PivotDataToColumn] [-PivotTableDefinition &lt;Hashtable&gt;]\n [-IncludePivotChart] [-PivotChartType &lt;eChartType&gt;] [-NoLegend] [-ShowCategory] [-ShowPercent] [-AutoSize]\n [-MaxAutoSizeRows &lt;Object&gt;] [-NoClobber] [-FreezeTopRow] [-FreezeFirstColumn] [-FreezeTopRowFirstColumn]\n [-FreezePane &lt;Int32[]&gt;] [-AutoFilter] [-BoldTopRow] [-NoHeader] [-RangeName &lt;String&gt;] [-TableName &lt;Object&gt;]\n [-TableStyle &lt;TableStyles&gt;] [-TableTotalSettings &lt;Hashtable&gt;] [-BarChart] [-PieChart] [-LineChart]\n [-ColumnChart] [-ExcelChartDefinition &lt;Object[]&gt;] [-HideSheet &lt;String[]&gt;] [-UnHideSheet &lt;String[]&gt;]\n [-MoveToStart] [-MoveToEnd] [-MoveBefore &lt;Object&gt;] [-MoveAfter &lt;Object&gt;] [-KillExcel] [-AutoNameRange]\n [-StartRow &lt;Int32&gt;] [-StartColumn &lt;Int32&gt;] [-PassThru] [-Numberformat &lt;String&gt;] [-ExcludeProperty &lt;String[]&gt;]\n [-NoAliasOrScriptPropeties] [-DisplayPropertySet] [-NoNumberConversion &lt;String[]&gt;]\n [-NoHyperLinkConversion &lt;String[]&gt;] [-ConditionalFormat &lt;Object[]&gt;] [-ConditionalText &lt;Object[]&gt;]\n [-Style &lt;Object[]&gt;] [-CellStyleSB &lt;ScriptBlock&gt;] [-Activate] [-Now] [-ReturnRange] [-PivotTotals &lt;String&gt;]\n [-NoTotalsInPivot] [-ReZip] [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"commands/Send-SQLDataToExcel/#existingsession","title":"ExistingSession","text":"<pre><code>Send-SQLDataToExcel -Session &lt;Object&gt; -SQL &lt;String&gt; [-QueryTimeout &lt;Int32&gt;] [-Force] [-Path &lt;String&gt;]\n [-ExcelPackage &lt;ExcelPackage&gt;] [-Calculate] [-Show] [-WorksheetName &lt;String&gt;] [-Password &lt;String&gt;]\n [-ClearSheet] [-Append] [-Title &lt;String&gt;] [-TitleFillPattern &lt;ExcelFillStyle&gt;] [-TitleBold]\n [-TitleSize &lt;Int32&gt;] [-TitleBackgroundColor &lt;Object&gt;] [-IncludePivotTable] [-PivotTableName &lt;String&gt;]\n [-PivotRows &lt;String[]&gt;] [-PivotColumns &lt;String[]&gt;] [-PivotData &lt;Object&gt;] [-PivotFilter &lt;String[]&gt;]\n [-PivotDataToColumn] [-PivotTableDefinition &lt;Hashtable&gt;] [-IncludePivotChart] [-PivotChartType &lt;eChartType&gt;]\n [-NoLegend] [-ShowCategory] [-ShowPercent] [-AutoSize] [-MaxAutoSizeRows &lt;Object&gt;] [-NoClobber]\n [-FreezeTopRow] [-FreezeFirstColumn] [-FreezeTopRowFirstColumn] [-FreezePane &lt;Int32[]&gt;] [-AutoFilter]\n [-BoldTopRow] [-NoHeader] [-RangeName &lt;String&gt;] [-TableName &lt;Object&gt;] [-TableStyle &lt;TableStyles&gt;]\n [-TableTotalSettings &lt;Hashtable&gt;] [-BarChart] [-PieChart] [-LineChart] [-ColumnChart]\n [-ExcelChartDefinition &lt;Object[]&gt;] [-HideSheet &lt;String[]&gt;] [-UnHideSheet &lt;String[]&gt;] [-MoveToStart]\n [-MoveToEnd] [-MoveBefore &lt;Object&gt;] [-MoveAfter &lt;Object&gt;] [-KillExcel] [-AutoNameRange] [-StartRow &lt;Int32&gt;]\n [-StartColumn &lt;Int32&gt;] [-PassThru] [-Numberformat &lt;String&gt;] [-ExcludeProperty &lt;String[]&gt;]\n [-NoAliasOrScriptPropeties] [-DisplayPropertySet] [-NoNumberConversion &lt;String[]&gt;]\n [-NoHyperLinkConversion &lt;String[]&gt;] [-ConditionalFormat &lt;Object[]&gt;] [-ConditionalText &lt;Object[]&gt;]\n [-Style &lt;Object[]&gt;] [-CellStyleSB &lt;ScriptBlock&gt;] [-Activate] [-Now] [-ReturnRange] [-PivotTotals &lt;String&gt;]\n [-NoTotalsInPivot] [-ReZip] [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"commands/Send-SQLDataToExcel/#pre-fetcheddata","title":"Pre-FetchedData","text":"<pre><code>Send-SQLDataToExcel [-QueryTimeout &lt;Int32&gt;] -DataTable &lt;DataTable&gt; [-Force] [-Path &lt;String&gt;]\n [-ExcelPackage &lt;ExcelPackage&gt;] [-Calculate] [-Show] [-WorksheetName &lt;String&gt;] [-Password &lt;String&gt;]\n [-ClearSheet] [-Append] [-Title &lt;String&gt;] [-TitleFillPattern &lt;ExcelFillStyle&gt;] [-TitleBold]\n [-TitleSize &lt;Int32&gt;] [-TitleBackgroundColor &lt;Object&gt;] [-IncludePivotTable] [-PivotTableName &lt;String&gt;]\n [-PivotRows &lt;String[]&gt;] [-PivotColumns &lt;String[]&gt;] [-PivotData &lt;Object&gt;] [-PivotFilter &lt;String[]&gt;]\n [-PivotDataToColumn] [-PivotTableDefinition &lt;Hashtable&gt;] [-IncludePivotChart] [-PivotChartType &lt;eChartType&gt;]\n [-NoLegend] [-ShowCategory] [-ShowPercent] [-AutoSize] [-MaxAutoSizeRows &lt;Object&gt;] [-NoClobber]\n [-FreezeTopRow] [-FreezeFirstColumn] [-FreezeTopRowFirstColumn] [-FreezePane &lt;Int32[]&gt;] [-AutoFilter]\n [-BoldTopRow] [-NoHeader] [-RangeName &lt;String&gt;] [-TableName &lt;Object&gt;] [-TableStyle &lt;TableStyles&gt;]\n [-TableTotalSettings &lt;Hashtable&gt;] [-BarChart] [-PieChart] [-LineChart] [-ColumnChart]\n [-ExcelChartDefinition &lt;Object[]&gt;] [-HideSheet &lt;String[]&gt;] [-UnHideSheet &lt;String[]&gt;] [-MoveToStart]\n [-MoveToEnd] [-MoveBefore &lt;Object&gt;] [-MoveAfter &lt;Object&gt;] [-KillExcel] [-AutoNameRange] [-StartRow &lt;Int32&gt;]\n [-StartColumn &lt;Int32&gt;] [-PassThru] [-Numberformat &lt;String&gt;] [-ExcludeProperty &lt;String[]&gt;]\n [-NoAliasOrScriptPropeties] [-DisplayPropertySet] [-NoNumberConversion &lt;String[]&gt;]\n [-NoHyperLinkConversion &lt;String[]&gt;] [-ConditionalFormat &lt;Object[]&gt;] [-ConditionalText &lt;Object[]&gt;]\n [-Style &lt;Object[]&gt;] [-CellStyleSB &lt;ScriptBlock&gt;] [-Activate] [-Now] [-ReturnRange] [-PivotTotals &lt;String&gt;]\n [-NoTotalsInPivot] [-ReZip] [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"commands/Send-SQLDataToExcel/#description","title":"DESCRIPTION","text":"<p>This command takes a SQL statement and run it against a database connection; for the connection it accepts either</p> <ul> <li>an object representing a session with a SQL server or ODBC database, or</li> <li>a connection string to make a session (if -MSSQLServer is specified it uses the SQL Native client,</li> </ul> <p>and -Connection can be a server name instead of a detailed connection string. Without this switch it uses ODBC)</p> <p>The command takes all the parameters of Export-Excel, except for -InputObject (alias TargetData); after fetching the data it calls Export-Excel with the data as the value of InputParameter and whichever of Export-Excel's parameters it was passed; for details of these parameters see the help for Export-Excel.</p>"},{"location":"commands/Send-SQLDataToExcel/#examples","title":"EXAMPLES","text":""},{"location":"commands/Send-SQLDataToExcel/#example-1","title":"EXAMPLE 1","text":"<pre><code>PS\\&gt; Send-SQLDataToExcel -MsSQLserver -Connection localhost -SQL  \"select name,type,type_desc from [master].[sys].[all_objects]\" -Path .\\temp.xlsx -WorkSheetname master -AutoSize -FreezeTopRow -AutoFilter -BoldTopRow\n</code></pre> <p>Connects to the local SQL server and selects 3 columns from [Sys].[all_objects] and exports then to a sheet named master with some basic header management</p>"},{"location":"commands/Send-SQLDataToExcel/#example-2","title":"EXAMPLE 2","text":"<pre><code>PS\\&gt; $dbPath = 'C:\\Users\\James\\Documents\\Database1.accdb'\nPS\\&gt; $Connection = \"Driver={Microsoft Access Driver (*.mdb, *.accdb)};Dbq=$dbPath;\"\nPS\\&gt; $SQL=\"SELECT top 25 Name,Length  From TestData ORDER BY Length DESC\"\nPS\\&gt; Send-SQLDataToExcel -Connection  $connection -SQL $sql -path .\\demo1.xlsx -WorkSheetname \"Sizes\" -AutoSize\n</code></pre> <p>This creates an ODBC connection string to read from an Access file and a SQL Statement to extracts data from it, and sends the resulting data to a new worksheet</p>"},{"location":"commands/Send-SQLDataToExcel/#example-3","title":"EXAMPLE 3","text":"<pre><code>PS\\&gt; $dbPath = 'C:\\users\\James\\Documents\\f1Results.xlsx'\n\nPS\\&gt; $Connection = \"Driver={Microsoft Excel Driver (*.xls, *.xlsx, *.xlsm, *.xlsb)};Dbq=$dbPath;\"\nPS\\&gt; $SQL=\"SELECT top 25 DriverName, Count(RaceDate) as Races, Count(Win) as Wins, Count(Pole) as Poles, Count(FastestLap) as Fastlaps \" +\n           \" FROM Results  GROUP BY DriverName ORDER BY (count(win)) DESC\"\n\nPS\\&gt;Send-SQLDataToExcel -Connection  $connection -SQL $sql -path .\\demo2.xlsx -WorkSheetname \"Winners\" -AutoSize -AutoNameRange -ConditionalFormat @{DataBarColor=\"Blue\"; Range=\"Wins\"}\n</code></pre> <p>Similar to the previous example, this creates a connection string, this time for an Excel file, and runs a SQL statement to get a list of motor-racing results, outputting the resulting data to a new spreadsheet. The spreadsheet is formatted and a data bar added to show make the drivers' wins clearer. (The F1 results database is available from https://1drv.ms/x/s!AhfYu7-CJv4ehNdZWxJE9LMAX_N5sg )</p>"},{"location":"commands/Send-SQLDataToExcel/#example-4","title":"EXAMPLE 4","text":"<pre><code>PS\\&gt; $dbPath = 'C:\\users\\James\\Documents\\f1Results.xlsx'\n\nPS\\&gt; $SQL = \"SELECT top 25 DriverName, Count(RaceDate) as Races, Count(Win) as Wins, Count(Pole) as Poles, Count(FastestLap) as Fastlaps \" +\n             \" FROM Results GROUP BY DriverName ORDER BY (count(win)) DESC\"\nPS\\&gt; $null = Get-SQL -Session F1 -excel -Connection $dbPath -sql $sql -OutputVariable Table\n\nPS\\&gt; Send-SQLDataToExcel -DataTable $Table -Path \".\\demo3.xlsx\" -WorkSheetname Gpwinners -autosize  -TableName winners -TableStyle Light6 -show\n</code></pre> <p>This uses Get-SQL (at least V1.1 - download from the PowerShell gallery with Install-Module -Name GetSQL - (note the function is Get-SQL the module is GetSQL without the \"-\" )</p> <p>Get-SQL simplifies making database connections and building /submitting SQL statements. Here Get-SQL uses the same SQL statement as before; -OutputVariable leaves a System.Data.DataTable object in $table and Send-SQLDataToExcel puts $table into the worksheet and sets it as an Excel table. The command is equivalent to running</p> <p>PS&gt; Export-Excel -inputObject $Table -Path \".\\demo3.xlsx\" -WorkSheetname Gpwinners -autosize -TableName winners -TableStyle Light6 -show</p> <p>This is quicker than using PS&gt; Get-SQL \\ | Export-Excel -ExcludeProperty rowerror,rowstate,table,itemarray,haserrors \\</p> <p>(the F1 results database is available from https://1drv.ms/x/s!AhfYu7-CJv4ehNdZWxJE9LMAX_N5sg )</p>"},{"location":"commands/Send-SQLDataToExcel/#example-5","title":"EXAMPLE 5","text":"<pre><code>PS\\&gt;$SQL = \"SELECT top 25 DriverName,  Count(Win) as Wins FROM Results GROUP BY DriverName ORDER BY (count(win)) DESC\"\nPS\\&gt; Send-SQLDataToExcel -Session $DbSessions\\[\"f1\"\\] -SQL $sql -Path  \".\\demo3.xlsx\" -WorkSheetname Gpwinners  -ClearSheet -autosize -ColumnChart\n</code></pre> <p>Like the previous example, this uses Get-SQL (download from the gallery with Install-Module -Name GetSQL). It uses the database session which Get-SQL created, rather than an ODBC connection string. The Session parameter can either be a object (as shown here), or the name used by Get-SQL (\"F1\" in this case).</p> <p>Here the data is presented as a quick chart.</p>"},{"location":"commands/Send-SQLDataToExcel/#example-6","title":"EXAMPLE 6","text":"<pre><code>Send-SQLDataToExcel -path .\\demo4.xlsx -WorkSheetname \"LR\" -Connection \"DSN=LR\" -sql \"SELECT name AS CollectionName FROM AgLibraryCollection Collection ORDER BY CollectionName\"\n</code></pre> <p>This example uses an Existing ODBC datasource name \"LR\" which maps to an adobe lightroom database and gets a list of collection names into a worksheet</p>"},{"location":"commands/Send-SQLDataToExcel/#parameters","title":"PARAMETERS","text":""},{"location":"commands/Send-SQLDataToExcel/#-activate","title":"-Activate","text":"<p>{{ Fill Activate Description }}</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Send-SQLDataToExcel/#-append","title":"-Append","text":"<p>{{ Fill Append Description }}</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Send-SQLDataToExcel/#-autofilter","title":"-AutoFilter","text":"<p>{{ Fill AutoFilter Description }}</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Send-SQLDataToExcel/#-autonamerange","title":"-AutoNameRange","text":"<p>{{ Fill AutoNameRange Description }}</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Send-SQLDataToExcel/#-autosize","title":"-AutoSize","text":"<p>{{ Fill AutoSize Description }}</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Send-SQLDataToExcel/#-barchart","title":"-BarChart","text":"<p>{{ Fill BarChart Description }}</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Send-SQLDataToExcel/#-boldtoprow","title":"-BoldTopRow","text":"<p>{{ Fill BoldTopRow Description }}</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Send-SQLDataToExcel/#-calculate","title":"-Calculate","text":"<p>{{ Fill Calculate Description }}</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Send-SQLDataToExcel/#-cellstylesb","title":"-CellStyleSB","text":"<p>{{ Fill CellStyleSB Description }}</p> <pre><code>Type: ScriptBlock\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Send-SQLDataToExcel/#-clearsheet","title":"-ClearSheet","text":"<p>{{ Fill ClearSheet Description }}</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Send-SQLDataToExcel/#-columnchart","title":"-ColumnChart","text":"<p>{{ Fill ColumnChart Description }}</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Send-SQLDataToExcel/#-conditionalformat","title":"-ConditionalFormat","text":"<p>{{ Fill ConditionalFormat Description }}</p> <pre><code>Type: Object[]\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Send-SQLDataToExcel/#-conditionaltext","title":"-ConditionalText","text":"<p>{{ Fill ConditionalText Description }}</p> <pre><code>Type: Object[]\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Send-SQLDataToExcel/#-connection","title":"-Connection","text":"<p>A database connection string to be used to create a database session; either</p> <ul> <li>A Data source name written in the form DSN=ODBC_Data_Source_Name, or</li> <li>A full ODBC or SQL Native Client Connection string, or</li> <li>The name of a SQL server.</li> </ul> <pre><code>Type: Object\nParameter Sets: ODBCConnection, SQLConnection\nAliases:\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Send-SQLDataToExcel/#-database","title":"-DataBase","text":"<p>Switches to a specific database on a SQL server.</p> <pre><code>Type: String\nParameter Sets: SQLConnection\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Send-SQLDataToExcel/#-datatable","title":"-DataTable","text":"<p>A System.Data.DataTable object containing the data to be inserted into the spreadsheet without running a query. This remains supported to avoid breaking older scripts, but if you have a DataTable object you can pass the it into Export-Excel using -InputObject.</p> <pre><code>Type: DataTable\nParameter Sets: Pre-FetchedData\nAliases:\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Send-SQLDataToExcel/#-displaypropertyset","title":"-DisplayPropertySet","text":"<p>{{ Fill DisplayPropertySet Description }}</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Send-SQLDataToExcel/#-excelchartdefinition","title":"-ExcelChartDefinition","text":"<p>{{ Fill ExcelChartDefinition Description }}</p> <pre><code>Type: Object[]\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Send-SQLDataToExcel/#-excelpackage","title":"-ExcelPackage","text":"<p>{{ Fill ExcelPackage Description }}</p> <pre><code>Type: ExcelPackage\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Send-SQLDataToExcel/#-excludeproperty","title":"-ExcludeProperty","text":"<p>{{ Fill ExcludeProperty Description }}</p> <pre><code>Type: String[]\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Send-SQLDataToExcel/#-force","title":"-Force","text":"<p>If specified Export-Excel will be called with parameters specified, even if there is no data to send</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Send-SQLDataToExcel/#-freezefirstcolumn","title":"-FreezeFirstColumn","text":"<p>{{ Fill FreezeFirstColumn Description }}</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Send-SQLDataToExcel/#-freezepane","title":"-FreezePane","text":"<p>{{ Fill FreezePane Description }}</p> <pre><code>Type: Int32[]\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Send-SQLDataToExcel/#-freezetoprow","title":"-FreezeTopRow","text":"<p>{{ Fill FreezeTopRow Description }}</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Send-SQLDataToExcel/#-freezetoprowfirstcolumn","title":"-FreezeTopRowFirstColumn","text":"<p>{{ Fill FreezeTopRowFirstColumn Description }}</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Send-SQLDataToExcel/#-hidesheet","title":"-HideSheet","text":"<p>{{ Fill HideSheet Description }}</p> <pre><code>Type: String[]\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Send-SQLDataToExcel/#-includepivotchart","title":"-IncludePivotChart","text":"<p>{{ Fill IncludePivotChart Description }}</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Send-SQLDataToExcel/#-includepivottable","title":"-IncludePivotTable","text":"<p>{{ Fill IncludePivotTable Description }}</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Send-SQLDataToExcel/#-killexcel","title":"-KillExcel","text":"<p>{{ Fill KillExcel Description }}</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Send-SQLDataToExcel/#-linechart","title":"-LineChart","text":"<p>{{ Fill LineChart Description }}</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Send-SQLDataToExcel/#-maxautosizerows","title":"-MaxAutoSizeRows","text":"<p>{{ Fill MaxAutoSizeRows Description }}</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Send-SQLDataToExcel/#-moveafter","title":"-MoveAfter","text":"<p>{{ Fill MoveAfter Description }}</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Send-SQLDataToExcel/#-movebefore","title":"-MoveBefore","text":"<p>{{ Fill MoveBefore Description }}</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Send-SQLDataToExcel/#-movetoend","title":"-MoveToEnd","text":"<p>{{ Fill MoveToEnd Description }}</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Send-SQLDataToExcel/#-movetostart","title":"-MoveToStart","text":"<p>{{ Fill MoveToStart Description }}</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Send-SQLDataToExcel/#-mssqlserver","title":"-MsSqlServer","text":"<p>Specifies the connection string is for SQL server, not ODBC.</p> <pre><code>Type: SwitchParameter\nParameter Sets: SQLConnection\nAliases:\n\nRequired: True\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Send-SQLDataToExcel/#-noaliasorscriptpropeties","title":"-NoAliasOrScriptPropeties","text":"<p>{{ Fill NoAliasOrScriptPropeties Description }}</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Send-SQLDataToExcel/#-noclobber","title":"-NoClobber","text":"<p>{{ Fill NoClobber Description }}</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Send-SQLDataToExcel/#-noheader","title":"-NoHeader","text":"<p>{{ Fill NoHeader Description }}</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Send-SQLDataToExcel/#-nohyperlinkconversion","title":"-NoHyperLinkConversion","text":"<p>{{ Fill NoHyperLinkConversion Description }}</p> <pre><code>Type: String[]\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Send-SQLDataToExcel/#-nolegend","title":"-NoLegend","text":"<p>{{ Fill NoLegend Description }}</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Send-SQLDataToExcel/#-nonumberconversion","title":"-NoNumberConversion","text":"<p>{{ Fill NoNumberConversion Description }}</p> <pre><code>Type: String[]\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Send-SQLDataToExcel/#-nototalsinpivot","title":"-NoTotalsInPivot","text":"<p>{{ Fill NoTotalsInPivot Description }}</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Send-SQLDataToExcel/#-now","title":"-Now","text":"<p>{{ Fill Now Description }}</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Send-SQLDataToExcel/#-numberformat","title":"-Numberformat","text":"<p>{{ Fill Numberformat Description }}</p> <pre><code>Type: String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Send-SQLDataToExcel/#-passthru","title":"-PassThru","text":"<p>{{ Fill PassThru Description }}</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Send-SQLDataToExcel/#-password","title":"-Password","text":"<p>{{ Fill Password Description }}</p> <pre><code>Type: String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Send-SQLDataToExcel/#-path","title":"-Path","text":"<p>{{ Fill Path Description }}</p> <pre><code>Type: String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Send-SQLDataToExcel/#-piechart","title":"-PieChart","text":"<p>{{ Fill PieChart Description }}</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Send-SQLDataToExcel/#-pivotcharttype","title":"-PivotChartType","text":"<p>{{ Fill PivotChartType Description }}</p> <pre><code>Type: eChartType\nParameter Sets: (All)\nAliases:\nAccepted values: Area, Line, Pie, Bubble, ColumnClustered, ColumnStacked, ColumnStacked100, ColumnClustered3D, ColumnStacked3D, ColumnStacked1003D, BarClustered, BarStacked, BarStacked100, BarClustered3D, BarStacked3D, BarStacked1003D, LineStacked, LineStacked100, LineMarkers, LineMarkersStacked, LineMarkersStacked100, PieOfPie, PieExploded, PieExploded3D, BarOfPie, XYScatterSmooth, XYScatterSmoothNoMarkers, XYScatterLines, XYScatterLinesNoMarkers, AreaStacked, AreaStacked100, AreaStacked3D, AreaStacked1003D, DoughnutExploded, RadarMarkers, RadarFilled, Surface, SurfaceWireframe, SurfaceTopView, SurfaceTopViewWireframe, Bubble3DEffect, StockHLC, StockOHLC, StockVHLC, StockVOHLC, CylinderColClustered, CylinderColStacked, CylinderColStacked100, CylinderBarClustered, CylinderBarStacked, CylinderBarStacked100, CylinderCol, ConeColClustered, ConeColStacked, ConeColStacked100, ConeBarClustered, ConeBarStacked, ConeBarStacked100, ConeCol, PyramidColClustered, PyramidColStacked, PyramidColStacked100, PyramidBarClustered, PyramidBarStacked, PyramidBarStacked100, PyramidCol, XYScatter, Radar, Doughnut, Pie3D, Line3D, Column3D, Area3D\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Send-SQLDataToExcel/#-pivotcolumns","title":"-PivotColumns","text":"<p>{{ Fill PivotColumns Description }}</p> <pre><code>Type: String[]\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Send-SQLDataToExcel/#-pivotdata","title":"-PivotData","text":"<p>{{ Fill PivotData Description }}</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Send-SQLDataToExcel/#-pivotdatatocolumn","title":"-PivotDataToColumn","text":"<p>{{ Fill PivotDataToColumn Description }}</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Send-SQLDataToExcel/#-pivotfilter","title":"-PivotFilter","text":"<p>{{ Fill PivotFilter Description }}</p> <pre><code>Type: String[]\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Send-SQLDataToExcel/#-pivotrows","title":"-PivotRows","text":"<p>{{ Fill PivotRows Description }}</p> <pre><code>Type: String[]\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Send-SQLDataToExcel/#-pivottabledefinition","title":"-PivotTableDefinition","text":"<p>{{ Fill PivotTableDefinition Description }}</p> <pre><code>Type: Hashtable\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Send-SQLDataToExcel/#-pivottablename","title":"-PivotTableName","text":"<p>{{ Fill PivotTableName Description }}</p> <pre><code>Type: String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Send-SQLDataToExcel/#-pivottotals","title":"-PivotTotals","text":"<p>{{ Fill PivotTotals Description }}</p> <pre><code>Type: String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Send-SQLDataToExcel/#-querytimeout","title":"-QueryTimeout","text":"<p>Override the default query time of 30 seconds.</p> <pre><code>Type: Int32\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: 0\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Send-SQLDataToExcel/#-rangename","title":"-RangeName","text":"<p>{{ Fill RangeName Description }}</p> <pre><code>Type: String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Send-SQLDataToExcel/#-returnrange","title":"-ReturnRange","text":"<p>{{ Fill ReturnRange Description }}</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Send-SQLDataToExcel/#-rezip","title":"-ReZip","text":"<p>{{ Fill ReZip Description }}</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Send-SQLDataToExcel/#-session","title":"-Session","text":"<p>An active ODBC Connection or SQL connection object representing a session with a database which will be queried to get the data .</p> <pre><code>Type: Object\nParameter Sets: ExistingSession\nAliases:\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Send-SQLDataToExcel/#-show","title":"-Show","text":"<p>{{ Fill Show Description }}</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Send-SQLDataToExcel/#-showcategory","title":"-ShowCategory","text":"<p>{{ Fill ShowCategory Description }}</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Send-SQLDataToExcel/#-showpercent","title":"-ShowPercent","text":"<p>{{ Fill ShowPercent Description }}</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Send-SQLDataToExcel/#-sql","title":"-SQL","text":"<p>The SQL query to run against the session which was passed in -Session or set up from -Connection.</p> <pre><code>Type: String\nParameter Sets: ODBCConnection, SQLConnection, ExistingSession\nAliases:\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Send-SQLDataToExcel/#-startcolumn","title":"-StartColumn","text":"<p>{{ Fill StartColumn Description }}</p> <pre><code>Type: Int32\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Send-SQLDataToExcel/#-startrow","title":"-StartRow","text":"<p>{{ Fill StartRow Description }}</p> <pre><code>Type: Int32\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Send-SQLDataToExcel/#-style","title":"-Style","text":"<p>{{ Fill Style Description }}</p> <pre><code>Type: Object[]\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Send-SQLDataToExcel/#-tablename","title":"-TableName","text":"<p>{{ Fill TableName Description }}</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Send-SQLDataToExcel/#-tablestyle","title":"-TableStyle","text":"<p>{{ Fill TableStyle Description }}</p> <pre><code>Type: TableStyles\nParameter Sets: (All)\nAliases:\nAccepted values: None, Custom, Light1, Light2, Light3, Light4, Light5, Light6, Light7, Light8, Light9, Light10, Light11, Light12, Light13, Light14, Light15, Light16, Light17, Light18, Light19, Light20, Light21, Medium1, Medium2, Medium3, Medium4, Medium5, Medium6, Medium7, Medium8, Medium9, Medium10, Medium11, Medium12, Medium13, Medium14, Medium15, Medium16, Medium17, Medium18, Medium19, Medium20, Medium21, Medium22, Medium23, Medium24, Medium25, Medium26, Medium27, Medium28, Dark1, Dark2, Dark3, Dark4, Dark5, Dark6, Dark7, Dark8, Dark9, Dark10, Dark11\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Send-SQLDataToExcel/#-tabletotalsettings","title":"-TableTotalSettings","text":"<p>{{ Fill TableTotalSettings Description }}</p> <pre><code>Type: Hashtable\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Send-SQLDataToExcel/#-title","title":"-Title","text":"<p>{{ Fill Title Description }}</p> <pre><code>Type: String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Send-SQLDataToExcel/#-titlebackgroundcolor","title":"-TitleBackgroundColor","text":"<p>{{ Fill TitleBackgroundColor Description }}</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Send-SQLDataToExcel/#-titlebold","title":"-TitleBold","text":"<p>{{ Fill TitleBold Description }}</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Send-SQLDataToExcel/#-titlefillpattern","title":"-TitleFillPattern","text":"<p>{{ Fill TitleFillPattern Description }}</p> <pre><code>Type: ExcelFillStyle\nParameter Sets: (All)\nAliases:\nAccepted values: None, Solid, DarkGray, MediumGray, LightGray, Gray125, Gray0625, DarkVertical, DarkHorizontal, DarkDown, DarkUp, DarkGrid, DarkTrellis, LightVertical, LightHorizontal, LightDown, LightUp, LightGrid, LightTrellis\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Send-SQLDataToExcel/#-titlesize","title":"-TitleSize","text":"<p>{{ Fill TitleSize Description }}</p> <pre><code>Type: Int32\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Send-SQLDataToExcel/#-unhidesheet","title":"-UnHideSheet","text":"<p>{{ Fill UnHideSheet Description }}</p> <pre><code>Type: String[]\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Send-SQLDataToExcel/#-worksheetname","title":"-WorksheetName","text":"<p>{{ Fill WorksheetName Description }}</p> <pre><code>Type: String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Send-SQLDataToExcel/#commonparameters","title":"CommonParameters","text":"<p>This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters.</p>"},{"location":"commands/Send-SQLDataToExcel/#inputs","title":"INPUTS","text":""},{"location":"commands/Send-SQLDataToExcel/#outputs","title":"OUTPUTS","text":""},{"location":"commands/Send-SQLDataToExcel/#notes","title":"NOTES","text":""},{"location":"commands/Send-SQLDataToExcel/#related-links","title":"RELATED LINKS","text":"<p>Export-Excel</p>"},{"location":"commands/Set-CellComment/","title":"Set-CellComment","text":""},{"location":"commands/Set-CellComment/#synopsis","title":"SYNOPSIS","text":"<p>{{ Fill in the Synopsis }}</p>"},{"location":"commands/Set-CellComment/#syntax","title":"SYNTAX","text":""},{"location":"commands/Set-CellComment/#range-default","title":"Range (Default)","text":"<pre><code>Set-CellComment [-Worksheet &lt;ExcelWorksheet&gt;] [-Range] &lt;Object&gt; -Text &lt;String&gt; [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"commands/Set-CellComment/#columnnumber","title":"ColumnNumber","text":"<pre><code>Set-CellComment -Worksheet &lt;ExcelWorksheet&gt; -Row &lt;Int32&gt; -ColumnNumber &lt;Int32&gt; -Text &lt;String&gt;\n [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"commands/Set-CellComment/#columnletter","title":"ColumnLetter","text":"<pre><code>Set-CellComment -Worksheet &lt;ExcelWorksheet&gt; -Row &lt;Int32&gt; -ColumnLetter &lt;String&gt; -Text &lt;String&gt;\n [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"commands/Set-CellComment/#description","title":"DESCRIPTION","text":"<p>{{ Fill in the Description }}</p>"},{"location":"commands/Set-CellComment/#examples","title":"EXAMPLES","text":""},{"location":"commands/Set-CellComment/#example-1","title":"EXAMPLE 1","text":"<pre><code>PS C:\\&gt; {{ Add example code here }}\n</code></pre> <p>{{ Add example description here }}</p>"},{"location":"commands/Set-CellComment/#parameters","title":"PARAMETERS","text":""},{"location":"commands/Set-CellComment/#-columnletter","title":"-ColumnLetter","text":"<p>{{ Fill ColumnLetter Description }}</p> <pre><code>Type: String\nParameter Sets: ColumnLetter\nAliases:\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Set-CellComment/#-columnnumber","title":"-ColumnNumber","text":"<p>{{ Fill ColumnNumber Description }}</p> <pre><code>Type: Int32\nParameter Sets: ColumnNumber\nAliases:\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Set-CellComment/#-range","title":"-Range","text":"<p>{{ Fill Range Description }}</p> <pre><code>Type: Object\nParameter Sets: Range\nAliases: Address\n\nRequired: True\nPosition: 0\nDefault value: None\nAccept pipeline input: True (ByValue)\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Set-CellComment/#-row","title":"-Row","text":"<p>{{ Fill Row Description }}</p> <pre><code>Type: Int32\nParameter Sets: ColumnNumber, ColumnLetter\nAliases:\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Set-CellComment/#-text","title":"-Text","text":"<p>{{ Fill Text Description }}</p> <pre><code>Type: String\nParameter Sets: (All)\nAliases:\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Set-CellComment/#-worksheet","title":"-Worksheet","text":"<p>{{ Fill Worksheet Description }}</p> <pre><code>Type: ExcelWorksheet\nParameter Sets: Range\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre> <pre><code>Type: ExcelWorksheet\nParameter Sets: ColumnNumber, ColumnLetter\nAliases:\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Set-CellComment/#commonparameters","title":"CommonParameters","text":"<p>This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters.</p>"},{"location":"commands/Set-CellComment/#inputs","title":"INPUTS","text":""},{"location":"commands/Set-CellComment/#systemobject","title":"System.Object","text":""},{"location":"commands/Set-CellComment/#outputs","title":"OUTPUTS","text":""},{"location":"commands/Set-CellComment/#systemobject_1","title":"System.Object","text":""},{"location":"commands/Set-CellComment/#notes","title":"NOTES","text":""},{"location":"commands/Set-CellComment/#related-links","title":"RELATED LINKS","text":""},{"location":"commands/Set-CellStyle/","title":"Set-CellStyle","text":""},{"location":"commands/Set-CellStyle/#synopsis","title":"SYNOPSIS","text":"<p>{{ Fill in the Synopsis }}</p>"},{"location":"commands/Set-CellStyle/#syntax","title":"SYNTAX","text":"<pre><code>Set-CellStyle [[-Worksheet] &lt;Object&gt;] [[-Row] &lt;Object&gt;] [[-LastColumn] &lt;Object&gt;] [[-Pattern] &lt;ExcelFillStyle&gt;]\n [[-Color] &lt;Object&gt;] [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"commands/Set-CellStyle/#description","title":"DESCRIPTION","text":"<p>{{ Fill in the Description }}</p>"},{"location":"commands/Set-CellStyle/#examples","title":"EXAMPLES","text":""},{"location":"commands/Set-CellStyle/#example-1","title":"EXAMPLE 1","text":"<pre><code>PS C:\\&gt; {{ Add example code here }}\n</code></pre> <p>{{ Add example description here }}</p>"},{"location":"commands/Set-CellStyle/#parameters","title":"PARAMETERS","text":""},{"location":"commands/Set-CellStyle/#-color","title":"-Color","text":"<p>{{ Fill Color Description }}</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 4\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Set-CellStyle/#-lastcolumn","title":"-LastColumn","text":"<p>{{ Fill LastColumn Description }}</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 2\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Set-CellStyle/#-pattern","title":"-Pattern","text":"<p>{{ Fill Pattern Description }}</p> <pre><code>Type: ExcelFillStyle\nParameter Sets: (All)\nAliases:\nAccepted values: None, Solid, DarkGray, MediumGray, LightGray, Gray125, Gray0625, DarkVertical, DarkHorizontal, DarkDown, DarkUp, DarkGrid, DarkTrellis, LightVertical, LightHorizontal, LightDown, LightUp, LightGrid, LightTrellis\n\nRequired: False\nPosition: 3\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Set-CellStyle/#-row","title":"-Row","text":"<p>{{ Fill Row Description }}</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 1\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Set-CellStyle/#-worksheet","title":"-Worksheet","text":"<p>{{ Fill Worksheet Description }}</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 0\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Set-CellStyle/#commonparameters","title":"CommonParameters","text":"<p>This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters.</p>"},{"location":"commands/Set-CellStyle/#inputs","title":"INPUTS","text":""},{"location":"commands/Set-CellStyle/#none","title":"None","text":""},{"location":"commands/Set-CellStyle/#outputs","title":"OUTPUTS","text":""},{"location":"commands/Set-CellStyle/#systemobject","title":"System.Object","text":""},{"location":"commands/Set-CellStyle/#notes","title":"NOTES","text":""},{"location":"commands/Set-CellStyle/#related-links","title":"RELATED LINKS","text":""},{"location":"commands/Set-ExcelColumn/","title":"Set-ExcelColumn","text":""},{"location":"commands/Set-ExcelColumn/#synopsis","title":"SYNOPSIS","text":"<p>Adds or modifies a column in an Excel worksheet, filling values, setting formatting and/or creating named ranges.</p>"},{"location":"commands/Set-ExcelColumn/#syntax","title":"SYNTAX","text":""},{"location":"commands/Set-ExcelColumn/#package","title":"Package","text":"<pre><code>Set-ExcelColumn -ExcelPackage &lt;ExcelPackage&gt; [-WorksheetName &lt;String&gt;] [-Column &lt;Object&gt;] [-StartRow &lt;Int32&gt;]\n [-Value &lt;Object&gt;] [-Heading &lt;Object&gt;] [-NumberFormat &lt;Object&gt;] [-BorderAround &lt;ExcelBorderStyle&gt;]\n [-FontColor &lt;Object&gt;] [-Bold] [-Italic] [-Underline] [-UnderLineType &lt;ExcelUnderLineType&gt;] [-StrikeThru]\n [-FontShift &lt;ExcelVerticalAlignmentFont&gt;] [-FontName &lt;String&gt;] [-FontSize &lt;Single&gt;]\n [-BackgroundColor &lt;Object&gt;] [-BackgroundPattern &lt;ExcelFillStyle&gt;] [-PatternColor &lt;Object&gt;] [-WrapText]\n [-HorizontalAlignment &lt;ExcelHorizontalAlignment&gt;] [-VerticalAlignment &lt;ExcelVerticalAlignment&gt;]\n [-TextRotation &lt;Int32&gt;] [-AutoSize] [-Width &lt;Single&gt;] [-AutoNameRange] [-Hide] [-Specified] [-PassThru]\n [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"commands/Set-ExcelColumn/#sheet","title":"sheet","text":"<pre><code>Set-ExcelColumn -Worksheet &lt;ExcelWorksheet&gt; [-Column &lt;Object&gt;] [-StartRow &lt;Int32&gt;] [-Value &lt;Object&gt;]\n [-Heading &lt;Object&gt;] [-NumberFormat &lt;Object&gt;] [-BorderAround &lt;ExcelBorderStyle&gt;] [-FontColor &lt;Object&gt;] [-Bold]\n [-Italic] [-Underline] [-UnderLineType &lt;ExcelUnderLineType&gt;] [-StrikeThru]\n [-FontShift &lt;ExcelVerticalAlignmentFont&gt;] [-FontName &lt;String&gt;] [-FontSize &lt;Single&gt;]\n [-BackgroundColor &lt;Object&gt;] [-BackgroundPattern &lt;ExcelFillStyle&gt;] [-PatternColor &lt;Object&gt;] [-WrapText]\n [-HorizontalAlignment &lt;ExcelHorizontalAlignment&gt;] [-VerticalAlignment &lt;ExcelVerticalAlignment&gt;]\n [-TextRotation &lt;Int32&gt;] [-AutoSize] [-Width &lt;Single&gt;] [-AutoNameRange] [-Hide] [-Specified] [-PassThru]\n [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"commands/Set-ExcelColumn/#description","title":"DESCRIPTION","text":"<p>Set-ExcelColumn can take a value which is either a string containing a value or formula or a scriptblock which evaluates to a string, and optionally a column number and fills that value down the column.</p> <p>A column heading can be specified, and the column can be made a named range.</p> <p>The column can be formatted in the same operation.</p>"},{"location":"commands/Set-ExcelColumn/#examples","title":"EXAMPLES","text":""},{"location":"commands/Set-ExcelColumn/#example-1","title":"EXAMPLE 1","text":"<pre><code>PS\\&gt; Set-ExcelColumn -Worksheet $ws -Column 5 -NumberFormat 'Currency'\n</code></pre> <p>$ws contains a worksheet object - and column \"E\" is set to use the local currency format.</p> <p>Intelisense will complete the names of predefined number formats.</p> <p>You can see how currency is interpreted on the local computer with the command Expand-NumberFormat currency</p>"},{"location":"commands/Set-ExcelColumn/#example-2","title":"EXAMPLE 2","text":"<pre><code>PS\\&gt; Set-ExcelColumn -Worksheet $ws -Heading \"WinsToFastLaps\"  -Value {\"=E$row/C$row\"} -Column 7 -AutoSize -AutoNameRange\n</code></pre> <p>Here, $WS already contains a worksheet which holds counts of races won and fastest laps recorded by racing drivers (in columns C and E). Set-ExcelColumn specifies that Column 7 should have a heading of \"WinsToFastLaps\" and the data cells should contain =E2/C2 , =E3/C3 etc the new data cells should become a named range, which will also be named \"WinsToFastLaps\" and the column width will be set automatically.</p> <p>When a value begins with \"=\", it is treated as a formula.</p> <p>If value is a script block it will be evaluated, so here the string \"=E$row/C$Row\" will have the number of the current row inserted; see the value parameter for a list of variables which can be used.</p> <p>Note than when evaluating an expression in a string, it is necessary to wrap it in $() so $row is valid but $($row+1) is needed.</p> <p>To preventVariables merging into other parts of the string, use the back tick \"$columnName`4\" will be \"G4\" - without the backtick the string will look for a variable named \"columnName4\"</p>"},{"location":"commands/Set-ExcelColumn/#example-3","title":"EXAMPLE 3","text":"<pre><code>Set-ExcelColumn -Worksheet $ws -Heading \"Link\" -Value {\"https://en.wikipedia.org\" + $worksheet.cells[\"B$Row\"].value  }  -AutoSize\n</code></pre> <p>In this example, the worksheet in $ws has partial links to Wikipedia pages in column B.</p> <p>The -Value parameter is a script block which outputs a string beginning \"https...\" and ending with the value of the cell at column B in the current row.</p> <p>When given a valid URI, Set-ExcelColumn makes it a hyperlink.</p> <p>The column will be autosized to fit the links.</p>"},{"location":"commands/Set-ExcelColumn/#example-4","title":"EXAMPLE 4","text":"<pre><code>4..6 | Set-ExcelColumn -Worksheet $ws -AutoNameRange\n</code></pre> <p>Again $ws contains a worksheet. Here columns 4 to 6 are made into named ranges, row 1 is used for the range name and the rest of the column becomes the range.</p>"},{"location":"commands/Set-ExcelColumn/#parameters","title":"PARAMETERS","text":""},{"location":"commands/Set-ExcelColumn/#-autonamerange","title":"-AutoNameRange","text":"<p>Set the inserted data to be a named range.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Set-ExcelColumn/#-autosize","title":"-AutoSize","text":"<p>Attempt to auto-fit cells to the width their contents.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases: AutoFit\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Set-ExcelColumn/#-backgroundcolor","title":"-BackgroundColor","text":"<p>Change background color.</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Set-ExcelColumn/#-backgroundpattern","title":"-BackgroundPattern","text":"<p>Background pattern - \"Solid\" by default.</p> <pre><code>Type: ExcelFillStyle\nParameter Sets: (All)\nAliases:\nAccepted values: None, Solid, DarkGray, MediumGray, LightGray, Gray125, Gray0625, DarkVertical, DarkHorizontal, DarkDown, DarkUp, DarkGrid, DarkTrellis, LightVertical, LightHorizontal, LightDown, LightUp, LightGrid, LightTrellis\n\nRequired: False\nPosition: Named\nDefault value: Solid\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Set-ExcelColumn/#-bold","title":"-Bold","text":"<p>Make text bold; use -Bold:$false to remove bold.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Set-ExcelColumn/#-borderaround","title":"-BorderAround","text":"<p>Style of border to draw around the row.</p> <pre><code>Type: ExcelBorderStyle\nParameter Sets: (All)\nAliases:\nAccepted values: None, Hair, Dotted, DashDot, Thin, DashDotDot, Dashed, MediumDashDotDot, MediumDashed, MediumDashDot, Thick, Medium, Double\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Set-ExcelColumn/#-column","title":"-Column","text":"<p>Column to fill down - the first column is 1. 0 will be interpreted as first empty column.</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: 0\nAccept pipeline input: True (ByValue)\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Set-ExcelColumn/#-excelpackage","title":"-ExcelPackage","text":"<p>If specifying the worksheet by name, the ExcelPackage object which contains the worksheet also needs to be passed.</p> <pre><code>Type: ExcelPackage\nParameter Sets: Package\nAliases:\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Set-ExcelColumn/#-fontcolor","title":"-FontColor","text":"<p>Colour for the text - if none specified it will be left as it it is.</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Set-ExcelColumn/#-fontname","title":"-FontName","text":"<p>Font to use - Excel defaults to Calibri.</p> <pre><code>Type: String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Set-ExcelColumn/#-fontshift","title":"-FontShift","text":"<p>Subscript or Superscript (or None).</p> <pre><code>Type: ExcelVerticalAlignmentFont\nParameter Sets: (All)\nAliases:\nAccepted values: None, Baseline, Subscript, Superscript\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Set-ExcelColumn/#-fontsize","title":"-FontSize","text":"<p>Point size for the text.</p> <pre><code>Type: Single\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: 0\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Set-ExcelColumn/#-heading","title":"-Heading","text":"<p>Optional column heading.</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Set-ExcelColumn/#-hide","title":"-Hide","text":"<p>Hide the column.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases: Hidden\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Set-ExcelColumn/#-horizontalalignment","title":"-HorizontalAlignment","text":"<p>Position cell contents to Left, Right, Center etc. Default is \"General\".</p> <pre><code>Type: ExcelHorizontalAlignment\nParameter Sets: (All)\nAliases:\nAccepted values: General, Left, Center, CenterContinuous, Right, Fill, Distributed, Justify\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Set-ExcelColumn/#-italic","title":"-Italic","text":"<p>Make text italic; use -Italic:$false to remove italic.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Set-ExcelColumn/#-numberformat","title":"-NumberFormat","text":"<p>Number format to apply to cells for example \"dd/MM/yyyy HH:mm\", \"\u00a3#,##0.00;[Red]-\u00a3#,##0.00\", \"0.00%\" , \"##/##\" or \"0.0E+0\" etc.</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases: NFormat\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Set-ExcelColumn/#-passthru","title":"-PassThru","text":"<p>If specified, return an object representing the Column, to allow further work to be done on it.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Set-ExcelColumn/#-patterncolor","title":"-PatternColor","text":"<p>Secondary color for background pattern.</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases: PatternColour\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Set-ExcelColumn/#-specified","title":"-Specified","text":"<p>If specified, returns the range of cells which were affected.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Set-ExcelColumn/#-startrow","title":"-StartRow","text":"<p>First row to fill data in.</p> <pre><code>Type: Int32\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: 0\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Set-ExcelColumn/#-strikethru","title":"-StrikeThru","text":"<p>Strike through text; use -StrikeThru:$false to remove strike through.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Set-ExcelColumn/#-textrotation","title":"-TextRotation","text":"<p>Degrees to rotate text; up to +90 for anti-clockwise (\"upwards\"), or to -90 for clockwise.</p> <pre><code>Type: Int32\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: 0\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Set-ExcelColumn/#-underline","title":"-Underline","text":"<p>Underline the text using the underline style in -UnderlineType; use -Underline:$false to remove underlining.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Set-ExcelColumn/#-underlinetype","title":"-UnderLineType","text":"<p>Specifies whether underlining should be single or double, normal or accounting mode. The default is \"Single\".</p> <pre><code>Type: ExcelUnderLineType\nParameter Sets: (All)\nAliases:\nAccepted values: None, Single, Double, SingleAccounting, DoubleAccounting\n\nRequired: False\nPosition: Named\nDefault value: Single\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Set-ExcelColumn/#-value","title":"-Value","text":"<p>A value, formula or scriptblock to fill in. A script block can use $worksheet, $row, $column [number], $columnName [letter(s)], $startRow, $startColumn, $endRow, $endColumn.</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Set-ExcelColumn/#-verticalalignment","title":"-VerticalAlignment","text":"<p>Position cell contents to Top, Bottom or Center.</p> <pre><code>Type: ExcelVerticalAlignment\nParameter Sets: (All)\nAliases:\nAccepted values: Top, Center, Bottom, Distributed, Justify\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Set-ExcelColumn/#-width","title":"-Width","text":"<p>Set cells to a fixed width, ignored if -AutoSize is specified.</p> <pre><code>Type: Single\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: 0\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Set-ExcelColumn/#-worksheet","title":"-Worksheet","text":"<p>This passes the worksheet object instead of passing a sheet name and an Excelpackage object.</p> <pre><code>Type: ExcelWorksheet\nParameter Sets: sheet\nAliases:\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Set-ExcelColumn/#-worksheetname","title":"-WorksheetName","text":"<p>The sheet to update can be given as a name or an Excel Worksheet object - this sets it by name.</p> <pre><code>Type: String\nParameter Sets: Package\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: Sheet1\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Set-ExcelColumn/#-wraptext","title":"-WrapText","text":"<p>Turn on Text-Wrapping; use -WrapText:$false to turn off wrapping.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Set-ExcelColumn/#commonparameters","title":"CommonParameters","text":"<p>This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters.</p>"},{"location":"commands/Set-ExcelColumn/#inputs","title":"INPUTS","text":""},{"location":"commands/Set-ExcelColumn/#outputs","title":"OUTPUTS","text":""},{"location":"commands/Set-ExcelColumn/#officeopenxmlexcelcolumn","title":"OfficeOpenXml.ExcelColumn","text":""},{"location":"commands/Set-ExcelColumn/#systemstring","title":"System.String","text":""},{"location":"commands/Set-ExcelColumn/#notes","title":"NOTES","text":""},{"location":"commands/Set-ExcelColumn/#related-links","title":"RELATED LINKS","text":""},{"location":"commands/Set-ExcelRange/","title":"Set-ExcelRange","text":""},{"location":"commands/Set-ExcelRange/#synopsis","title":"SYNOPSIS","text":"<p>Applies number, font, alignment and/or color formatting, values or formulas to a range of Excel cells.</p>"},{"location":"commands/Set-ExcelRange/#syntax","title":"SYNTAX","text":"<pre><code>Set-ExcelRange [[-Range] &lt;Object&gt;] [-Worksheet &lt;ExcelWorksheet&gt;] [-NumberFormat &lt;Object&gt;]\n [-BorderAround &lt;ExcelBorderStyle&gt;] [-BorderColor &lt;Object&gt;] [-BorderBottom &lt;ExcelBorderStyle&gt;]\n [-BorderTop &lt;ExcelBorderStyle&gt;] [-BorderLeft &lt;ExcelBorderStyle&gt;] [-BorderRight &lt;ExcelBorderStyle&gt;]\n [-FontColor &lt;Object&gt;] [-Value &lt;Object&gt;] [-Formula &lt;Object&gt;] [-ArrayFormula] [-ResetFont] [-Bold] [-Italic]\n [-Underline] [-UnderLineType &lt;ExcelUnderLineType&gt;] [-StrikeThru] [-FontShift &lt;ExcelVerticalAlignmentFont&gt;]\n [-FontName &lt;String&gt;] [-FontSize &lt;Single&gt;] [-BackgroundColor &lt;Object&gt;] [-BackgroundPattern &lt;ExcelFillStyle&gt;]\n [-PatternColor &lt;Object&gt;] [-WrapText] [-HorizontalAlignment &lt;ExcelHorizontalAlignment&gt;]\n [-VerticalAlignment &lt;ExcelVerticalAlignment&gt;] [-TextRotation &lt;Int32&gt;] [-AutoSize] [-Width &lt;Single&gt;]\n [-Height &lt;Single&gt;] [-Hidden] [-Locked] [-Merge] [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"commands/Set-ExcelRange/#description","title":"DESCRIPTION","text":"<p>Set-ExcelRange was created to set the style elements for a range of cells, this includes auto-sizing and hiding, setting font elements (Name, Size, Bold, Italic, Underline &amp; UnderlineStyle and Subscript &amp; SuperScript), font and background colors, borders, text wrapping, rotation, alignment within cells, and number format.</p> <p>It was orignally named \"Set-Format\", but it has been extended to set Values, Formulas and ArrayFormulas (sometimes called Ctrl-shift-Enter [CSE] formulas); because of this, the name has become Set-ExcelRange but the old name of Set-Format is preserved as an alias.</p>"},{"location":"commands/Set-ExcelRange/#examples","title":"EXAMPLES","text":""},{"location":"commands/Set-ExcelRange/#example-1","title":"EXAMPLE 1","text":"<pre><code>PS\\&gt; $sheet.Column(3) | Set-ExcelRange -HorizontalAlignment Right -NumberFormat \"#,###\" -AutoFit\n</code></pre> <p>Selects column 3 from a sheet object (within a workbook object, which is a child of the ExcelPackage object) and passes it to Set-ExcelRange which formats numbers as a integers with comma-separated groups, aligns it right, and auto-fits the column to the contents.</p>"},{"location":"commands/Set-ExcelRange/#example-2","title":"EXAMPLE 2","text":"<pre><code>PS\\&gt; Set-ExcelRange -Range $sheet.Cells[\"E1:H1048576\"]  -HorizontalAlignment Right -NumberFormat \"#,###\"\n</code></pre> <p>Instead of piping the address, this version specifies a block of cells and applies similar formatting.</p>"},{"location":"commands/Set-ExcelRange/#example-3","title":"EXAMPLE 3","text":"<pre><code>PS\\&gt; Set-ExcelRange $excel.Workbook.Worksheets[1].Tables[\"Processes\"] -Italic\n</code></pre> <p>This time instead of specifying a range of cells, a table is selected by name and formatted as italic.</p>"},{"location":"commands/Set-ExcelRange/#parameters","title":"PARAMETERS","text":""},{"location":"commands/Set-ExcelRange/#-arrayformula","title":"-ArrayFormula","text":"<p>Specifies formula should be an array formula (a.k.a CSE [ctrl-shift-enter] formula).</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Set-ExcelRange/#-autosize","title":"-AutoSize","text":"<p>Autofit cells to width (columns or ranges only).</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases: AutoFit\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Set-ExcelRange/#-backgroundcolor","title":"-BackgroundColor","text":"<p>Change background color.</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Set-ExcelRange/#-backgroundpattern","title":"-BackgroundPattern","text":"<p>Background pattern - Solid by default.</p> <pre><code>Type: ExcelFillStyle\nParameter Sets: (All)\nAliases:\nAccepted values: None, Solid, DarkGray, MediumGray, LightGray, Gray125, Gray0625, DarkVertical, DarkHorizontal, DarkDown, DarkUp, DarkGrid, DarkTrellis, LightVertical, LightHorizontal, LightDown, LightUp, LightGrid, LightTrellis\n\nRequired: False\nPosition: Named\nDefault value: Solid\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Set-ExcelRange/#-bold","title":"-Bold","text":"<p>Make text bold; use -Bold:$false to remove bold.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Set-ExcelRange/#-borderaround","title":"-BorderAround","text":"<p>Style of border to draw around the range.</p> <pre><code>Type: ExcelBorderStyle\nParameter Sets: (All)\nAliases:\nAccepted values: None, Hair, Dotted, DashDot, Thin, DashDotDot, Dashed, MediumDashDotDot, MediumDashed, MediumDashDot, Thick, Medium, Double\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Set-ExcelRange/#-borderbottom","title":"-BorderBottom","text":"<p>Style for the bottom border.</p> <pre><code>Type: ExcelBorderStyle\nParameter Sets: (All)\nAliases:\nAccepted values: None, Hair, Dotted, DashDot, Thin, DashDotDot, Dashed, MediumDashDotDot, MediumDashed, MediumDashDot, Thick, Medium, Double\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Set-ExcelRange/#-bordercolor","title":"-BorderColor","text":"<p>Color of the border.</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: [System.Drawing.Color]::Black\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Set-ExcelRange/#-borderleft","title":"-BorderLeft","text":"<p>Style for the left border.</p> <pre><code>Type: ExcelBorderStyle\nParameter Sets: (All)\nAliases:\nAccepted values: None, Hair, Dotted, DashDot, Thin, DashDotDot, Dashed, MediumDashDotDot, MediumDashed, MediumDashDot, Thick, Medium, Double\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Set-ExcelRange/#-borderright","title":"-BorderRight","text":"<p>Style for the right border.</p> <pre><code>Type: ExcelBorderStyle\nParameter Sets: (All)\nAliases:\nAccepted values: None, Hair, Dotted, DashDot, Thin, DashDotDot, Dashed, MediumDashDotDot, MediumDashed, MediumDashDot, Thick, Medium, Double\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Set-ExcelRange/#-bordertop","title":"-BorderTop","text":"<p>Style for the top border.</p> <pre><code>Type: ExcelBorderStyle\nParameter Sets: (All)\nAliases:\nAccepted values: None, Hair, Dotted, DashDot, Thin, DashDotDot, Dashed, MediumDashDotDot, MediumDashed, MediumDashDot, Thick, Medium, Double\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Set-ExcelRange/#-fontcolor","title":"-FontColor","text":"<p>Colour for the text - if none is specified it will be left as it is.</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases: ForegroundColor\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Set-ExcelRange/#-fontname","title":"-FontName","text":"<p>Font to use - Excel defaults to Calibri.</p> <pre><code>Type: String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Set-ExcelRange/#-fontshift","title":"-FontShift","text":"<p>Subscript or Superscript (or none).</p> <pre><code>Type: ExcelVerticalAlignmentFont\nParameter Sets: (All)\nAliases:\nAccepted values: None, Baseline, Subscript, Superscript\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Set-ExcelRange/#-fontsize","title":"-FontSize","text":"<p>Point size for the text.</p> <pre><code>Type: Single\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: 0\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Set-ExcelRange/#-formula","title":"-Formula","text":"<p>Formula for the cell.</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Set-ExcelRange/#-height","title":"-Height","text":"<p>Set cells to a fixed height (rows or ranges only).</p> <pre><code>Type: Single\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: 0\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Set-ExcelRange/#-hidden","title":"-Hidden","text":"<p>Hide a row or column (not a range); use -Hidden:$false to unhide.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases: Hide\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Set-ExcelRange/#-horizontalalignment","title":"-HorizontalAlignment","text":"<p>Position cell contents to Left, Right, Center etc. default is 'General'.</p> <pre><code>Type: ExcelHorizontalAlignment\nParameter Sets: (All)\nAliases:\nAccepted values: General, Left, Center, CenterContinuous, Right, Fill, Distributed, Justify\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Set-ExcelRange/#-italic","title":"-Italic","text":"<p>Make text italic; use -Italic:$false to remove italic.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Set-ExcelRange/#-locked","title":"-Locked","text":"<p>Locks cells. Cells are locked by default use -locked:$false on the whole sheet and then lock specific ones, and enable protection on the sheet.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Set-ExcelRange/#-merge","title":"-Merge","text":"<p>Merges cells - it is recommended that you explicitly set -HorizontalAlignment</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Set-ExcelRange/#-numberformat","title":"-NumberFormat","text":"<p>Number format to apply to cells for example \"dd/MM/yyyy HH:mm\", \"\u00a3#,##0.00;[Red]-\u00a3#,##0.00\", \"0.00%\" , \"##/##\" or \"0.0E+0\" etc.</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases: NFormat\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Set-ExcelRange/#-patterncolor","title":"-PatternColor","text":"<p>Secondary color for background pattern.</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases: PatternColour\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Set-ExcelRange/#-range","title":"-Range","text":"<p>One or more row(s), Column(s) and/or block(s) of cells to format.</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases: Address\n\nRequired: False\nPosition: 0\nDefault value: None\nAccept pipeline input: True (ByValue)\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Set-ExcelRange/#-resetfont","title":"-ResetFont","text":"<p>Clear Bold, Italic, StrikeThrough and Underline and set color to Black.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Set-ExcelRange/#-strikethru","title":"-StrikeThru","text":"<p>Strike through text; use -Strikethru:$false to remove Strike through</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Set-ExcelRange/#-textrotation","title":"-TextRotation","text":"<p>Degrees to rotate text; up to +90 for anti-clockwise (\"upwards\"), or to -90 for clockwise.</p> <pre><code>Type: Int32\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: 0\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Set-ExcelRange/#-underline","title":"-Underline","text":"<p>Underline the text using the underline style in -UnderlineType; use -Underline:$false to remove underlining.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Set-ExcelRange/#-underlinetype","title":"-UnderLineType","text":"<p>Specifies whether underlining should be single or double, normal or accounting mode. The default is \"Single\".</p> <pre><code>Type: ExcelUnderLineType\nParameter Sets: (All)\nAliases:\nAccepted values: None, Single, Double, SingleAccounting, DoubleAccounting\n\nRequired: False\nPosition: Named\nDefault value: Single\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Set-ExcelRange/#-value","title":"-Value","text":"<p>Value for the cell.</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Set-ExcelRange/#-verticalalignment","title":"-VerticalAlignment","text":"<p>Position cell contents to Top, Bottom or Center.</p> <pre><code>Type: ExcelVerticalAlignment\nParameter Sets: (All)\nAliases:\nAccepted values: Top, Center, Bottom, Distributed, Justify\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Set-ExcelRange/#-width","title":"-Width","text":"<p>Set cells to a fixed width (columns or ranges only), ignored if Autosize is specified.</p> <pre><code>Type: Single\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: 0\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Set-ExcelRange/#-worksheet","title":"-Worksheet","text":"<p>The worksheet where the format is to be applied.</p> <pre><code>Type: ExcelWorksheet\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Set-ExcelRange/#-wraptext","title":"-WrapText","text":"<p>Turn on Text-Wrapping; use -WrapText:$false to turn off wrapping.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Set-ExcelRange/#commonparameters","title":"CommonParameters","text":"<p>This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters.</p>"},{"location":"commands/Set-ExcelRange/#inputs","title":"INPUTS","text":""},{"location":"commands/Set-ExcelRange/#outputs","title":"OUTPUTS","text":""},{"location":"commands/Set-ExcelRange/#notes","title":"NOTES","text":""},{"location":"commands/Set-ExcelRange/#related-links","title":"RELATED LINKS","text":""},{"location":"commands/Set-ExcelRow/","title":"Set-ExcelRow","text":""},{"location":"commands/Set-ExcelRow/#synopsis","title":"SYNOPSIS","text":"<p>Fills values into a [new] row in an Excel spreadsheet, and sets row formats.</p>"},{"location":"commands/Set-ExcelRow/#syntax","title":"SYNTAX","text":""},{"location":"commands/Set-ExcelRow/#package","title":"Package","text":"<pre><code>Set-ExcelRow -ExcelPackage &lt;ExcelPackage&gt; [-WorksheetName &lt;Object&gt;] [-Row &lt;Object&gt;] [-StartColumn &lt;Int32&gt;]\n [-Value &lt;Object&gt;] [-Heading &lt;Object&gt;] [-HeadingBold] [-HeadingSize &lt;Int32&gt;] [-NumberFormat &lt;Object&gt;]\n [-BorderAround &lt;ExcelBorderStyle&gt;] [-BorderColor &lt;Object&gt;] [-BorderBottom &lt;ExcelBorderStyle&gt;]\n [-BorderTop &lt;ExcelBorderStyle&gt;] [-BorderLeft &lt;ExcelBorderStyle&gt;] [-BorderRight &lt;ExcelBorderStyle&gt;]\n [-FontColor &lt;Object&gt;] [-Bold] [-Italic] [-Underline] [-UnderLineType &lt;ExcelUnderLineType&gt;] [-StrikeThru]\n [-FontShift &lt;ExcelVerticalAlignmentFont&gt;] [-FontName &lt;String&gt;] [-FontSize &lt;Single&gt;]\n [-BackgroundColor &lt;Object&gt;] [-BackgroundPattern &lt;ExcelFillStyle&gt;] [-PatternColor &lt;Object&gt;] [-WrapText]\n [-HorizontalAlignment &lt;ExcelHorizontalAlignment&gt;] [-VerticalAlignment &lt;ExcelVerticalAlignment&gt;]\n [-TextRotation &lt;Int32&gt;] [-Height &lt;Single&gt;] [-Hide] [-ReturnRange] [-PassThru] [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"commands/Set-ExcelRow/#sheet","title":"Sheet","text":"<pre><code>Set-ExcelRow -Worksheet &lt;ExcelWorksheet&gt; [-Row &lt;Object&gt;] [-StartColumn &lt;Int32&gt;] [-Value &lt;Object&gt;]\n [-Heading &lt;Object&gt;] [-HeadingBold] [-HeadingSize &lt;Int32&gt;] [-NumberFormat &lt;Object&gt;]\n [-BorderAround &lt;ExcelBorderStyle&gt;] [-BorderColor &lt;Object&gt;] [-BorderBottom &lt;ExcelBorderStyle&gt;]\n [-BorderTop &lt;ExcelBorderStyle&gt;] [-BorderLeft &lt;ExcelBorderStyle&gt;] [-BorderRight &lt;ExcelBorderStyle&gt;]\n [-FontColor &lt;Object&gt;] [-Bold] [-Italic] [-Underline] [-UnderLineType &lt;ExcelUnderLineType&gt;] [-StrikeThru]\n [-FontShift &lt;ExcelVerticalAlignmentFont&gt;] [-FontName &lt;String&gt;] [-FontSize &lt;Single&gt;]\n [-BackgroundColor &lt;Object&gt;] [-BackgroundPattern &lt;ExcelFillStyle&gt;] [-PatternColor &lt;Object&gt;] [-WrapText]\n [-HorizontalAlignment &lt;ExcelHorizontalAlignment&gt;] [-VerticalAlignment &lt;ExcelVerticalAlignment&gt;]\n [-TextRotation &lt;Int32&gt;] [-Height &lt;Single&gt;] [-Hide] [-ReturnRange] [-PassThru] [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"commands/Set-ExcelRow/#description","title":"DESCRIPTION","text":"<p>Set-ExcelRow accepts either a Worksheet object or an ExcelPackage object returned by Export-Excel and the name of a sheet, and inserts the chosen contents into a row of the sheet.</p> <p>The contents can be a constant, like \"42\", a formula or a script block which is converted into a constant or a formula.</p> <p>The first cell of the row can optionally be given a heading.</p>"},{"location":"commands/Set-ExcelRow/#examples","title":"EXAMPLES","text":""},{"location":"commands/Set-ExcelRow/#example-1","title":"EXAMPLE 1","text":"<pre><code>PS\\&gt; Set-ExcelRow -Worksheet $ws -Heading Total -Value {\"=sum($columnName`2:$columnName$endrow)\" }\n</code></pre> <p>$Ws contains a worksheet object, and no Row number is specified so Set-ExcelRow will select the next row after the end of the data in the sheet.</p> <p>The first cell in the row will contain \"Total\", and each of the other cells will contain =Sum(xx2:xx99) where xx is the column name, and 99 is the last row of data.</p> <p>Note the use of the backtick in the script block (`2) to Prevent 2 becoming part of the variable \"ColumnName\"</p> <p>The script block can use $Worksheet, $Row, $Column (number), $ColumnName (letter), $StartRow/Column and $EndRow/Column.</p>"},{"location":"commands/Set-ExcelRow/#example-2","title":"EXAMPLE 2","text":"<pre><code>PS\\&gt; Set-ExcelRow -Worksheet $ws -Heading Total -HeadingBold -Value {\"=sum($columnName`2:$columnName$endrow)\" } -NumberFormat 'Currency' -StartColumn 2 -Bold -BorderTop Double -BorderBottom Thin\n</code></pre> <p>This builds on the previous example, but this time the label \"Total\" appears in column 2 and the formula fills from column 3 onwards.</p> <p>The formula and heading are set in bold face, and the formula is formatted for the local currency, and given a double line border above and single line border below.</p>"},{"location":"commands/Set-ExcelRow/#parameters","title":"PARAMETERS","text":""},{"location":"commands/Set-ExcelRow/#-backgroundcolor","title":"-BackgroundColor","text":"<p>Change background color.</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Set-ExcelRow/#-backgroundpattern","title":"-BackgroundPattern","text":"<p>Background pattern - solid by default.</p> <pre><code>Type: ExcelFillStyle\nParameter Sets: (All)\nAliases:\nAccepted values: None, Solid, DarkGray, MediumGray, LightGray, Gray125, Gray0625, DarkVertical, DarkHorizontal, DarkDown, DarkUp, DarkGrid, DarkTrellis, LightVertical, LightHorizontal, LightDown, LightUp, LightGrid, LightTrellis\n\nRequired: False\nPosition: Named\nDefault value: Solid\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Set-ExcelRow/#-bold","title":"-Bold","text":"<p>Make text bold; use -Bold:$false to remove bold.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Set-ExcelRow/#-borderaround","title":"-BorderAround","text":"<p>Style of border to draw around the row.</p> <pre><code>Type: ExcelBorderStyle\nParameter Sets: (All)\nAliases:\nAccepted values: None, Hair, Dotted, DashDot, Thin, DashDotDot, Dashed, MediumDashDotDot, MediumDashed, MediumDashDot, Thick, Medium, Double\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Set-ExcelRow/#-borderbottom","title":"-BorderBottom","text":"<p>Style for the bottom border.</p> <pre><code>Type: ExcelBorderStyle\nParameter Sets: (All)\nAliases:\nAccepted values: None, Hair, Dotted, DashDot, Thin, DashDotDot, Dashed, MediumDashDotDot, MediumDashed, MediumDashDot, Thick, Medium, Double\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Set-ExcelRow/#-bordercolor","title":"-BorderColor","text":"<p>Color of the border.</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: [System.Drawing.Color]::Black\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Set-ExcelRow/#-borderleft","title":"-BorderLeft","text":"<p>Style for the left border.</p> <pre><code>Type: ExcelBorderStyle\nParameter Sets: (All)\nAliases:\nAccepted values: None, Hair, Dotted, DashDot, Thin, DashDotDot, Dashed, MediumDashDotDot, MediumDashed, MediumDashDot, Thick, Medium, Double\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Set-ExcelRow/#-borderright","title":"-BorderRight","text":"<p>Style for the right border.</p> <pre><code>Type: ExcelBorderStyle\nParameter Sets: (All)\nAliases:\nAccepted values: None, Hair, Dotted, DashDot, Thin, DashDotDot, Dashed, MediumDashDotDot, MediumDashed, MediumDashDot, Thick, Medium, Double\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Set-ExcelRow/#-bordertop","title":"-BorderTop","text":"<p>Style for the top border.</p> <pre><code>Type: ExcelBorderStyle\nParameter Sets: (All)\nAliases:\nAccepted values: None, Hair, Dotted, DashDot, Thin, DashDotDot, Dashed, MediumDashDotDot, MediumDashed, MediumDashDot, Thick, Medium, Double\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Set-ExcelRow/#-excelpackage","title":"-ExcelPackage","text":"<p>An Excel package object - for example from Export-Excel -PassThru - if specified requires a sheet name to be passed a parameter.</p> <pre><code>Type: ExcelPackage\nParameter Sets: Package\nAliases:\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Set-ExcelRow/#-fontcolor","title":"-FontColor","text":"<p>Color for the text - if not specified the font will be left as it it is.</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Set-ExcelRow/#-fontname","title":"-FontName","text":"<p>Font to use - Excel defaults to Calibri.</p> <pre><code>Type: String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Set-ExcelRow/#-fontshift","title":"-FontShift","text":"<p>Subscript or Superscript (or none).</p> <pre><code>Type: ExcelVerticalAlignmentFont\nParameter Sets: (All)\nAliases:\nAccepted values: None, Baseline, Subscript, Superscript\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Set-ExcelRow/#-fontsize","title":"-FontSize","text":"<p>Point size for the text.</p> <pre><code>Type: Single\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: 0\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Set-ExcelRow/#-heading","title":"-Heading","text":"<p>Optional row-heading.</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Set-ExcelRow/#-headingbold","title":"-HeadingBold","text":"<p>Set the heading in bold type.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Set-ExcelRow/#-headingsize","title":"-HeadingSize","text":"<p>Change the font-size of the heading.</p> <pre><code>Type: Int32\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: 0\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Set-ExcelRow/#-height","title":"-Height","text":"<p>Set cells to a fixed height.</p> <pre><code>Type: Single\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: 0\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Set-ExcelRow/#-hide","title":"-Hide","text":"<p>Hide the row.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases: Hidden\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Set-ExcelRow/#-horizontalalignment","title":"-HorizontalAlignment","text":"<p>Position cell contents to Left, Right, Center etc. default is 'General'.</p> <pre><code>Type: ExcelHorizontalAlignment\nParameter Sets: (All)\nAliases:\nAccepted values: General, Left, Center, CenterContinuous, Right, Fill, Distributed, Justify\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Set-ExcelRow/#-italic","title":"-Italic","text":"<p>Make text italic; use -Italic:$false to remove italic.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Set-ExcelRow/#-numberformat","title":"-NumberFormat","text":"<p>Number format to apply to cells e.g. \"dd/MM/yyyy HH:mm\", \"\u00a3#,##0.00;[Red]-\u00a3#,##0.00\", \"0.00%\" , \"##/##\" , \"0.0E+0\" etc.</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases: NFormat\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Set-ExcelRow/#-passthru","title":"-PassThru","text":"<p>If Specified, return a row object to allow further work to be done.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Set-ExcelRow/#-patterncolor","title":"-PatternColor","text":"<p>Secondary color for background pattern.</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases: PatternColour\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Set-ExcelRow/#-returnrange","title":"-ReturnRange","text":"<p>If sepecified, returns the range of cells which were affected.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Set-ExcelRow/#-row","title":"-Row","text":"<p>Row to fill right - first row is 1. 0 will be interpreted as first unused row.</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: 0\nAccept pipeline input: True (ByValue)\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Set-ExcelRow/#-startcolumn","title":"-StartColumn","text":"<p>Position in the row to start from.</p> <pre><code>Type: Int32\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: 0\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Set-ExcelRow/#-strikethru","title":"-StrikeThru","text":"<p>Strike through text; use -StrikeThru:$false to remove strike through.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Set-ExcelRow/#-textrotation","title":"-TextRotation","text":"<p>Degrees to rotate text. Up to +90 for anti-clockwise (\"upwards\"), or to -90 for clockwise.</p> <pre><code>Type: Int32\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: 0\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Set-ExcelRow/#-underline","title":"-Underline","text":"<p>Underline the text using the underline style in -UnderlineType; use -Underline:$false to remove underlining.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Set-ExcelRow/#-underlinetype","title":"-UnderLineType","text":"<p>Specifies whether underlining should be single or double, normal or accounting mode. The default is \"Single\".</p> <pre><code>Type: ExcelUnderLineType\nParameter Sets: (All)\nAliases:\nAccepted values: None, Single, Double, SingleAccounting, DoubleAccounting\n\nRequired: False\nPosition: Named\nDefault value: Single\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Set-ExcelRow/#-value","title":"-Value","text":"<p>Value, Formula or ScriptBlock to fill in. A ScriptBlock can use $worksheet, $row, $Column [number], $ColumnName [letter(s)], $startRow, $startColumn, $endRow, $endColumn.</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Set-ExcelRow/#-verticalalignment","title":"-VerticalAlignment","text":"<p>Position cell contents to Top, Bottom or Center.</p> <pre><code>Type: ExcelVerticalAlignment\nParameter Sets: (All)\nAliases:\nAccepted values: Top, Center, Bottom, Distributed, Justify\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Set-ExcelRow/#-worksheet","title":"-Worksheet","text":"<p>A worksheet object instead of passing a name and package.</p> <pre><code>Type: ExcelWorksheet\nParameter Sets: Sheet\nAliases:\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Set-ExcelRow/#-worksheetname","title":"-WorksheetName","text":"<p>The name of the sheet to update in the package.</p> <pre><code>Type: Object\nParameter Sets: Package\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: Sheet1\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Set-ExcelRow/#-wraptext","title":"-WrapText","text":"<p>Turn on Text-Wrapping; use -WrapText:$false to turn off wrapping.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Set-ExcelRow/#commonparameters","title":"CommonParameters","text":"<p>This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters.</p>"},{"location":"commands/Set-ExcelRow/#inputs","title":"INPUTS","text":""},{"location":"commands/Set-ExcelRow/#outputs","title":"OUTPUTS","text":""},{"location":"commands/Set-ExcelRow/#officeopenxmlexcelrow","title":"OfficeOpenXml.ExcelRow","text":""},{"location":"commands/Set-ExcelRow/#systemstring","title":"System.String","text":""},{"location":"commands/Set-ExcelRow/#notes","title":"NOTES","text":""},{"location":"commands/Set-ExcelRow/#related-links","title":"RELATED LINKS","text":""},{"location":"commands/Set-WorksheetProtection/","title":"Set-WorksheetProtection","text":""},{"location":"commands/Set-WorksheetProtection/#synopsis","title":"SYNOPSIS","text":"<p>{{ Fill in the Synopsis }}</p>"},{"location":"commands/Set-WorksheetProtection/#syntax","title":"SYNTAX","text":"<pre><code>Set-WorksheetProtection [-Worksheet] &lt;ExcelWorksheet&gt; [-IsProtected] [-AllowAll] [-BlockSelectLockedCells]\n [-BlockSelectUnlockedCells] [-AllowFormatCells] [-AllowFormatColumns] [-AllowFormatRows] [-AllowInsertColumns]\n [-AllowInsertRows] [-AllowInsertHyperlinks] [-AllowDeleteColumns] [-AllowDeleteRows] [-AllowSort]\n [-AllowAutoFilter] [-AllowPivotTables] [-BlockEditObject] [-BlockEditScenarios] [[-LockAddress] &lt;String&gt;]\n [[-UnLockAddress] &lt;String&gt;] [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"commands/Set-WorksheetProtection/#description","title":"DESCRIPTION","text":"<p>{{ Fill in the Description }}</p>"},{"location":"commands/Set-WorksheetProtection/#examples","title":"EXAMPLES","text":""},{"location":"commands/Set-WorksheetProtection/#example-1","title":"EXAMPLE 1","text":"<pre><code>PS C:\\&gt; {{ Add example code here }}\n</code></pre> <p>{{ Add example description here }}</p>"},{"location":"commands/Set-WorksheetProtection/#parameters","title":"PARAMETERS","text":""},{"location":"commands/Set-WorksheetProtection/#-allowall","title":"-AllowAll","text":"<p>{{ Fill AllowAll Description }}</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Set-WorksheetProtection/#-allowautofilter","title":"-AllowAutoFilter","text":"<p>{{ Fill AllowAutoFilter Description }}</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Set-WorksheetProtection/#-allowdeletecolumns","title":"-AllowDeleteColumns","text":"<p>{{ Fill AllowDeleteColumns Description }}</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Set-WorksheetProtection/#-allowdeleterows","title":"-AllowDeleteRows","text":"<p>{{ Fill AllowDeleteRows Description }}</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Set-WorksheetProtection/#-allowformatcells","title":"-AllowFormatCells","text":"<p>{{ Fill AllowFormatCells Description }}</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Set-WorksheetProtection/#-allowformatcolumns","title":"-AllowFormatColumns","text":"<p>{{ Fill AllowFormatColumns Description }}</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Set-WorksheetProtection/#-allowformatrows","title":"-AllowFormatRows","text":"<p>{{ Fill AllowFormatRows Description }}</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Set-WorksheetProtection/#-allowinsertcolumns","title":"-AllowInsertColumns","text":"<p>{{ Fill AllowInsertColumns Description }}</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Set-WorksheetProtection/#-allowinserthyperlinks","title":"-AllowInsertHyperlinks","text":"<p>{{ Fill AllowInsertHyperlinks Description }}</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Set-WorksheetProtection/#-allowinsertrows","title":"-AllowInsertRows","text":"<p>{{ Fill AllowInsertRows Description }}</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Set-WorksheetProtection/#-allowpivottables","title":"-AllowPivotTables","text":"<p>{{ Fill AllowPivotTables Description }}</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Set-WorksheetProtection/#-allowsort","title":"-AllowSort","text":"<p>{{ Fill AllowSort Description }}</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Set-WorksheetProtection/#-blockeditobject","title":"-BlockEditObject","text":"<p>{{ Fill BlockEditObject Description }}</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Set-WorksheetProtection/#-blockeditscenarios","title":"-BlockEditScenarios","text":"<p>{{ Fill BlockEditScenarios Description }}</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Set-WorksheetProtection/#-blockselectlockedcells","title":"-BlockSelectLockedCells","text":"<p>{{ Fill BlockSelectLockedCells Description }}</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Set-WorksheetProtection/#-blockselectunlockedcells","title":"-BlockSelectUnlockedCells","text":"<p>{{ Fill BlockSelectUnlockedCells Description }}</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Set-WorksheetProtection/#-isprotected","title":"-IsProtected","text":"<p>{{ Fill IsProtected Description }}</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Set-WorksheetProtection/#-lockaddress","title":"-LockAddress","text":"<p>{{ Fill LockAddress Description }}</p> <pre><code>Type: String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 1\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Set-WorksheetProtection/#-unlockaddress","title":"-UnLockAddress","text":"<p>{{ Fill UnLockAddress Description }}</p> <pre><code>Type: String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 2\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Set-WorksheetProtection/#-worksheet","title":"-Worksheet","text":"<p>{{ Fill Worksheet Description }}</p> <pre><code>Type: ExcelWorksheet\nParameter Sets: (All)\nAliases:\n\nRequired: True\nPosition: 0\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Set-WorksheetProtection/#commonparameters","title":"CommonParameters","text":"<p>This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters.</p>"},{"location":"commands/Set-WorksheetProtection/#inputs","title":"INPUTS","text":""},{"location":"commands/Set-WorksheetProtection/#none","title":"None","text":""},{"location":"commands/Set-WorksheetProtection/#outputs","title":"OUTPUTS","text":""},{"location":"commands/Set-WorksheetProtection/#systemobject","title":"System.Object","text":""},{"location":"commands/Set-WorksheetProtection/#notes","title":"NOTES","text":""},{"location":"commands/Set-WorksheetProtection/#related-links","title":"RELATED LINKS","text":""},{"location":"commands/Test-Boolean/","title":"Test-Boolean","text":""},{"location":"commands/Test-Boolean/#synopsis","title":"SYNOPSIS","text":"<p>{{ Fill in the Synopsis }}</p>"},{"location":"commands/Test-Boolean/#syntax","title":"SYNTAX","text":"<pre><code>Test-Boolean [[-p] &lt;Object&gt;] [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"commands/Test-Boolean/#description","title":"DESCRIPTION","text":"<p>{{ Fill in the Description }}</p>"},{"location":"commands/Test-Boolean/#examples","title":"EXAMPLES","text":""},{"location":"commands/Test-Boolean/#example-1","title":"EXAMPLE 1","text":"<pre><code>PS C:\\&gt; {{ Add example code here }}\n</code></pre> <p>{{ Add example description here }}</p>"},{"location":"commands/Test-Boolean/#parameters","title":"PARAMETERS","text":""},{"location":"commands/Test-Boolean/#-p","title":"-p","text":"<p>{{ Fill p Description }}</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 0\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Test-Boolean/#commonparameters","title":"CommonParameters","text":"<p>This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters.</p>"},{"location":"commands/Test-Boolean/#inputs","title":"INPUTS","text":""},{"location":"commands/Test-Boolean/#none","title":"None","text":""},{"location":"commands/Test-Boolean/#outputs","title":"OUTPUTS","text":""},{"location":"commands/Test-Boolean/#systemobject","title":"System.Object","text":""},{"location":"commands/Test-Boolean/#notes","title":"NOTES","text":""},{"location":"commands/Test-Boolean/#related-links","title":"RELATED LINKS","text":""},{"location":"commands/Test-Date/","title":"Test-Date","text":""},{"location":"commands/Test-Date/#synopsis","title":"SYNOPSIS","text":"<p>{{ Fill in the Synopsis }}</p>"},{"location":"commands/Test-Date/#syntax","title":"SYNTAX","text":"<pre><code>Test-Date [[-p] &lt;Object&gt;] [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"commands/Test-Date/#description","title":"DESCRIPTION","text":"<p>{{ Fill in the Description }}</p>"},{"location":"commands/Test-Date/#examples","title":"EXAMPLES","text":""},{"location":"commands/Test-Date/#example-1","title":"EXAMPLE 1","text":"<pre><code>PS C:\\&gt; {{ Add example code here }}\n</code></pre> <p>{{ Add example description here }}</p>"},{"location":"commands/Test-Date/#parameters","title":"PARAMETERS","text":""},{"location":"commands/Test-Date/#-p","title":"-p","text":"<p>{{ Fill p Description }}</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 0\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Test-Date/#commonparameters","title":"CommonParameters","text":"<p>This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters.</p>"},{"location":"commands/Test-Date/#inputs","title":"INPUTS","text":""},{"location":"commands/Test-Date/#none","title":"None","text":""},{"location":"commands/Test-Date/#outputs","title":"OUTPUTS","text":""},{"location":"commands/Test-Date/#systemobject","title":"System.Object","text":""},{"location":"commands/Test-Date/#notes","title":"NOTES","text":""},{"location":"commands/Test-Date/#related-links","title":"RELATED LINKS","text":""},{"location":"commands/Test-Integer/","title":"Test-Integer","text":""},{"location":"commands/Test-Integer/#synopsis","title":"SYNOPSIS","text":"<p>{{ Fill in the Synopsis }}</p>"},{"location":"commands/Test-Integer/#syntax","title":"SYNTAX","text":"<pre><code>Test-Integer [[-p] &lt;Object&gt;] [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"commands/Test-Integer/#description","title":"DESCRIPTION","text":"<p>{{ Fill in the Description }}</p>"},{"location":"commands/Test-Integer/#examples","title":"EXAMPLES","text":""},{"location":"commands/Test-Integer/#example-1","title":"EXAMPLE 1","text":"<pre><code>PS C:\\&gt; {{ Add example code here }}\n</code></pre> <p>{{ Add example description here }}</p>"},{"location":"commands/Test-Integer/#parameters","title":"PARAMETERS","text":""},{"location":"commands/Test-Integer/#-p","title":"-p","text":"<p>{{ Fill p Description }}</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 0\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Test-Integer/#commonparameters","title":"CommonParameters","text":"<p>This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters.</p>"},{"location":"commands/Test-Integer/#inputs","title":"INPUTS","text":""},{"location":"commands/Test-Integer/#none","title":"None","text":""},{"location":"commands/Test-Integer/#outputs","title":"OUTPUTS","text":""},{"location":"commands/Test-Integer/#systemobject","title":"System.Object","text":""},{"location":"commands/Test-Integer/#notes","title":"NOTES","text":""},{"location":"commands/Test-Integer/#related-links","title":"RELATED LINKS","text":""},{"location":"commands/Test-Number/","title":"Test-Number","text":""},{"location":"commands/Test-Number/#synopsis","title":"SYNOPSIS","text":"<p>{{ Fill in the Synopsis }}</p>"},{"location":"commands/Test-Number/#syntax","title":"SYNTAX","text":"<pre><code>Test-Number [[-p] &lt;Object&gt;] [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"commands/Test-Number/#description","title":"DESCRIPTION","text":"<p>{{ Fill in the Description }}</p>"},{"location":"commands/Test-Number/#examples","title":"EXAMPLES","text":""},{"location":"commands/Test-Number/#example-1","title":"EXAMPLE 1","text":"<pre><code>PS C:\\&gt; {{ Add example code here }}\n</code></pre> <p>{{ Add example description here }}</p>"},{"location":"commands/Test-Number/#parameters","title":"PARAMETERS","text":""},{"location":"commands/Test-Number/#-p","title":"-p","text":"<p>{{ Fill p Description }}</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 0\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Test-Number/#commonparameters","title":"CommonParameters","text":"<p>This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters.</p>"},{"location":"commands/Test-Number/#inputs","title":"INPUTS","text":""},{"location":"commands/Test-Number/#none","title":"None","text":""},{"location":"commands/Test-Number/#outputs","title":"OUTPUTS","text":""},{"location":"commands/Test-Number/#systemobject","title":"System.Object","text":""},{"location":"commands/Test-Number/#notes","title":"NOTES","text":""},{"location":"commands/Test-Number/#related-links","title":"RELATED LINKS","text":""},{"location":"commands/Test-String/","title":"Test-String","text":""},{"location":"commands/Test-String/#synopsis","title":"SYNOPSIS","text":"<p>{{ Fill in the Synopsis }}</p>"},{"location":"commands/Test-String/#syntax","title":"SYNTAX","text":"<pre><code>Test-String [[-p] &lt;Object&gt;] [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"commands/Test-String/#description","title":"DESCRIPTION","text":"<p>{{ Fill in the Description }}</p>"},{"location":"commands/Test-String/#examples","title":"EXAMPLES","text":""},{"location":"commands/Test-String/#example-1","title":"EXAMPLE 1","text":"<pre><code>PS C:\\&gt; {{ Add example code here }}\n</code></pre> <p>{{ Add example description here }}</p>"},{"location":"commands/Test-String/#parameters","title":"PARAMETERS","text":""},{"location":"commands/Test-String/#-p","title":"-p","text":"<p>{{ Fill p Description }}</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 0\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Test-String/#commonparameters","title":"CommonParameters","text":"<p>This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters.</p>"},{"location":"commands/Test-String/#inputs","title":"INPUTS","text":""},{"location":"commands/Test-String/#none","title":"None","text":""},{"location":"commands/Test-String/#outputs","title":"OUTPUTS","text":""},{"location":"commands/Test-String/#systemobject","title":"System.Object","text":""},{"location":"commands/Test-String/#notes","title":"NOTES","text":""},{"location":"commands/Test-String/#related-links","title":"RELATED LINKS","text":""},{"location":"commands/Update-FirstObjectProperties/","title":"Update-FirstObjectProperties","text":""},{"location":"commands/Update-FirstObjectProperties/#synopsis","title":"SYNOPSIS","text":"<p>Updates the first object to contain all the properties of the object with the most properties in the array.</p>"},{"location":"commands/Update-FirstObjectProperties/#syntax","title":"SYNTAX","text":"<pre><code>Update-FirstObjectProperties [[-InputObject] &lt;Object&gt;] [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"commands/Update-FirstObjectProperties/#description","title":"DESCRIPTION","text":"<p>Updates the first object to contain all the properties found anywhere in the array.</p> <p>This is usefull when not all objects have the same quantity of properties and CmdLets like Out-GridView or Export-Excel are not able to show all the properties because the first object doesn't have them all.</p>"},{"location":"commands/Update-FirstObjectProperties/#examples","title":"EXAMPLES","text":""},{"location":"commands/Update-FirstObjectProperties/#example-1","title":"EXAMPLE 1","text":"<pre><code>PS\\&gt; $Array = @()\nPS\\&gt; $Obj1  = [PSCustomObject]@{\n    Member1 = 'First'\n    Member2 = 'Second'\n}\nPS\\&gt; $Obj2  = [PSCustomObject]@{\n    Member1 = 'First'\n    Member2 = 'Second'\n    Member3 = 'Third'\n}\nPS\\&gt; $Obj3  = [PSCustomObject]@{\n    Member1 = 'First'\n    Member2 = 'Second'\n    Member3 = 'Third'\n    Member4 = 'Fourth'\n}\nPS\\&gt; $Array = $Obj1, $Obj2, $Obj3\nPS\\&gt; $Array | Out-GridView -Title 'Not showing Member3 and Member4'\nPS\\&gt; $Array | Update-FirstObjectProperties | Out-GridView -Title 'All properties are visible'\n</code></pre> <p>Updates the first object of the array by adding Member3 and Member4 and shows before and after in gridviews</p>"},{"location":"commands/Update-FirstObjectProperties/#example-2","title":"EXAMPLE 2","text":"<pre><code>PS\\&gt;$ExcelParams = @{\n       Path      = $env:TEMP + '\\Excel.xlsx'\n       Show      = $true\n       Verbose   = $true\n}\nPS\\&gt; Remove-Item -Path $ExcelParams.Path -Force -EA Ignore\nPS\\&gt; $Array = @()\nPS\\&gt; $Obj1  = [PSCustomObjectable@{\n    Member1 = 'First'\n    Member2 = 'Second'\n}\nPS\\&gt; $Obj2  = [PSCustomObject]@{\n    Member1 = 'First'\n    Member2 = 'Second'\n    Member3 = 'Third'\n}\nPS\\&gt; $Obj3  = [PSCustomObject]@{\n    Member1 = 'First'\n    Member2 = 'Second'\n    Member3 = 'Third'\n    Member4 = 'Fourth'\n}\nPS\\&gt; $Array = $Obj1, $Obj2, $Obj3\nPS\\&gt; $Array | Out-GridView -Title 'Not showing Member3 and Member4'\nPS\\&gt; $Array | Update-FirstObjectProperties | Export-Excel @ExcelParams -WorkSheetname Numbers\n</code></pre> <p>Updates the first object of the array by adding property 'Member3' and 'Member4'. Afterwards, all objects are exported to an Excel file and all column headers are visible.</p>"},{"location":"commands/Update-FirstObjectProperties/#parameters","title":"PARAMETERS","text":""},{"location":"commands/Update-FirstObjectProperties/#-inputobject","title":"-InputObject","text":"<p>{{ Fill InputObject Description }}</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 0\nDefault value: None\nAccept pipeline input: True (ByValue)\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/Update-FirstObjectProperties/#commonparameters","title":"CommonParameters","text":"<p>This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters.</p>"},{"location":"commands/Update-FirstObjectProperties/#inputs","title":"INPUTS","text":""},{"location":"commands/Update-FirstObjectProperties/#outputs","title":"OUTPUTS","text":""},{"location":"commands/Update-FirstObjectProperties/#notes","title":"NOTES","text":"<p>CHANGELOG 2017/06/08 Function born</p>"},{"location":"commands/Update-FirstObjectProperties/#related-links","title":"RELATED LINKS","text":"<p>https://github.com/dfinke/ImportExcel</p>"}]}